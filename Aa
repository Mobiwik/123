/*
 * EmpDetails.java
 *
 * Created on December 29, 2007, 10:47 AM
 */
package attendance;


import AutoReport.Client.AutoServerI;
import Others.Execute;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  Kunal Kamalnakhwa
 */

public class EmpDetails extends design.MHLInternalForm {

    private int SrNoLang = 0, SrNoFamily = 0, SrNoEarn = 0;
    private int SrNoRef = 0;
    private Connection con;
    private ResultSet loadedset,rsloadedCompany,rsloadedInterView,rsloadedCopmProv,rsEmpRef;
    private java.util.ArrayList<String>  arrListCodeLang, arrListCodeComp,arrListCodeDept,  
                        arrListDesig, arrListCateg, arrListCodeSalStru,arrBranch;                                  

    private java.util.ArrayList<Integer> arrlistCodeStateM, arrlistCodeStateP;
    private String asigmMarried,asigDeptHead,  asigExEmp,  asigIstrainee,  asigProb,  asigContract,  asigTA,  asigWA,  asigEA,  asigCCA,  asigSplallow,  asigOthers,  asigGratuity,  asigFBT,  aisgInsuranced,  asigPF,  asigESIC;
    private String asig2Wheel,  asig4Wheel;
    private String Marriagedt,  Bdate,  asigEffDate;
    private String EmpRefInsertedBy,EmpRefInsertedDate,EmpExperncInsertedBy,EmpExperncInsertedDate,EmpQualifInsertedBy,EmpQualifInsertedDate; 
    private String EmpFamilyInsertedBy,EmpFamilyInsertedDate;
    //DefaultTableModel modelSal;
    HashMap<String, Integer> mapEarDisc, mapDedDisc,mapEmpConDisc,mapSalOthers ;//,mapDeisg;
    HashMap<Integer,String> mapStateM,mapStateP ;
    HashMap<String,String> mapBankDet;
   
    private DefaultTableModel modelDedSal,  modelSal,  modelSalDedEmpCon,modelSalOthers,modelExpernc,modelQualification;
    private int SrNoTblEarnings=0,SrNoTblSalEmpDed=0,SrNoTblEmpCon=0,SrNoSalOthers,SrNoExperncDet,SrNoQualification;
    boolean bEdit;  
    String Company;
    String FinYear;
    String User;
    private boolean bRAdd,bRDelete,bRSearch,bROpen,bREdit,bSearch,bRReport;
    private int ISRMaxNo;
    private boolean bclkDelete;
  
    private String frmEmpCode;
    private String frmSrno;
    
    /** Creates new form EmpDetails */    
    public EmpDetails() {

        super("Employee Details",false,true,false,true);
        loadCommanDetails(null);

    }

    public void loadCommanDetails(String EmpCode){
        
        mapEarDisc  = new HashMap<String, Integer>();
        mapDedDisc  = new HashMap<String, Integer>();
        mapEmpConDisc   =   new HashMap<String, Integer>();
        mapSalOthers    =   new HashMap<String, Integer>();         
        mapBankDet      =   new HashMap<String, String>();
      //  try {
         Others.Execute.changeProgress("Intializing  Components.............",0);
        /*AfterLoginMainForm.label.setText("Intializing  Components.............");
        AfterLoginMainForm.prgbar.setValue(0);
        AfterLoginMainForm.prgbar.doLayout();
         */ 
        initComponents();
        /*
        AfterLoginMainForm.prgbar.setValue(10);
        AfterLoginMainForm.prgbar.doLayout();
        */
        
        tbdEmpDet.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);

        Others.Execute.changeProgress("Intializing  Components completed.............",10);  

        this.con = AfterLoginMainForm.con;     
        this.FinYear =AfterLoginMainForm.finyear;
        this.User = AfterLoginMainForm.user;
        this.Company= AfterLoginMainForm.comp;
        TableColumnModel columnModel = tblLanguage.getColumnModel();
        TableColumn column = columnModel.getColumn(0);
        column.setPreferredWidth(5);
        column = columnModel.getColumn(1);
        column.setPreferredWidth(85);
        column = columnModel.getColumn(2);
        column.setPreferredWidth(20);
        column = columnModel.getColumn(3);
        column.setPreferredWidth(20);
        column = columnModel.getColumn(4);
        column.setPreferredWidth(20);

        tblLanguage.getTableHeader().setResizingAllowed(true);
        tblLanguage.getTableHeader().setReorderingAllowed(true);

//        Dimension D = Toolkit.getDefaultToolkit().getScreenSize();
//        setResizable(false);
//        setLocation(D.width / 2 - getWidth() / 2, D.height / 2 - getHeight() / 2);
        
        Others.Execute.changeProgress("Loading  States & Branches.............",20); 
        /*AfterLoginMainForm.label.setText("Loding  States.............");
        AfterLoginMainForm.prgbar.setValue(20);
        AfterLoginMainForm.prgbar.doLayout();*/        
        loadstate();
        loadBranches();
        /*AfterLoginMainForm.label.setText("Loding  Designations.............");
        AfterLoginMainForm.prgbar.setValue(30);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Designations.............",30);
        loadDesig();
        
        /*AfterLoginMainForm.label.setText("Loding  Companys.............");
        AfterLoginMainForm.prgbar.setValue(40);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Companys.............",40);
        loadCompany();
        /*
        AfterLoginMainForm.label.setText("Loding  Departments.............");
        AfterLoginMainForm.prgbar.setValue(50);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Departments.............",50);
        loadDept();
        
        /*AfterLoginMainForm.label.setText("Loding  Languages.............");
        AfterLoginMainForm.prgbar.setValue(60);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Languages.............",60);
        loadlanguagecombo();
        
        /*AfterLoginMainForm.label.setText("Loding  Categories.............");
        AfterLoginMainForm.prgbar.setValue(70);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Languages.............",70);
        loadcateg();       
        
   
        setFamily();       
        adjtable();
        ((design.MHLTable)tblFamily).doRendering();
        ((design.MHLTable)tblExperinceDetails).doRendering();
        ((design.MHLTable)tblLanguage).doRendering();
        ((design.MHLTable)tblNetSalDet).doRendering();
        ((design.MHLTable)tblQualification).doRendering();
        ((design.MHLTable)tblRef).doRendering();
        ((design.MHLTable)tblSalDedEmpCon).doRendering();
        ((design.MHLTable)tblSalDeduction).doRendering();       
        ((design.MHLTable)tblSalEarnings).doRendering();
        ((design.MHLTable)tblSalOthers).doRendering();
        ((design.MHLTable)tblBankAccDet).doRendering();

        loadSalType();
        
        loadShiftCode();
        /*AfterLoginMainForm.label.setText("Loding  Employee Details.............");       
        AfterLoginMainForm.prgbar.setValue(80);
        AfterLoginMainForm.prgbar.doLayout();*/
        Others.Execute.changeProgress("Loading  Employess Details.............",80);
        //Loading lst emp data      
        loadEmpDet( EmpCode,true );       
        /*AfterLoginMainForm.prgbar.setValue(90);
        AfterLoginMainForm.prgbar.doLayout();
        
        AfterLoginMainForm.label.setText("Loding  Button Images & Rights.............");
         * */
        Others.Execute.changeProgress("Loading  Button Images & Rights.............",90);
        loadButtonImages();        
        settxtDisabled();
            
        loadRights();
        makeAllEnable(false);
        EnableAll(true,false, false, true,true,true);
        //tbdEmpDet.add(new JButton("Save") );
        //AfterLoginMainForm.label.setText("Loding  UI.............");
        Others.Execute.changeProgress("Loading  UI.............",90);
        tbdEmpDet.setUI( new design.MHLTabPaneUI());
        tbdSalType.setUI( new design.MHLTabPaneUI());
        /*AfterLoginMainForm.prgbar.setValue(100);
        AfterLoginMainForm.prgbar.doLayout();
        AfterLoginMainForm.label.setText("Loding Completed.............");*/
        Others.Execute.changeProgress("Loading  Completed.............",100);
        
    }
    
    public EmpDetails(String EmpCode) {        
        
        super("Employee Details",false,true,false,true);        
        this.frmEmpCode =  EmpCode.substring( EmpCode.indexOf("-")+1, EmpCode.length()).trim();
        this.frmSrno    =  EmpCode.substring( 0,EmpCode.indexOf("-")-1  ).trim();      
        loadCommanDetails(frmEmpCode);
        AfterLoginMainForm.addFrame(this);
    }
    
    private void CreateLogin() throws SQLException {
        
        
            ResultSet set = con.createStatement().executeQuery(  "select " +
                    "	cast ( max(userid)+1 as Varchar(10)) " +
                    "   as userid from UserMaster" +
                    "   UNION ALL" +
                    "   Select ( subString(EmpF_Name,1,2) " +
                    "   + cast (day(Dob) as Varchar(2)) " +
                    "	+ cast (Month(Dob) as Varchar(2)) " +
                    "	+ cast ( EmpCode as Varchar(10))" +
                    "	) as Password " +
                    "   From Emp_ContactFull" +
                    "   Where EmpCode = "+lblEmpCode.getText() );
            
            set.next();
            String userid = set.getString("userid");
            set.next();
            String password = set.getString("UserID");
            String str = " insert into UserMaster (UserName,Password,EditPassword,UserDisc,UserImage,UserType,UserID,Company,InsertedBY,InsertedDate ";
            
            str += " )";
            str +=  " values ( '"
            + lblEmpCode.getText() + "','"
            + password + "','"
            + lblEmpCode.getText() + "','"
            + txtFName.getText()+" "+ txtSName.getText()+" " + txtLName.getText()+ "','"
            + txtPerpath.getText()+ "','"
            + "User"
            +"'," + userid+  ","+AfterLoginMainForm.compcode ;
            str += ",'" + AfterLoginMainForm.user
            + "',getDate()" + " ) ";
            System.out.println(str);
            Statement  stat = con.createStatement();
            stat.addBatch(str);

            str = " insert into  Frm_Normal_User_Form_Properties " +
                            " select " + lblEmpCode.getText() +"  as EmpCode,*,'Auto' as InsertedBy, " +
                            " getDate() as InsertedDate,null as UpdatedBy ,null as Updateddate from Frm_Ms_Normal_User_Form_Properties " ;
            System.out.println(str);
            stat.addBatch(str);
            stat.executeBatch();
                
    }

    private void EnableAll(boolean New,boolean bSave, boolean  bDelete, boolean bEdit,boolean bSearch, boolean bReport){     
             
       btnNew.setEnabled(New);
       
       if( bRDelete)   
            btnDelete.setEnabled(bDelete);
       else
           btnDelete.setEnabled(false);

        if( bRAdd  )
            btnSaveNew.setEnabled( bSave);
       else
           if( !bEdit && bREdit  )
                btnSaveNew.setEnabled( bSave);
           else
                btnSaveNew.setEnabled( false);
       
       btnEdit.setEnabled(bEdit);
      
       if( bRSearch ){
           btnSearch.setEnabled(bSearch);  
           btnFirst.setEnabled( bSearch );
           btnPrev.setEnabled(bSearch);  
           btnNext.setEnabled( bSearch );
           btnLast.setEnabled(bSearch);                   
       }
       
       if( bRReport )  
           btnReport.setEnabled(bReport);      
        
       
     }
            
    private void loadRights() {
        try {

            String user = "";
            String frm_name="";
            if( AfterLoginMainForm.userType.equals("User")){
                    user = AfterLoginMainForm.user;
                    frm_name = " Frm_Normal_User_Form_Properties ";
            }else{
                    user = AfterLoginMainForm.userID+"";
                     frm_name = "Frm_User_Form_Properties";
            }

            String str = " Select * from "+ frm_name+" where EmpCode=" + user;
            str += " and Grp_No=2 and Main_no=9 and sub_no= -1";
            System.out.println(str);
                
            java.sql.ResultSet set = con.createStatement().executeQuery(str);
            if (set.next()) {
                if(!AfterLoginMainForm.userType.equals("User")){
                    bRAdd = new Boolean(set.getString("CanAdd"));
                    bREdit = new Boolean(set.getString("CanEdit"));
                    bRDelete = new Boolean(set.getString("CanDelete"));
                    bRSearch = new Boolean(set.getString("CanSearch"));
                }
                bROpen = new Boolean(set.getString("CanOpen"));
                bRReport = new Boolean(set.getString("CanReport"));
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(EmpDetails.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        
    }
    
    public boolean getCanOpen(){
            return bROpen;
    
    }
    
    private void loadBranches() {
        try {
            
            String str = " Select Code,Disc from Ms_Branch Where Company=" + AfterLoginMainForm.compcode;            
            java.sql.ResultSet set = con.createStatement().executeQuery(str);        
            //cboBranch.removeAllItems();            
            
            
            if( arrBranch !=null && !arrBranch.isEmpty())
                    arrBranch.clear();
            arrBranch = new ArrayList();
            while (set.next()) {                             
                cboBranch.addItem( set.getString("Disc") +" - "+set.getString("Code") );
                arrBranch.add( set.getString("Code") );
            }
            set.close();
            set = null;
            str = null;
        } catch (SQLException ex) {
            Logger.getLogger(Ms_Company.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addCompProviding() throws SQLException {
        String comma = ",",sCode="'";
        String myStatement = "insert into Emp_ComProviding (EmpCode,Accomdation,Phone,Food,Mobile,Internet,Fuel,SimCard,MobBill,Two_Wheeler,Four_Wheeler, InsertedBy,InsertedDate,UpdatedBy,UpdatedDate)values ( ";
        myStatement += lblEmpCode.getText()+comma;
        myStatement += sCode+chkAccomodation.isSelected()+sCode+comma;
        myStatement += sCode+chkPhonComp.isSelected()+sCode+comma;
        myStatement += sCode+chkFood.isSelected()+sCode+comma;
        myStatement += sCode+chkMobile.isSelected()+sCode+comma;
        myStatement += sCode+chkInternet.isSelected()+sCode+comma;
        myStatement += sCode+chkFuel.isSelected()+sCode+comma;
        myStatement += sCode+chkSimCard.isSelected()+sCode+comma;
        myStatement += sCode+chkMobileBill.isSelected()+sCode+comma;
        myStatement += sCode+chk2WheelComp.isSelected()+sCode+comma;
        myStatement += sCode+chk4WheelComp.isSelected()+sCode+comma;   
        if(bEdit){  
            myStatement += sCode+rsloadedCopmProv.getString("InsertedBy")+sCode +comma;
            myStatement += sCode+Execute.DateBaseToDataBase(rsloadedCopmProv.getDate("InsertedDate"))+sCode+comma;
        }else{
            myStatement += sCode+User+sCode+comma;        
            myStatement += sCode+getToday()+sCode+comma;
        }
        myStatement += sCode+User+sCode+comma;        
        myStatement += sCode+getToday()+sCode;
        myStatement += ")";
        System.out.println(myStatement);
        con.createStatement().executeUpdate(myStatement);                                   
    }
    
    private void addCompProvidingREQ() throws SQLException {
        String comma = ",",sCode="'";
        String myStatement = "insert into REQ_Emp_ComProviding (ISRNo,EmpCode,Accomdation,Phone,Food,Mobile,Internet,Fuel,SimCard,MobBill,Two_Wheeler,Four_Wheeler, InsertedBy,InsertedDate,UpdatedBy,UpdatedDate)values ( ";
        myStatement += ISRMaxNo+comma;
        myStatement += lblEmpCode.getText()+comma;
        myStatement += sCode+chkAccomodation.isSelected()+sCode+comma;
        myStatement += sCode+chkPhonComp.isSelected()+sCode+comma;
        myStatement += sCode+chkFood.isSelected()+sCode+comma;
        myStatement += sCode+chkMobile.isSelected()+sCode+comma;
        myStatement += sCode+chkInternet.isSelected()+sCode+comma;
        myStatement += sCode+chkFuel.isSelected()+sCode+comma;
        myStatement += sCode+chkSimCard.isSelected()+sCode+comma;
        myStatement += sCode+chkMobileBill.isSelected()+sCode+comma;
        myStatement += sCode+chk2WheelComp.isSelected()+sCode+comma;
        myStatement += sCode+chk4WheelComp.isSelected()+sCode+comma;   
        if(bEdit){  
            myStatement += sCode+rsloadedCopmProv.getString("InsertedBy")+sCode +comma;
            myStatement += sCode+Execute.DateBaseToDataBase(rsloadedCopmProv.getDate("InsertedDate"))+sCode+comma;
        }else{
            myStatement += sCode+User+sCode+comma;        
            myStatement += sCode+getToday()+sCode+comma;
        }
        myStatement += sCode+User+sCode+comma;        
        myStatement += sCode+getToday()+sCode;
        myStatement += ")";
        System.out.println(myStatement);
        con.createStatement().executeUpdate(myStatement);
    }
       
    private void addCompanyDetails() throws SQLException {
        String comma = ",",sCode="'";
        String myStatement = "insert into Emp_CompDet (EmpCode,Company,Branch,Dept,Designation,Category,Reporting,IsDeptHead," +
                "WeekOffNo,WeekOff,Shift_Code,PunchNo,IsTrainee,DoJ_Grp,DoJ_Comp,IsExEmpl,ExDOJ,ExDoL,OnProbation" +
                ",Prob_From,Prob_To,OnContract,ContactFrom,ContractTo,Confirmation,SalEffectDate,AnualRentPaid )  values( ";
        myStatement+= lblEmpCode.getText() + comma;
        myStatement+= cboCompany.getSelectedIndex()+comma;
        String Branch = cboBranch.getSelectedItem()+"";
        myStatement+= "'"+Branch.substring( Branch.indexOf("-")+1,Branch.length() ).trim()+ "',";        
        Branch = null;
        myStatement+= arrListCodeDept.get(cboDept.getSelectedIndex()-1)+comma;
        myStatement+= arrListDesig.get(cboDesignation.getSelectedIndex())+comma;
        myStatement+= cboCategory.getSelectedIndex()+comma;
        
        //myStatement+= cboReporting.getSelectedIndex()+comma;
        myStatement+= sCode+(((Others.SearchCombo)cboReporting).getEmpCode())+sCode+comma;
        myStatement+= sCode +chkDeptHead.isSelected()+sCode+comma;
        myStatement+= cboWeekOff.getSelectedIndex()+comma;
        myStatement+= sCode+cboWeekOff.getSelectedItem()+sCode+comma;
        myStatement+= cboShift.getSelectedIndex()+comma;
        myStatement+= txtPunch.getText()+comma;
        myStatement+= sCode+ chkTrainee.isSelected()+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtDoj.getSelectedItem())+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtCoj.getSelectedItem())+sCode+comma;
        myStatement+= sCode+chkExEmp.isSelected()+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtExDoj.getSelectedItem())+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtExLeaveDate.getSelectedItem())+sCode+comma;
        myStatement+= sCode+chkProbation.isSelected()+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtProbFrom.getSelectedItem())+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtProbToDate.getSelectedItem())+sCode+comma;
        myStatement+= sCode+chkContract.isSelected()+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtContFrom.getSelectedItem())+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtContToDate.getSelectedItem())+sCode+comma;       
        myStatement+= sCode+Execute.DateConv((String)dtConfirmDate.getSelectedItem())+sCode+comma;
        myStatement+= sCode+Execute.DateConv((String)dtEffectDate.getSelectedItem())+sCode+comma;        
        myStatement+= Execute.IntegerToString( txtRentPaid.getText() )+" ) ";                
        // myStatlement+= "\'\'"+comma+"\'\'"+")";
        System.out.println(myStatement);
        con.createStatement().executeUpdate(myStatement);                            
        
    }

    
    private void addEmpSalHistory(char Type) throws SQLException{
        
        String EmpCode = lblEmpCode.getText();
        String str = " INSERT INTO Hs_EmpEarnings ( ";
        str +=" EmpCode,ISrNo,Ern_Code,Amount,SalEffectDate,EdDate,EdType,UserId";
        str +=")";
        str +=" SELECT EmpCode,ISrNo,Ern_Code,Amount,SalEffectDate,GETDATE(),'"+Type+"','"+AfterLoginMainForm.user+"' FROM Ms_EmpEarnings main ";
        str += " WHERE  EmpCode="+EmpCode+" and ISrNo IN( SELECT MAX(ISrNo) FROM  Ms_EmpEarnings WHERE EmpCode=main.EmpCode) ";
        System.out.println(str);
        con.createStatement().executeUpdate(str);
        
        str = " INSERT INTO Hs_EmpDeduction ( ";
        str +=" EmpCode,ISrNo,ded_Code,Amount,EdDate,EdType,UserId";
        str +=")";
        str +=" SELECT EmpCode,ISrNo,ded_Code,Amount,GETDATE(),'"+Type+"','"+AfterLoginMainForm.user+"' FROM Ms_EmpDeduction main ";
        str += " WHERE  EmpCode="+EmpCode+" and ISrNo IN( SELECT MAX(ISrNo) FROM  Ms_EmpEarnings WHERE EmpCode=main.EmpCode) ";
        System.out.println(str);
        con.createStatement().executeUpdate(str);
        
        str = " INSERT INTO Hs_EmpContrib ( ";
        str +=" EmpCode,ISrNo,Con_Code,Amount,EdDate,EdType,UserId";
        str +=")";
        str +=" SELECT EmpCode,ISrNo,Con_Code,Amount,GETDATE(),'"+Type+"','"+AfterLoginMainForm.user+"' FROM Ms_EmpContribution main ";
        str += " WHERE  EmpCode="+EmpCode+" and ISrNo IN( SELECT MAX(ISrNo) FROM  Ms_EmpEarnings WHERE EmpCode=main.EmpCode) ";
        System.out.println(str);
        con.createStatement().executeUpdate(str);
        
        str = " INSERT INTO Hs_EmpSalOthers ( ";
        str +=" EmpCode,ISrNo,Othe_Code,Amount,EdDate,EdType,UserId";
        str +=")";
        str +=" SELECT EmpCode,ISrNo,Othe_Code,Amount,GETDATE(),'"+Type+"','"+AfterLoginMainForm.user+"' FROM MS_EmpSalOthers main ";
        str += " WHERE  EmpCode="+EmpCode+" and ISrNo IN( SELECT MAX(ISrNo) FROM  Ms_EmpEarnings WHERE EmpCode=main.EmpCode) ";
        System.out.println(str);
        con.createStatement().executeUpdate(str);
          
    }
    
    private void addEmpEaringsHistory() throws SQLException  {

               
        
       String comma=",",sCode="'";
       String myStatement = "select max(ISrNo)as Code from Hs_EmpEarnings where EmpCode= "+lblEmpCode.getText();
       ResultSet set =  con.createStatement().executeQuery(myStatement);
       ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpEarnings where Empcode="+lblEmpCode.getText() );
        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;
      for(int i=0;i< modelSal.getRowCount();i++){
          myStatement = "insert into Hs_EmpEarnings (EmpCode,ISrNo,Ern_Code,Amount," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
          myStatement += lblEmpCode.getText()+comma;
          myStatement += maxCode+comma;
          myStatement += mapEarDisc.get(tblSalEarnings.getValueAt(i, 1)) + comma;         
          myStatement += tblSalEarnings.getValueAt(i, 2) + comma;
          
          if(bEdit &&  setMyStatement.next()){                          
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;
          }
               myStatement += sCode+User+sCode+comma;
               myStatement += sCode+ getToday()+sCode; 
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
      }
    }
    
    private void addEmpDeductionHistory() throws SQLException  {
        
        String comma=",",sCode="'";
        String myStatement = "select max(ISrNo)as Code from Hs_EmpDeduction where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpDeduction where Empcode="+lblEmpCode.getText() );
          
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;
      for(int i=0;i< modelDedSal.getRowCount();i++){
          myStatement = "insert into Hs_EmpDeduction (EmpCode,ISrNo,Ded_Code,Amount," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement += mapDedDisc.get(tblSalDeduction.getValueAt(i, 1)) + comma;         
          myStatement += tblSalDeduction.getValueAt(i, 2) + comma;
          
          if(bEdit &&  setMyStatement.next()){                           
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;                     
          }
               myStatement += sCode+User+sCode+comma;    
               myStatement += sCode+ getToday()+sCode;  
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
      }
    }
    
    private void addEmpContributionHistory() throws SQLException  {
        
         String comma=",",sCode="'";
        String myStatement = "select max(ISrNo)as Code from Hs_EmpContrib where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpContrib where Empcode="+lblEmpCode.getText() );
        //setMyStatement.next();        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;
      for(int i=0;i< modelSalDedEmpCon.getRowCount();i++){
          myStatement = "insert into Hs_EmpContrib (EmpCode,ISrNo,Con_Code,Amount," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement += mapEmpConDisc.get(tblSalDedEmpCon.getValueAt(i, 1)) + comma;         
          myStatement += tblSalDedEmpCon.getValueAt(i, 2) + comma;
          
          if(bEdit &&  setMyStatement.next()){  
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;                     
          }
               myStatement += sCode+User+sCode+comma;    
               myStatement += sCode+ getToday()+sCode;  
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
      }
    }
    
     private void addEmpSalOthersHistory() throws SQLException  {
        
         String comma=",",sCode="'";
        String myStatement = "select max(ISrNo)as Code from Hs_EmpSalOthers where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpSalOthers where Empcode="+lblEmpCode.getText() );
        //setMyStatement.next();        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;
      for(int i=0;i< modelSalOthers.getRowCount();i++){
          myStatement = "insert into Hs_EmpSalOthers (EmpCode,ISrNo,Othe_Code,Amount," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement += mapSalOthers.get(tblSalOthers.getValueAt(i, 1)) + comma;         
          myStatement += tblSalOthers.getValueAt(i, 2) + comma;
          
          if(bEdit &&  setMyStatement.next()){  
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;                     
          }
               myStatement += sCode+User+sCode+comma;    
               myStatement += sCode+ getToday()+sCode;  
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
      }
    }

    private void addHistory() throws SQLException {
        
        if(chkTrainee.isSelected())
                addTraineHistory();
        if(chkContract.isSelected())
                addContractHistory();
        if(chkProbation.isSelected())
                addProbationHistory();
        addEmpSalHistory('E');
//        addEmpEaringsHistory();
//        addEmpDeductionHistory();
//        addEmpContributionHistory();
//        addEmpSalOthersHistory();
    }

    private void addShiftMaster() throws SQLException {
        String comma=",",sCode="'";
        String myStatement = "select max(SrNo)as Code from Emp_ShiftDet where EmpCode= "+lblEmpCode.getText();
        
        //Remember to  Comment this
        /*ResultSet set =  con.createStatement().executeQuery(myStatement);
         int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
         }
         maxCode++;*/
        
         myStatement =  "delete from Emp_ShiftDet where EmpCode= "+lblEmpCode.getText() +" and SRNO=  (select max(SrNo)as Code from Emp_ShiftDet where EmpCode= "+lblEmpCode.getText()+")" ;
         
          con.createStatement().executeUpdate(myStatement);
          
           int maxCode =1;
           myStatement = "insert into Emp_ShiftDet (EmpCode,SrNo,EffDate,ShiftCode,Remarks," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
           myStatement+= lblEmpCode.getText()+comma;
           myStatement+= maxCode+comma;
           myStatement += sCode+ getToday()+sCode+comma;   
           String shiftcode = ""+cboShift.getSelectedIndex();
           if(cboShift.getSelectedIndex() <= 9)
               shiftcode = "0"+shiftcode;
           myStatement += sCode+shiftcode+sCode+comma;
           myStatement += sCode+"New Entry"+sCode+comma;
           myStatement += sCode+User+sCode+comma;
           myStatement += sCode+ getToday()+sCode+comma;    
           myStatement += sCode+User+sCode+comma;    
           myStatement += sCode+ getToday()+sCode;            
           myStatement+=")";
           System.out.println(myStatement);           
           con.createStatement().executeUpdate(myStatement);
         
    }    

    private void addTraineHistory()throws SQLException{
        
        String comma=",",sCode="'";
        String myStatement = "select max(ISrNo)as Code from Hs_EmpTraine where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpTraine where Empcode="+lblEmpCode.getText() );
        //setMyStatement.next();        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;
          myStatement = "insert into Hs_EmpTraine (EmpCode,ISrNo,Fromdate,ToDate," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate " +
                  ") values(";
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement+= sCode + Execute.DateConv((String) dtDoj.getSelectedItem())+ sCode+comma;
          myStatement+= sCode + Execute.DateConv((String) dtCoj.getSelectedItem()) + sCode+comma;
          if(bEdit &&  setMyStatement.next()){  
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;                     
          }
                myStatement += sCode+User+sCode+comma;    
                myStatement += sCode+ getToday()+sCode;  
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
          
    }
    
    private void addProbationHistory()throws SQLException{
        String comma=",",sCode="'";
        String myStatement = "select max(ISrNo) as Code from Hs_EmpProbation where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpProbation where Empcode="+lblEmpCode.getText() );
        //setMyStatement.next();  
        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          
          maxCode++;
          myStatement = "insert into Hs_EmpProbation (EmpCode,ISrNo,Fromdate,ToDate ," +
                  "InsertedBy,InsertedDate,UpdatedBy,UpdatedDate ) values(";
          
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement+= sCode + Execute.DateConv(dtProbFrom.getSelectedItem()+"")+ sCode+comma;
          myStatement+= sCode + Execute.DateConv(dtProbToDate.getSelectedItem()+"")+ sCode+comma;
          
          if(bEdit &&  setMyStatement.next()){  
                myStatement += sCode+ setMyStatement.getString("InsertedBy") +sCode+comma;
                myStatement += sCode+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+sCode+comma;
          }else{
                 myStatement += sCode+User+sCode+comma;
                 myStatement += sCode+ getToday()+sCode+comma;                     
          }
               myStatement += sCode+User+sCode+comma;    
               myStatement += sCode+ getToday()+sCode;  
          
          
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
    }
    
    private void addContractHistory()throws SQLException{
        String comma=",",code="'";
        String myStatement = "select max(ISrNo) as Code from Hs_EmpContract where EmpCode= "+lblEmpCode.getText();
        ResultSet set =  con.createStatement().executeQuery(myStatement);
        ResultSet setMyStatement =  con.createStatement().executeQuery("Select InsertedBy,InsertedDate from Hs_EmpProbation where Empcode="+lblEmpCode.getText() );
        //setMyStatement.next();  
        
          int maxCode = 0;
          while(set.next()){
               maxCode = set.getInt("Code");               
          }
          maxCode++;        
          
          myStatement = "insert into Hs_EmpContract (EmpCode,ISrNo,Fromdate,ToDate," +
                  " InsertedBy,InsertedDate,UpdatedBy,UpdatedDate ) values(";
          
          myStatement+= lblEmpCode.getText()+comma;
          myStatement+= maxCode+comma;
          myStatement+= code + Execute.DateConv(dtContFrom.getSelectedItem()+"")+ code+comma;
          myStatement+= code + Execute.DateConv(dtContToDate.getSelectedItem()+"")+ code+comma;
          
          if(bEdit &&  setMyStatement.next()){  
                myStatement += code+ setMyStatement.getString("InsertedBy") +code+comma;
                myStatement += code+Execute.DateBaseToDataBase(setMyStatement.getDate("InsertedDate"))+code+comma;
          }else{
                 myStatement += code+User+code+comma;
                 myStatement += code+ getToday()+code+comma;                     
          }
               myStatement += code+User+code+comma;    
               myStatement += code+ getToday()+code;  
          
          
          myStatement+=")";
          System.out.println(myStatement);
          con.createStatement().executeUpdate(myStatement);
    }
    
    private void addExperince() throws SQLException {
        String myStatement = "insert into Emp_ExperinceDet (EmpCode,iSrNo,Organization,Joining_Date,Leaving_Date,Joining_Position,Leaving_Position,Joining_Salary,Leaving_Salary,Responsibilities,Leaving_Reason,Superiors_Name" +
                " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
        myStatement+="values (";

        String sCode="'",comma=",";
        for(int i =0;i<modelExpernc.getRowCount();i++)       {
             String temp =myStatement;
             
          // for(int j =0;j<tblExperinceDetails.getColumnCount();j++)  {               
                temp+= lblEmpCode.getText()+comma;
                temp+=  modelExpernc.getValueAt(i, 0)+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 1)+sCode+comma;
                temp+= sCode+ Execute.DateConv((String) modelExpernc.getValueAt(i, 2))+sCode+comma;
                temp+= sCode+ Execute.DateConv((String)modelExpernc.getValueAt(i, 3))+sCode+comma;                
                temp+= sCode+ modelExpernc.getValueAt(i, 4)+sCode+comma;                   
                temp+= sCode+ modelExpernc.getValueAt(i, 5)+sCode+comma;
                temp+=  Execute.IntegerToString( modelExpernc.getValueAt(i, 6))+comma;
                temp+=  Execute.IntegerToString(  modelExpernc.getValueAt(i, 7))+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 8)+sCode+comma;                
                temp+= sCode+ modelExpernc.getValueAt(i,9 )+sCode+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 10)+sCode+comma;     
                
                if(bEdit && EmpExperncInsertedBy !=null){        
                    //rsEmpRef.next();
                    //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    temp += sCode+EmpExperncInsertedBy+sCode+comma;
                    temp += sCode+EmpExperncInsertedDate+sCode+comma;
                }else{
                     temp += sCode+User+sCode+comma;
                     temp += sCode+ getToday()+sCode+comma;                     
                }
                temp += sCode+User+sCode+comma;    
                temp += sCode+ getToday()+sCode;                     
                temp += ")";
                //myStatement += sCode+User+sCode+comma;        
              //  myStatement += sCode+getToday()+sCode;
              //}           
              System.out.println(temp);
              con.createStatement().executeUpdate(temp);              
        }       
        myStatement=null;
    }
    private void addExperinceREQ() throws SQLException {
        String myStatement = "insert into REQ_Emp_ExperinceDet ( REQSRNO,EmpCode,iSrNo,Organization,Joining_Date,Leaving_Date,Joining_Position,Leaving_Position,Joining_Salary,Leaving_Salary,Responsibilities,Leaving_Reason,Superiors_Name" +
                " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
        myStatement+="values ("+ ISRMaxNo+",";

        String sCode="'",comma=",";
        for(int i =0;i<modelExpernc.getRowCount();i++)       {
             String temp =myStatement;
             
          // for(int j =0;j<tblExperinceDetails.getColumnCount();j++)  {               
                temp+= lblEmpCode.getText()+comma;
                temp+=  modelExpernc.getValueAt(i, 0)+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 1)+sCode+comma;
                temp+= sCode+ Execute.DateConv((String) modelExpernc.getValueAt(i, 2))+sCode+comma;
                temp+= sCode+ Execute.DateConv((String)modelExpernc.getValueAt(i, 3))+sCode+comma;                
                temp+= sCode+ modelExpernc.getValueAt(i, 4)+sCode+comma;                   
                temp+= sCode+ modelExpernc.getValueAt(i, 5)+sCode+comma;
                temp+=  Execute.IntegerToString( modelExpernc.getValueAt(i, 6))+comma;
                temp+=  Execute.IntegerToString(  modelExpernc.getValueAt(i, 7))+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 8)+sCode+comma;                
                temp+= sCode+ modelExpernc.getValueAt(i,9 )+sCode+comma;
                temp+= sCode+ modelExpernc.getValueAt(i, 10)+sCode+comma;     
                
                if(bEdit && EmpExperncInsertedBy !=null){        
                    //rsEmpRef.next();
                    //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    temp += sCode+EmpExperncInsertedBy+sCode+comma;
                    temp += sCode+EmpExperncInsertedDate+sCode+comma;
                }else{
                     temp += sCode+User+sCode+comma;
                     temp += sCode+ getToday()+sCode+comma;                     
                }
                temp += sCode+User+sCode+comma;    
                temp += sCode+ getToday()+sCode;                     
                temp += ")";
                //myStatement += sCode+User+sCode+comma;        
              //  myStatement += sCode+getToday()+sCode;
              //}           
              System.out.println(temp);
              con.createStatement().executeUpdate(temp);              
        }       
        myStatement=null;
    }

    private void addInterviewDetails() throws SQLException {
      
        String sCode="'",comma=",";
       String myStatement = "insert into Emp_InterView (EmpCode,Pre_Interv_By,Pre_Ondate,Pre_Remarks,Final_Interv_By,Final_Ondate,Final_Remarks " +
               " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
       myStatement+= " values("+lblEmpCode.getText()+comma;
       myStatement+= sCode+txtInterviewPre.getText()+sCode+comma;
       myStatement+= sCode+Execute.DateConv(dtInterviewPre.getSelectedItem().toString())+sCode+comma;
       myStatement+= sCode+txtRemarksPre.getText()+sCode+comma;
       myStatement+= sCode+cboInterviewFinal.getSelectedItem().toString()+sCode+comma;
       myStatement+= sCode+Execute.DateConv(dtInterviewFinal.getSelectedItem().toString())+sCode+comma;       
       myStatement+= sCode+txtRemarksFinal.getText()+sCode+comma;
       if(bEdit &&   (!rsloadedInterView.isAfterLast())  ){
         myStatement += sCode+rsloadedInterView.getString("InsertedBy")+sCode +comma;
         myStatement += sCode+Execute.DateBaseToDataBase(rsloadedInterView.getDate("InsertedDate"))+sCode+comma;
       }else{
         myStatement += sCode+User+sCode+comma;        
         myStatement += sCode+getToday()+sCode+comma;
       }
        myStatement += sCode+User+sCode+comma;        
        myStatement += sCode+getToday()+sCode;
        myStatement+=")";
       System.out.println(myStatement);
       con.createStatement().executeUpdate(myStatement);         
    }
    private void addInterviewDetailsREQ() throws SQLException {

            String sCode="'",comma=",";
           String myStatement = "insert into REQ_Emp_InterView (ISRNO,EmpCode,Pre_Interv_By,Pre_Ondate,Pre_Remarks,Final_Interv_By,Final_Ondate,Final_Remarks " +
                   " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
           myStatement+= " values("+ ISRMaxNo+"," +lblEmpCode.getText()+comma;
           myStatement+= sCode+txtInterviewPre.getText()+sCode+comma;
           myStatement+= sCode+Execute.DateConv(dtInterviewPre.getSelectedItem().toString())+sCode+comma;
           myStatement+= sCode+txtRemarksPre.getText()+sCode+comma;
           myStatement+= sCode+cboInterviewFinal.getSelectedItem().toString()+sCode+comma;
           myStatement+= sCode+Execute.DateConv(dtInterviewFinal.getSelectedItem().toString())+sCode+comma;       
           myStatement+= sCode+txtRemarksFinal.getText()+sCode+comma;
           if(bEdit &&   (!rsloadedInterView.isAfterLast())  ){
             myStatement += sCode+rsloadedInterView.getString("InsertedBy")+sCode +comma;
             myStatement += sCode+Execute.DateBaseToDataBase(rsloadedInterView.getDate("InsertedDate"))+sCode+comma;
           }else{
             myStatement += sCode+User+sCode+comma;        
             myStatement += sCode+getToday()+sCode+comma;
           }
            myStatement += sCode+User+sCode+comma;        
            myStatement += sCode+getToday()+sCode;
            myStatement+=")";
           System.out.println(myStatement);
           con.createStatement().executeUpdate(myStatement);         
        }
     
    private void addQualification() throws SQLException  {
       String myStatement = "insert into Emp_Qualification (EmpCode,iSrNo,vcQualification_Type,vcDeg_Dipl,board_University,dYear_passing,iMarks,Grade" +
                " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
       myStatement+="values (";
       
       String sCode="'",comma=",";
       for(int i =0;i<modelQualification.getRowCount();i++)       {
          // for(int j =0;j<tblQualification.getColumnCount();j++)  {
                String temp =myStatement;
                temp+= lblEmpCode.getText()+comma;
                temp+=  modelQualification.getValueAt(i, 0)+comma;
                temp+= sCode+ modelQualification.getValueAt(i, 1)+sCode+comma;
                temp+= sCode+ modelQualification.getValueAt(i, 2)+sCode+comma;
                temp+= sCode+ modelQualification.getValueAt(i, 3)+sCode+comma;                
                temp+= sCode+ Execute.DateConv( (String) modelQualification.getValueAt(i, 4))+sCode+comma;   
                temp+=  Execute.IntegerToString(modelQualification.getValueAt(i, 5))+comma;
                temp+= sCode+ modelQualification.getValueAt(i, 6)+sCode+comma;
          // }Sysyet
                if(bEdit && EmpQualifInsertedBy !=null ){        
                    //rsEmpRef.next();
                    //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    temp += sCode+EmpQualifInsertedBy+sCode+comma;
                    temp += sCode+EmpQualifInsertedDate+sCode+comma;
                }else{
                     temp += sCode+User+sCode+comma;
                     temp += sCode+ getToday()+sCode+comma;                     
                }
                temp += sCode+User+sCode+comma;    
               temp += sCode+ getToday()+sCode;                     
                temp += ")";
                
              System.out.println(temp);
              con.createStatement().executeUpdate(temp);  
              temp=null;
       }       
       myStatement=null;
    }
    private void addQualificationREQ() throws SQLException  {
           String myStatement = "insert into REQ_Emp_Qualification (REQSRNO, EmpCode,iSrNo,vcQualification_Type,vcDeg_Dipl,board_University,dYear_passing,iMarks,Grade" +
                    " ,InsertedBy,InsertedDate,UpdatedBy,UpdatedDate )";
           myStatement+="values ("+ ISRMaxNo+",";

           String sCode="'",comma=",";
           for(int i =0;i<modelQualification.getRowCount();i++)       {
              // for(int j =0;j<tblQualification.getColumnCount();j++)  {
                    String temp =myStatement;
                    temp+= lblEmpCode.getText()+comma;
                    temp+=  modelQualification.getValueAt(i, 0)+comma;
                    temp+= sCode+ modelQualification.getValueAt(i, 1)+sCode+comma;
                    temp+= sCode+ modelQualification.getValueAt(i, 2)+sCode+comma;
                    temp+= sCode+ modelQualification.getValueAt(i, 3)+sCode+comma;                
                    temp+= sCode+ Execute.DateConv( (String) modelQualification.getValueAt(i, 4))+sCode+comma;   
                    temp+=  Execute.IntegerToString(modelQualification.getValueAt(i, 5))+comma;
                    temp+= sCode+ modelQualification.getValueAt(i, 6)+sCode+comma;
              // }Sysyet
                    if(bEdit && EmpQualifInsertedBy !=null ){        
                        //rsEmpRef.next();
                        //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                        temp += sCode+EmpQualifInsertedBy+sCode+comma;
                        temp += sCode+EmpQualifInsertedDate+sCode+comma;
                    }else{
                         temp += sCode+User+sCode+comma;
                         temp += sCode+ getToday()+sCode+comma;                     
                    }
                    temp += sCode+User+sCode+comma;    
                   temp += sCode+ getToday()+sCode;                     
                    temp += ")";

                  System.out.println(temp);
                  con.createStatement().executeUpdate(temp);  
                  temp=null;
           }       
           myStatement=null;
    }
    
    private void delEmpComanyDet() throws SQLException {
        String myStatement = "delete from  Emp_CompDet where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        System.out.println("  " + myStatement);  
        int num =  con.prepareStatement(myStatement).executeUpdate();
        System.out.println("Rows Affected : " + num);
    }

    private void deleteAccountDet() throws SQLException {
       String myStatement = "delete from  Emp_AccntDet where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        myStatement += " delete from  Emp_BankDet where EmpCode=" + lblEmpCode.getText();
       System.out.println("  " + myStatement);  
       int num =  con.prepareStatement(myStatement).executeUpdate();
       System.out.println("Rows Affected : " + num);
    }

    private void deleteExperince()  throws SQLException  {
       String myStatement = "delete from  Emp_ExperinceDet where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
       System.out.println("  " + myStatement);  
       int num =  con.prepareStatement(myStatement).executeUpdate();
       System.out.println("Rows Affected : " + num);
    }

    private void deleteInterViewDetails() throws SQLException {
       String myStatement = "delete from  Emp_InterView where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
       System.out.println("  " + myStatement);  
       int num =  con.prepareStatement(myStatement).executeUpdate();
       System.out.println("Rows Affected : " + num);
    }
    
    private void deleteCompProvidingDetails() throws SQLException {
       String myStatement = "delete from  Emp_ComProviding where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
       System.out.println("  " + myStatement);  
       int num =  con.prepareStatement(myStatement).executeUpdate();
       System.out.println("Rows Affected : " + num);
    }

    private void deleteQualification() throws SQLException {
       String myStatement = "delete from  Emp_Qualification where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
       System.out.println("  " + myStatement);  
       int num =  con.prepareStatement(myStatement).executeUpdate();
       System.out.println("Rows Affected : " + num);
    }

    private void loadAcountDet() throws SQLException {
        
          Others.Execute.ClearTable(tblBankAccDet);
          if( mapBankDet != null)
              mapBankDet.clear();
          
          String Statement = "Select acc.*,msbnk.ShortName,msbnk.BankCode,SalaryAccNo";
                 Statement+= " From  Emp_BankDet bnk Full Join Emp_AccntDet acc ";
                 Statement+= " On bnk.EmpCode = acc.EmpCode ";
                 Statement+= " FULL Join ms_Bank msbnk ON msbnk.BankCode = bnk.BankCode ";
                 Statement+= " where bnk.EmpCode =" +lblEmpCode.getText()+" OR acc.EmpCode =" +lblEmpCode.getText();          
          ResultSet rsAccDet = Others.Execute.ExecuteMyQeury(con,Statement);            
          DefaultTableModel model=  (DefaultTableModel) tblBankAccDet.getModel();
          Vector  v = null;
          while(rsAccDet.next()){
              if( Execute.chkNullReturnBoolean(rsAccDet.getString("ShortName")))
                  continue;
              v = new Vector();
              v.add( rsAccDet.getString("ShortName"));
              v.add( rsAccDet.getString("SalaryAccNo"));
              mapBankDet.put(rsAccDet.getString("ShortName"),rsAccDet.getString("BankCode"));
              model.addRow(v);
          }
              rsAccDet.first();
              txtPFAccNo.setText(rsAccDet.getString("PFAcNo"));
              txtPPFAccNo.setText(rsAccDet.getString("PPFAcNo"));
              txtESICAccNo.setText(rsAccDet.getString("ESICAcNo"));
              txtFamilyAccNo.setText(rsAccDet.getString("FamilyAcNo"));
              rsAccDet.close();
              rsAccDet =null;
    }
    
    private void loadButtonImages(){
        
        try {
          //  Image image   = ImageIO.read(new File(loadedset.getString("FullImage")));
            String str= loadedset.getString("FullImage");
            System.out.println( "Fullimage"+Others.Execute.getEmplImages( str.substring( str.lastIndexOf("\\") +1 , str.length())));            
            Image image = ImageIO.read( Others.Execute.getEmplImages( str.substring( str.lastIndexOf("\\")+1  , str.length())) );
            image = image.getScaledInstance(btnImg.getWidth(), btnImg.getHeight(), Image.SCALE_FAST);
            btnImg.setIcon(new ImageIcon(image ));            
            txtPerpath.setText(loadedset.getString("FullImage"));
        }catch(Exception io){  //JOptionPane.showMessageDialog(this,"Photo Not Available");
            try {
                btnImg.setIcon(null);
            } catch (Exception exception) {
            }
        }
        
        try {
            /*Image image   = ImageIO.read(new File(loadedset.getString("ThumbImg")));
            image = image.getScaledInstance(lblThumb.getWidth(), lblThumb.getHeight(), Image.SCALE_FAST);
            lblThumb.setIcon(new ImageIcon(image));            
            txtThumb.setText(loadedset.getString("ThumbImg"));
             * */
            String str= loadedset.getString("ThumbImg");
            System.out.println( "ThumbImg..."+Others.Execute.getThumbImages(str.substring( str.lastIndexOf("\\") +1 , str.length())));            
            Image image = ImageIO.read( Others.Execute.getThumbImages( str.substring( str.lastIndexOf("\\")+1  , str.length())) );
            image = image.getScaledInstance(lblThumb.getWidth(), lblThumb.getHeight(), Image.SCALE_FAST);
            lblThumb.setIcon(new ImageIcon(image ));            
            txtThumb.setText(loadedset.getString("FullImage"));
            
        }catch(Exception io){  //JOptionPane.showMessageDialog(this,"Photo Not Available");
            try {
                lblThumb.setIcon(null);
            } catch (Exception exception) {
            }
        }
        
        try {
            Image image   = ImageIO.read(new File(loadedset.getString("Signimg")));
            image = image.getScaledInstance(lblSign.getWidth(), lblSign.getHeight(), Image.SCALE_FAST);
            lblSign.setIcon(new ImageIcon(image));            
            txtSign.setText(loadedset.getString("Signimg"));
        }catch(Exception io){  //JOptionPane.showMessageDialog(this,"Photo Not Available");
            try {
                lblSign.setIcon(new ImageIcon(""));
            } catch (Exception exception) {
            }
        }     
    }
        
    private float [] CalcFBT() {
       for (int i = 0; i < modelSalOthers.getRowCount(); i++) {
           if( mapSalOthers.get(modelSalOthers.getValueAt(i, 1)) == 16 ){
               float FBT[] = new float[2];
               float Express  =  Float.parseFloat(String.valueOf(modelSalOthers.getValueAt(i, 2)));
               
               FBT[0]=Express;
               Express = Express * Float.parseFloat(String.valueOf( modelSalOthers.getValueAt(i, 3) )) /100;
               Express = Express * 33.99f /100;
               System.out.println("FBT " + Express);              
               FBT[1]= Express;
               return FBT;
           }               
       }
       return null;
    }
    
    public boolean CheckNULLORRepeated(javax.swing.JTable tmptable ,javax.swing.JTabbedPane tmpTab,int tabIndex ){
        
        ArrayList<String> tmplist = new ArrayList<String>();
        DefaultTableModel testmodel = (DefaultTableModel) tmptable.getModel();
        
        for (int i = 0; i < testmodel.getRowCount(); i++) {
            String value = testmodel.getValueAt(i, 1).toString();          
                     
            if (value.equalsIgnoreCase("") || value == null) {
                JOptionPane.showMessageDialog(this, "Please Select Type");
                tmpTab.setSelectedIndex(tabIndex);
                tmptable.editCellAt(i,1);
                return false;
            }
            if (testmodel.getValueAt(i, 2) == null || testmodel.getValueAt(i, 2).equals("") || testmodel.getValueAt(i, 2).equals(null)) {
                JOptionPane.showMessageDialog(this, "Please Enter Value");
                tmpTab.setSelectedIndex(tabIndex);
                tmptable.editCellAt(i, 2);
                return false;
            }           
            
            try{
                Float testValue = (Float)testmodel.getValueAt(i, 3);
                if(testValue == null ||  testValue.equals(null)){
                    JOptionPane.showMessageDialog(this, "Please Enter Value");
                    tmpTab.setSelectedIndex(tabIndex);
                    tmptable.editCellAt(i, 3);
                    return false;
                }
            }catch(ArrayIndexOutOfBoundsException arr){
                //arr.printStackTrace();
            }
                        
            if (tmplist.contains(value)) {
                tmplist.clear();
                JOptionPane.showMessageDialog(this, value + "Type is Repeated");
                return false;
            } else {
                tmplist.add(value);
            }
        }
        tmplist.clear();
        tmplist = null;                 
        return true;
    }
 
    private void addDeductions(int maxNo) throws SQLException {              
       
        String  comma =",";       
        boolean dataAdded =false;
         for(int i=0;i< modelDedSal.getRowCount();i++){
            String str =""; 
            str = "insert into Ms_EmpDeduction (Ded_Code,EmpCode,Amount,ISrNo) values( ";
            str += mapDedDisc.get(tblSalDeduction.getValueAt(i, 1)) + comma;
            str += lblEmpCode.getText() + comma;
            str += tblSalDeduction.getValueAt(i, 2) + comma + maxNo +")";
            Execute.UpdateMyQeury(con, str);
            dataAdded=true;
      /*02-05-2023 start*/      System.out.println("PT_Amount if dataadded" + tblSalDeduction.getValueAt(i, 2) + comma + maxNo +")");
            System.out.println("PT_Query" + str);  /*02-05-2023 end*/
         }
         if(!dataAdded){
            String str = "insert into Ms_EmpDeduction (Ded_Code,EmpCode,Amount,ISrNo) values( ";
            str += "-1,"+lblEmpCode.getText()+comma+0+comma+maxNo+")";
            Execute.UpdateMyQeury(con, str);
        }


    }

    private void addEarnings(int maxNo) throws SQLException {       
        
        String  comma =",";
//        int maxNo =0;
//        try {
//            String str =  "Select max(ISrNo) as SrNo from Ms_EmpEarnings where EmpCode= "+lblEmpCode.getText()  ;
//            ResultSet set = Execute.ExecuteMyQeury(con, str);
//            set.next();
//            maxNo = set.getInt("SrNO");
//        } catch (SQLException s) {
//            s.printStackTrace();
//        }
//        maxNo++;       
        boolean dataAdded =false;
        for(int i=0;i< modelSal.getRowCount();i++){
            String str= "insert into Ms_EmpEarnings (Ern_Code,EmpCode,Amount,ISrNo,SalEffectDate) values( ";
            str += mapEarDisc.get(tblSalEarnings.getValueAt(i, 1)) + comma;
            str += lblEmpCode.getText() + comma;
            str += tblSalEarnings.getValueAt(i, 2) + comma + (maxNo)+ comma;
            str += "'"+Execute.DateConv((String)dtEffectDate.getSelectedItem())+"')";
            Execute.UpdateMyQeury(con, str);
        }

        if(!dataAdded){
            String str = "insert into Ms_EmpEarnings (Ern_Code,EmpCode,Amount,ISrNo) values( ";
            str += "-1,"+lblEmpCode.getText()+comma+0+comma+maxNo+")";
            Execute.UpdateMyQeury(con, str);
        }

    }

    private void addEmpContribution(int maxNo) throws SQLException {       
        
        String  comma =",";
        boolean dataAdded=false;
        for(int i=0;i< modelSalDedEmpCon.getRowCount();i++){
            String str = "insert into Ms_EmpContribution (Con_Code,EmpCode,Amount,ISrNO) values( ";
            str += mapEmpConDisc.get(tblSalDedEmpCon.getValueAt(i, 1)) + comma;
            str += lblEmpCode.getText() + comma;
            str += tblSalDedEmpCon.getValueAt(i, 2) + comma + maxNo + ")";
            Execute.UpdateMyQeury(con, str);
            dataAdded = true;
        }        
        if(!dataAdded){
            String str = "insert into Ms_EmpContribution (Con_Code,EmpCode,Amount,ISrNo) values( ";
            str += "-1,"+lblEmpCode.getText()+comma+0+comma+maxNo+")";
            Execute.UpdateMyQeury(con, str);
        }
        
    }

    private void addOthers(int maxNo) throws SQLException {
        String  comma =","; boolean dataAdded=false;
         for(int i=0;i< modelSalOthers.getRowCount();i++){
            String str = "insert into MS_EmpSalOthers (Othe_Code,EmpCode,Amount,ISrNO,Percentage) values( ";
            str += mapSalOthers.get(tblSalOthers.getValueAt(i, 1)) + comma;
            str += lblEmpCode.getText() + comma;
            str += tblSalOthers.getValueAt(i, 2) + comma + maxNo ;
            str +=  comma + tblSalOthers.getValueAt(i, 3)     + ")";                   
            System.out.println(str);                    
            Execute.UpdateMyQeury(con, str);
         }
         if(!dataAdded){
            String str = "insert into MS_EmpSalOthers (Othe_Code,EmpCode,Amount,ISrNo) values( ";
            str += "-1,"+lblEmpCode.getText()+comma+0+comma+maxNo+")";
            Execute.UpdateMyQeury(con, str);
        }
    }

    private void addSalary() throws SQLException{        
        int maxNo =0;
        try {
            String str =  "Select max(ISrNo) as SrNo from Ms_EmpEarnings where EmpCode= "+lblEmpCode.getText()  ;
            ResultSet set = Execute.ExecuteMyQeury(con, str);
            set.next();
            maxNo = set.getInt("SrNO");
        } catch (Exception s) {
            s.printStackTrace();
        }
        maxNo++;
        addEarnings(maxNo );
        addDeductions(maxNo);
        addEmpContribution(maxNo);
        addOthers(maxNo);
    }
   
    private void adjtable() {

        modelSal = (DefaultTableModel) tblSalEarnings.getModel();
        modelDedSal = (DefaultTableModel) tblSalDeduction.getModel();
        modelSalDedEmpCon = (DefaultTableModel) tblSalDedEmpCon.getModel();
        modelSalOthers = (DefaultTableModel) tblSalOthers.getModel();
        modelExpernc = (DefaultTableModel) tblExperinceDetails.getModel();
        modelQualification = (DefaultTableModel) tblQualification.getModel();
        TableColumnModel modelSal1 = tblSalEarnings.getColumnModel();
        TableColumn salSt = modelSal1.getColumn(0);
        salSt.setPreferredWidth(15);
        salSt = modelSal1.getColumn(1);
        salSt.setPreferredWidth(150);
        salSt = modelSal1.getColumn(2);
        salSt.setPreferredWidth(100);
       // tblSalEarnings.setRowHeight(tblSalEarnings.getRowHeight() + 4);
       // tblSalDeduction.setRowHeight(tblSalDeduction.getRowHeight() + 4);
       // tblSalDedEmpCon.setRowHeight(tblSalDedEmpCon.getRowHeight() + 4);
       // tblExperinceDetails.setRowHeight(tblExperinceDetails.getRowHeight() + 4);
        //AdvDate.AdvDate box =new AdvDate.AdvDate() ;
        // box.setEditable(true);
        //box.setDateFormat(new SimpleDateFormat("YY/MM/DD"));
        //modelExpernc.
        
        
        tblExperinceDetails.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(
                
                new AdvDate.AdvDate(){                    
                    public void hidePopup(){                        
                        super.hidePopup(); 
                        try{
                            tblExperinceDetails.setValueAt(this.getSelectedItem(),tblExperinceDetails.getSelectedRow(),2);                                                            
                        }catch(Exception e){}
                        
                    }
                }                 
         ));           
           
             tblExperinceDetails.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(   
                     
                    new AdvDate.AdvDate(){
                    public void hidePopup(){
                        super.hidePopup();
                          try{
                             tblExperinceDetails.setValueAt(getSelectedItem(),tblExperinceDetails.getSelectedRow(),3);                  
                         }catch(Exception e){}
                    }
                    }                 
           ));
           tblExperinceDetails.revalidate();
                 
            tblQualification.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
                
                new AdvDate.AdvDate(){                    
                     @Override
                    public void hidePopup(){                        
                        super.hidePopup(); 
                        try{
                            tblQualification.setValueAt(this.getSelectedItem(),tblQualification.getSelectedRow(),4);                                                            
                        }catch(Exception e){}
                        
                    }
                }                 
         ));   
         
         
//        cboBankName.addItemListener(new ItemListener() {
//
//            public void itemStateChanged(ItemEvent e) {
//                try{
//                    mapBankDet. put(cboBankName.getSelectedItem()+"",Integer.parseInt(cboBankName.getvalueAt(0)+""));
//                }catch(Exception ex){ ex.printStackTrace();}
//            }
//        });
               
         
        tblBankAccDet.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(   new Searchs.SearchComman( "Ms_bank",1,new String[]{"BankCode","ShortName","BankName","Branch"}," And Company ="+AfterLoginMainForm.compcode ){
            
                 @Override
                 public void hidePopup(){                        
                        super.hidePopup(); 
                        SwingUtilities.invokeLater(new Runnable(){
                            public void run() {
                              try{
                                    //System.out.println( " tblBankAccDet.getSelectedRow() ="+tblBankAccDet.getSelectedRow());
                                    tblBankAccDet.setValueAt(getSelectedItem(),tblBankAccDet.getSelectedRow(),0);         
                                    mapBankDet.put(getSelectedItem()+"",getvalueAt(0)+"");
                               }catch(Exception e){ e.printStackTrace();}                
                            }                        
                        });                                
                    }

                    @Override
                    protected void loadAfterInit() {
                        setModel(new String[]{"BankCode","ShortName","BankName","Branch"},new Class[]{String.class,String.class,String.class,String.class});
                        hideColmn(0);
                    }      
            
        }));           

   }

    public void settxtDisabled() {
      /*  txtTA.setEnabled(false);
        txtWA.setEnabled(false);
        txtEA.setEnabled(false);
        txtCCA.setEnabled(false);
        txtSplAllow.setEnabled(false);
        txtOthers.setEnabled(false);
        txtGratuity.setEnabled(false);
        txtFBT.setEnabled(false);
        txtInsurance.setEnabled(false);
        txtPF.setEnabled(false);
        txtESIC.setEnabled(false);
        txtDedEL.setEnabled(false);
        txtDedPF.setEnabled(false);
        txtDedESIC.setEnabled(false);*/
    }

    public void loadSalType() {
        
        TableColumn columnSal = tblSalEarnings.getColumnModel().getColumn(1);
        JComboBox cboSalType = new design.MHLComboBox();
        try {
            String Str = "Select * From Ms_Ern_Ded  where Er_Type = 'Earnings' order By Er_Ded_Code";
            //arrListCodeSalStru = new java.util.ArrayList<String>();  
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            while (rsData.next()) {
                cboSalType.addItem(rsData.getString("Er_Discription"));
                //arrListCodeSalStru.add(rsData.getString("Er_Ded_Code"));
                mapEarDisc.put(rsData.getString("Er_Discription"), new Integer(rsData.getInt("Er_Ded_Code")));
               // System.out.println(" SalType :  " + rsData.getString("Er_Type"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...");
            ex.printStackTrace();
        }
        columnSal.setCellEditor(new DefaultCellEditor(cboSalType));
       
       
        columnSal = tblSalDeduction.getColumnModel().getColumn(1);
        cboSalType = new design.MHLComboBox();
        try {
            String Str = "Select * From Ms_Ern_Ded  where Er_Type = 'Deductions' order By Er_Ded_Code";
            //arrListCodeSalStru = new java.util.ArrayList<String>();  
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            while (rsData.next()) {
                cboSalType.addItem(rsData.getString("Er_Discription"));
                //arrListCodeSalStru.add(rsData.getString("Er_Ded_Code"));                
                mapDedDisc.put(rsData.getString("Er_Discription"), new Integer(rsData.getInt("Er_Ded_Code")));
                //System.out.println(" SalType :  " + rsData.getString("Er_Type"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...");
            ex.printStackTrace();
        }
        columnSal.setCellEditor(new DefaultCellEditor(cboSalType));

        
        columnSal = tblSalDedEmpCon.getColumnModel().getColumn(1);
        cboSalType = new design.MHLComboBox();
        try {
            String Str = "Select * From Ms_Ern_Ded where Er_Type= 'Empl Contr' order By Er_Ded_Code";
            //arrListCodeSalStru = new java.util.ArrayList<String>();  
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            while (rsData.next()) {
                cboSalType.addItem(rsData.getString("Er_Discription"));
                //arrListCodeSalStru.add(rsData.getString("Er_Ded_Code"));
                mapEmpConDisc.put(rsData.getString("Er_Discription"), new Integer(rsData.getInt("Er_Ded_Code")));
                //System.out.println(" SalType :  " + rsData.getString("Er_Type") + rsData.getString("Er_Discription"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...");
            ex.printStackTrace();
        }
        columnSal.setCellEditor(new DefaultCellEditor(cboSalType));
        
        columnSal = tblSalOthers.getColumnModel().getColumn(1);
        cboSalType = new design.MHLComboBox();
        try {
            String Str = "Select * From Ms_Ern_Ded where Er_Type= 'Others' order By Er_Ded_Code";
            //arrListCodeSalStru = new java.util.ArrayList<String>();  
            ResultSet rsData = con.createStatement().executeQuery(Str);
            while (rsData.next()) {
                cboSalType.addItem(rsData.getString("Er_Discription"));
                //arrListCodeSalStru.add(rsData.getString("Er_Ded_Code"));
                mapSalOthers.put(rsData.getString("Er_Discription"), new Integer(rsData.getInt("Er_Ded_Code")));
                //System.out.println(" SalType :  " + rsData.getString("Er_Type") + rsData.getString("Er_Discription"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Sal Types...");
            ex.printStackTrace();
        }
        columnSal.setCellEditor(new DefaultCellEditor(cboSalType));
                
    }
    
    public void loadShiftCode(){
       try{ 
        String myStatement = "select * from ms_shift order by shiftcode";
        ResultSet shiftResultSet =  Execute.ExecuteMyQeury(con, myStatement);
        while(shiftResultSet.next()){
            cboShift.addItem(""+shiftResultSet.getTime("StartTime1").toString() + " To "+ shiftResultSet.getTime("EndTime2").toString());
        }           
         shiftResultSet =null;
       }catch(Exception e){
            e.printStackTrace();
       }
    }
    
    public void loadlanguagecombo() {
        TableColumnModel columnModelLang = tblLanguage.getColumnModel();
        TableColumn columnLang = columnModelLang.getColumn(1);
        JComboBox cboLang = new JComboBox();
        try {
            String Str = "Select * From Ms_Language order By Code";
            arrListCodeLang = new java.util.ArrayList<String>();
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            while (rsData.next()) {
                cboLang.addItem(rsData.getString(2));
                arrListCodeLang.add(rsData.getString("Code"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...");
            ex.printStackTrace();
        }
        columnLang.setCellEditor(new DefaultCellEditor(cboLang));
    }

    public void loadstate() {
        try {
            String Str = "Select Code, Name From MS_State Order By Name";
            //System.out.println("StrSql :=" + Str);
             mapStateM = new HashMap<Integer,String>();
             mapStateP = new HashMap<Integer,String>();
            arrlistCodeStateM = new java.util.ArrayList<Integer>();
            arrlistCodeStateP = new java.util.ArrayList<Integer>();
            arrlistCodeStateP.add(null);
             arrlistCodeStateM.add(null);
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            while (rsData.next()) {
                this.cboStateM.addItem(rsData.getString("Name"));
                arrlistCodeStateM.add(rsData.getInt("Code"));
                mapStateM.put(new Integer(rsData.getInt("Code")),rsData.getString("Name")) ;
                this.cboStateP.addItem(rsData.getString("Name"));
                arrlistCodeStateP.add(rsData.getInt("Code"));
                 mapStateP.put(new Integer(rsData.getInt("Code")),rsData.getString("Name"));                
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding States...!");
            ex.printStackTrace();
        }
        
    }

    public void loadCompany() {
        try {
            String Str = "Select CompanyCode, CompanyName From Ms_Company Order By CompanyCode";
            arrListCodeComp = new java.util.ArrayList<String>();
            //System.out.println("StrSql :=" + Str);
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            //System.out.println("Passed Rs ");
            while (rsData.next()) {
                this.cboCompany.addItem(rsData.getString("CompanyName"));
                arrListCodeComp.add((rsData.getString("CompanyCode")));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Company...!");
            ex.printStackTrace();
        }
    }

    public void loadDept() {
        try {
            String Str = "Select Code, DeptName From Ms_Department where Company="+AfterLoginMainForm.compcode+"  Order By DeptName";
            arrListCodeDept = new java.util.ArrayList<String>();
            //System.out.println("StrSql :=" + Str);
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            //System.out.println("Passed Rs ");
           // arrListCodeDept.add("");
            while (rsData.next()) {
                this.cboDept.addItem(rsData.getString("DeptName")+" - " + rsData.getString("Code"));
                arrListCodeDept.add(rsData.getString("Code"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...!");
            ex.printStackTrace();
        }
    }

    public void loadDesig() {
        try {
            String Str = "Select Code, DesigName From Ms_Designation where Company="+AfterLoginMainForm.compcode+" Order By DesigName";
            arrListDesig = new java.util.ArrayList<String>();
          //  mapDeisg = new HashMap<String, Integer>(); 
            //System.out.println("StrSql :=" + Str);
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            //System.out.println("Passed Rs ");
            cboDesignation.removeItem("");
            int i =0;
            while (rsData.next()) {
                this.cboDesignation.addItem(rsData.getString("DesigName"));
                arrListDesig.add(rsData.getString("Code"));
            //    mapDeisg.put(rsData.getString("Code"), i);
                i++;
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Stages...!");
            ex.printStackTrace();
        }
    }

    public void loadcateg() {
        try {
            String Str = "Select Code, CategoryName From Ms_Category where Company="+AfterLoginMainForm.compcode+"  Order By Code";
            arrListCateg = new java.util.ArrayList<String>();
            //System.out.println("StrSql :=" + Str);
            Statement st = con.createStatement();
            ResultSet rsData = st.executeQuery(Str);
            //System.out.println("Passed Rs ");
            cboDesignation.removeItem("");
            while (rsData.next()) {
                this.cboCategory.addItem(rsData.getString("CategoryName"));
                arrListCateg.add(rsData.getString("Code"));
            }
        } catch (Exception ex) {
            System.out.println("Error in Loding Category...!");
            ex.printStackTrace();
        }
    }

    public void clearText() {
        
        lblEmpCode.setText("");
        //lblPPPhoto.setText("");
        lblThumb.setText("");
        lblSign.setText("");

        txtFName.setText("");
        txtSName.setText("");
        txtLName.setText("");
        txtAddressM.setText("");
        txtCityM.setText("");
        txtPinM.setText("");
        txtStdM.setText("");
        txtPhoneM.setText("");
        txtMobileM.setText("");
        txtEmailM.setText("");
        txtFHGName.setText("");
        txtRelation.setText("");
        txtBirthPlace.setText("");
        txtChildren.setText("");
        txtPunch.setText("");
        txtPerpath.setText("");
       /* txtBasic.setText("");
        txtHRA.setText("");
        txtTA.setText("");
        txtWA.setText("");
        txtEA.setText("");
        txtCCA.setText("");
        txtOthers.setText("");
        txtGratuity.setText("");
        txtFBT.setText("");
        txtInsurance.setText("");
        txtPF.setText("");
        txtESIC.setText("");
        txtDedEL.setText("");
        txtDedPF.setText("");
        txtDedEL.setText("");
        txtDedPT.setText("");
        txtDedIT.setText("");
        txtNetSal.setText("");
        txtGrossSal.setText("");
        txtGenSal.setText("");
        */
        txtPFAccNo.setText("");
        txtPPFAccNo.setText("");
        txtESICAccNo.setText("");
        txtFamilyAccNo.setText("");
//        txtSalaryAccNo.setText("");

        txtAddressP.setText("");
        txtCityP.setText("");
        txtStdP.setText("");
        txtStdP.setText("");
        txtPhoneP.setText("");
        txtMobileP.setText("");
        txtWeight.setText("");
        txtHeight.setText("");
        txtIdmark.setText("");
        txtPan.setText("");
        txtPassport.setText("");
        txtDrivingLicNo.setText("");
        txtDocDetails.setText("");
        txt2WheelarNo.setText("");
        txt4WheelarNo.setText("");
        txtRemarksPre.setText("");
        txtRemarksFinal.setText("");

        dtDOB.setSelectedItem("");
        dtMarriageDate.setSelectedItem("");
        dtConfirmDate.setSelectedItem("");
        dtDoj.setSelectedItem("");
        dtCoj.setSelectedItem("");
        dtExDoj.setSelectedItem("");
        dtExLeaveDate.setSelectedItem("");
        dtProbFrom.setSelectedItem("");
        dtProbToDate.setSelectedItem("");
        dtContFrom.setSelectedItem("");
        dtContToDate.setSelectedItem("");
        dtEffectDate.setSelectedItem("");
        dtInterviewPre.setSelectedItem("");
        dtInterviewFinal.setSelectedItem("");

        cboReligion.setSelectedItem("");
        cboNationality.setSelectedItem("");
        cboSex.setSelectedItem("");
        cboBgrp.setSelectedItem("");
        cboCompany.setSelectedItem("");
        cboDept.setSelectedItem("");
        cboDesignation.setSelectedItem("");
        cboCategory.setSelectedItem("");
        cboReporting.setSelectedItem("");
        cboShift.setSelectedItem("");
        //cboBankName.setSelectedItem("");
        cboStateP.setSelectedItem("");
        cboEyeColor.setSelectedItem("");
        cboInterviewFinal.setSelectedItem("");
        cboStateM.setSelectedItem("");
        cboStateP.setSelectedItem("");
        cboHouse.setSelectedItem("");
        cboWeekOff.setSelectedItem((Object)"");
        
        //dtEffectDate.setSelectedItem((Object)"");
        

// Chk Box
        chkMarriege.setSelected(false);
        chkDeptHead.setSelected(false);
        chkExEmp.setSelected(false);
        chkTrainee.setSelected(false);
        chkProbation.setSelected(false);
        chkContract.setSelected(false);
        /*
        chkTA.setSelected(false);
        chkWA.setSelected(false);
        chkEA.setSelected(false);
        chkCCA.setSelected(false);
        chkSplAllow.setSelected(false);
        chkOthers.setSelected(false);
        chkGratuity.setSelected(false);
        chkFBT.setSelected(false);
        chkInsurance.setSelected(false);
        chkPF.setSelected(false);
        chkESIC.setSelected(false);
        */
        //chkGross.setSelected(false);
        //chkTakeHome.setSelected(false);
        chk2Wheelar.setSelected(false);
        chk4Wheelar.setSelected(false);
        chkAccomodation.setSelected(false);
        chkFood.setSelected(false);
        chkPhonComp.setSelected(false);
        chkMobile.setSelected(false);
        chkMobileBill.setSelected(false);
        chkInternet.setSelected(false);
        chkSimCard.setSelected(false);
        chk2WheelComp.setSelected(false);
        chk4WheelComp.setSelected(false);
        chkFuel.setSelected(false);

        try {
                btnImg.setIcon(null);
        } catch (Exception exception) {            }
        try {
                lblSign.setIcon(null);
            } catch (Exception exception) {}
        try {
                lblThumb.setIcon(null);
        } catch (Exception exception) {        }
        
        //Clearing Interview Details
        txtInterviewPre.setText("");
        dtInterviewPre.setSelectedItem("");
        dtInterviewFinal.setSelectedItem("");
        txtRemarksFinal.setText("");
        txtRemarksPre.setText("");
        txtThumb.setText("");
        txtSign.setText("");
        //this.
    }

    public void loadEmpDet(String LoadEmpCode,boolean loadAllData ) {
        
        if ( LoadEmpCode != null && !loadAllData  ) {

                try {
                    String myStatement = "Select cont.* from REQ_Emp_ContactFull cont " +
                            " JOin Emp_CompDet det " +
                            " on Det.EmpCode= cont.EmpCode" +
                            " where Det.EmpCode=" + LoadEmpCode +
                            " and  cont.ISRNO ="+ frmSrno +
                            " order by Det.EmpCode";
                                
                    System.out.println(myStatement);
                    
                    PreparedStatement state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    loadedset = state.executeQuery();
                    loadedset.last();
                    // while( set.last()){
                    myStatement = "Select det.* from REQ_Emp_ContactFull cont " +
                            " JOin Emp_CompDet det " +
                            " on Det.EmpCode= cont.EmpCode" +
                            " where Det.EmpCode=" + LoadEmpCode +
                            " and  cont.ISRNO ="+ frmSrno +
                            " order by Det.EmpCode";
                    System.out.println(myStatement);
                    
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedCompany =state.executeQuery();
                    rsloadedCompany.last();
                    myStatement = "Select intrview.* from REQ_Emp_InterView intrview Join Emp_CompDet det" +
                            " on Det.EmpCode= intrview.EmpCode " +
                            " where intrview.EmpCode=" + LoadEmpCode +
                            " and  intrview.ISRNO ="+ frmSrno +
                            " order by Det.EmpCode";
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedInterView =state.executeQuery();
                    rsloadedInterView.last();
                    
                    myStatement = "Select provd.* from REQ_Emp_ComProviding provd  JOin Emp_CompDet det" +
                            " on Det.EmpCode= provd.EmpCode " +
                            " where provd.EmpCode=" + LoadEmpCode +
                            " and  provd.ISRNO ="+ frmSrno +
                            " order by Det.EmpCode";
                    System.out.println(myStatement);
                    
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedCopmProv =state.executeQuery();
                    rsloadedCopmProv.last();
                    //btnPrevActionPerformed(null);
                    //btnNextActionPerformed(null);
                    fillData();
                //   }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            
                return;  
        
        }
        
        
        if( "User".equalsIgnoreCase(AfterLoginMainForm.userType )  ){
                                          
            
                try {
                    String myStatement = "Select cont.* from Emp_ContactFull cont " +
                            " JOin Emp_CompDet det " +
                            " on Det.EmpCode= cont.EmpCode" +
                            " where Det.EmpCode=" + AfterLoginMainForm.user +
                            " order by Det.EmpCode";                                
                    System.out.println(myStatement);
                    
                    PreparedStatement state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    loadedset = state.executeQuery();
                    loadedset.last();
                    // while( set.last()){
                    myStatement = "Select det.*,reporting.EmpF_Name+' '+reporting.EmpS_Name+' '+reporting.EmpL_Name reportingEmpName  from Emp_ContactFull cont " +
                            " JOin Emp_CompDet det " +
                            " on Det.EmpCode= cont.EmpCode" +
                            " Left JOIN Emp_ContactFull reporting on reporting.EmpCode =  det.Reporting "+
                            " where Det.EmpCode=" + AfterLoginMainForm.user +
                            " order by Det.EmpCode";
                    System.out.println(myStatement);
                    
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedCompany =state.executeQuery();
                    rsloadedCompany.last();
                    myStatement = "Select intrview.* from Emp_InterView intrview Join Emp_CompDet det" +
                            " on Det.EmpCode= intrview.EmpCode " +
                            " where Det.EmpCode=" + AfterLoginMainForm.user +
                            " order by Det.EmpCode";
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedInterView =state.executeQuery();
                    rsloadedInterView.last();
                    
                    myStatement = "Select provd.* from Emp_ComProviding provd  JOin Emp_CompDet det" +
                            " on Det.EmpCode= provd.EmpCode " +
                            " where Det.EmpCode=" + AfterLoginMainForm.user +
                            " order by Det.EmpCode";
                    System.out.println(myStatement);
                    
                    state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rsloadedCopmProv =state.executeQuery();
                    rsloadedCopmProv.last();
                    //btnPrevActionPerformed(null);
                    //btnNextActionPerformed(null);
                    fillData();
                //   }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }            
                return;        
        }
        
        try {
            String myStatement = "Select cont.* from Emp_ContactFull cont " +
                    " JOin Emp_CompDet det " +
                    " on Det.EmpCode= cont.EmpCode" +
                    " where Company=" + AfterLoginMainForm.compcode +
                    " order by Det.EmpCode";
            System.out.println(myStatement);
            PreparedStatement state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            loadedset = state.executeQuery();
                       
            myStatement = "Select det.*,reporting.EmpF_Name+' '+reporting.EmpS_Name+' '+reporting.EmpL_Name reportingEmpName "+
                    " from Emp_ContactFull cont " +
                    " JOin Emp_CompDet det " +
                    " on Det.EmpCode= cont.EmpCode" +
                    " Left JOIN Emp_ContactFull reporting on reporting.EmpCode =  det.Reporting "+
                    " where Company=" + AfterLoginMainForm.compcode +
                    " order by Det.EmpCode";
            System.out.println(myStatement);
            state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rsloadedCompany =state.executeQuery();
            
            myStatement = "Select intrview.* from Emp_InterView intrview Join Emp_CompDet det" +
                    " on Det.EmpCode= intrview.EmpCode " +
                    " where Company=" + AfterLoginMainForm.compcode +
                    " order by Det.EmpCode";
            state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rsloadedInterView =state.executeQuery();

            myStatement = "Select provd.* from Emp_ComProviding provd  JOin Emp_CompDet det" +
                    " on Det.EmpCode= provd.EmpCode " +
                    " where Company=" + AfterLoginMainForm.compcode +
                    " order by Det.EmpCode";
            state = con.prepareStatement(myStatement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rsloadedCopmProv =state.executeQuery();
            if( LoadEmpCode != null ){
                search_fill_EmpData(LoadEmpCode);
            }else{
                loadedset        .last();
                rsloadedCompany  .last();
                rsloadedInterView.last();
                rsloadedCopmProv .last();
                fillData();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public  String getToday(){    
             int date = Calendar.getInstance().get(Calendar.DATE);
             int month = Calendar.getInstance().get(Calendar.MONTH)+1; 
             int year = Calendar.getInstance().get(Calendar.YEAR); 
             String mydate =""+date;
             String mymonth =""+month;
             
             if(date<=9)
                mydate = "0"+date;
             if(month<=9)
                mymonth = "0"+month;
             String toDay = year +"/"+mymonth+"/"+mydate ;
             return toDay;        
    }
    
    public void DateConv() {

        String date = dtDOB.getSelectedItem().toString();
        String effDate = dtEffectDate.getSelectedItem().toString();

       if(!date.equals("") ){
            Bdate =  Others.Execute.DateConv(date) ;  //  date.substring(6, date.length()) + "/" + date.substring(3, 5) + "/" + date.substring(0, 2);
        }
       if(!effDate.equals("")){
            asigEffDate = effDate.substring(6, effDate.length()) + "/" + effDate.substring(3, 5) + "/" + effDate.substring(0, 2);
            //asigEffDate = effDate.substring(6, effDate.length()) + "/" + effDate.substring(3, 5) + "/" + effDate.substring(0, 2);            
        }

        if (chkMarriege.isSelected()) {
            String dateMrg = dtMarriageDate.getSelectedItem().toString();
            Marriagedt = dateMrg.substring(6, dateMrg.length()) + "/" + dateMrg.substring(3, 5) + "/" + dateMrg.substring(0, 2);
           // System.out.println(Marriagedt);
        } else {
            Marriagedt = "";
        }
    }       
    
    public boolean validate4() {
        //boolean valid = false;
        if (txtAddressP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent Address can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtAddressP.requestFocus();
            return false;
        } else if (txtCityP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent City can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtCityP.requestFocus();
            return false;
        } else if (cboStateP.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent State can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            cboStateP.requestFocus();
            return false;
        } else if (txtStdP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent Pin can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtStdP.requestFocus();
            return false;
        } else if (txtStdP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent Std Code can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtStdP.requestFocus();
            return false;
        } else if (txtPhoneP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent Phone No. can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtPhoneP.requestFocus();
            return false;
        } else if (txtMobileP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Permanent Phone No. can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtMobileP.requestFocus();
            return false;
        } else if (txtIdmark.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Identification Mark can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtIdmark.requestFocus();
            return false;
        } else if (txtInterviewPre.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Preliminary Interviewd can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txtInterviewPre.requestFocus();
            return false;
        } else if (dtInterviewPre.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Preliminary Interviewd Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            dtInterviewPre.requestFocus();
            return false;
        } else if (cboInterviewFinal.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Final Interviewd By can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            cboInterviewFinal.requestFocus();
            return false;
        } else if (dtInterviewFinal.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Final Interviewd Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            dtInterviewFinal.requestFocus();
            return false;
        } else if (chk2Wheelar.isSelected() && txt2WheelarNo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "2 Wheelar No can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txt2WheelarNo.requestFocus();
            return false;
        } else if (chk4Wheelar.isSelected() && txt4WheelarNo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "4 Wheelar No can not be blank...!.");
            tbdEmpDet.setSelectedIndex(4);
            txt4WheelarNo.requestFocus();
            return false;
        }
        return true;
    }

    public boolean Validate0() {

        // tabbed Personal Details
        if (txtAddressM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing Address can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtAddressM.requestFocus();
            return false;
        } else if (txtCityM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing City can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtCityM.requestFocus();
            return false;
        } else if (cboStateM.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing State can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboStateM.requestFocus();
            return false;
        } else if (txtPinM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing Pin can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtPinM.requestFocus();
            return false;
        } else if (txtStdM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing Std Code can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtStdM.requestFocus();
            return false;
        } else if (txtPhoneM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing Phone No. can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtPhoneM.requestFocus();
            return false;
        } else if (txtMobileM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Mailing Phone No. can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtMobileM.requestFocus();
            return false;
        } else if (txtFHGName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "F / H / G  Name can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtFHGName.requestFocus();
            return false;
        } else if (txtRelation.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Relation can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtRelation.requestFocus();
            return false;
        } else if (cboReligion.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Religion can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboReligion.requestFocus();
            return false;
        } else if (cboNationality.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Nationality can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboNationality.requestFocus();
            return false;
        } else if (cboSex.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Sex can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboSex.requestFocus();
            return false;
        } else if (txtBirthPlace.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Birth Place can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtBirthPlace.requestFocus();
            return false;
        } else if (cboBgrp.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Blood group can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboBgrp.requestFocus();
            return false;

        } else if (chkMarriege.isSelected() && dtMarriageDate.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Marriage Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtMarriageDate.requestFocus();
            return false;

        } else if (cboCompany.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Comapany can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboCompany.requestFocus();
            return false;
        } else if (cboDept.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Department can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboDept.requestFocus();
            return false;
        } else if (cboDesignation.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Designation can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboDesignation.requestFocus();
            return false;
        } else if (cboCategory.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Category can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboCategory.requestFocus();
            return false;
        } else if (cboReporting.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Reporting can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboReporting.requestFocus();
            return false;
            
         } else if (cboShift.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Shift can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            cboShift.requestFocus();
            return false;        
        } else if (txtPunch.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Punch Code can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            txtPunch.requestFocus();
            return false;
        }  else if (dtDoj.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Date of Join can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtDoj.requestFocus();
            return false;            
        }   else if (dtCoj.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Company Join can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtCoj.requestFocus();
            return false;           
        }   else if (chkExEmp.isSelected() && dtExDoj.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Ex Joining Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtExDoj.requestFocus();
            return false;
        }   else if (chkExEmp.isSelected() && dtExLeaveDate.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Ex Living Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtExLeaveDate.requestFocus();
            return false;
        } else if (chkProbation.isSelected() && dtProbFrom.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "ProBation From Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtProbFrom.requestFocus();
            return false;
        } else if (chkProbation.isSelected() && dtProbToDate.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "ProBation To Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtProbToDate.requestFocus();
            return false;
        } else if (chkContract.isSelected() && dtContFrom.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Contract From Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtContFrom.requestFocus();
            return false;
        } else if (chkContract.isSelected() && dtContToDate.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Contract To Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(0);
            dtContToDate.requestFocus();
            return false;
        } else if (dtEffectDate.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Salary Effected Date can not be blank...!.");
            tbdEmpDet.setSelectedIndex(1);
            dtEffectDate.requestFocus();
            return false;
        }
        return true;
    }
  
    public void assignValu() {
        // ----------------- Employee part
        if (chkMarriege.isSelected()) {
            asigmMarried = "Y";
        } else {
            asigmMarried = "N";
            txtChildren.setText("0");
        }
        if (chkDeptHead.isSelected()) {
            asigDeptHead = "Y";
        } else {
            asigDeptHead = "N";
        }

        if (chkTrainee.isSelected()) {
            asigIstrainee = "Y";
        } else {
            asigIstrainee = "N";
        }

        if (chkExEmp.isSelected()) {
            asigExEmp = "Y";
        } else {
            asigExEmp = "N";
        }

        if (chkProbation.isSelected()) {
            asigProb = "Y";
        } else {
            asigProb = "N";
        }

        if (chkContract.isSelected()) {
            asigContract = "Y";
        } else {
            asigContract = "N";
        }

        //---------------- Salary part
       /* if (!chkTA.isSelected()) {
            txtTA.setText("0");
        }

        if (!chkWA.isSelected()) {
            txtWA.setText("0");
        }

        if (!chkEA.isSelected()) {
            txtEA.setText("0");
        }

        if (!chkCCA.isSelected()) {
            txtCCA.setText("0");
        }

        if (!chkSplAllow.isSelected()) {
            txtSplAllow.setText("0");
        }

        if (!chkOthers.isSelected()) {
            txtOthers.setText("0");
        }

        if (!chkGratuity.isSelected()) {
            txtGratuity.setText("0");
            txtDedEL.setText("0");
        }
        if (!chkFBT.isSelected()) {
            txtFBT.setText("0");
        }

        if (!chkInsurance.isSelected()) {
            txtInsurance.setText("0");
        }

        if (!chkPF.isSelected()) {
            txtPF.setText("0");
            txtDedPF.setText("0");
            //txtPFAccNo.setText("");
        }

        if (!chkESIC.isSelected()) {
            txtESIC.setText("0");
            txtDedESIC.setText("0");
           // txtESICAccNo.setText("");
        }
        if (txtDedIT.getText().equals("")) {
            txtDedIT.setText("0");
        }

        if (txtNetSal.getText().equals("")) {
            txtNetSal.setText("0");
        }

        if (txtGrossSal.getText().equals("")) {
            txtGrossSal.setText("0");
        }          
        
        if (txtPPFAccNo.getText().equals("")) {
            txtPPFAccNo.setText("");
        }

        if (txtFamilyAccNo.getText().equals("")) {
            txtFamilyAccNo.setText("");
        }

        if (txtSalaryAccNo.getText().equals("")) {
            txtSalaryAccNo.setText("");
        }
         */
        //Full Details part
        if (chk2Wheelar.isSelected()) {
            asig2Wheel = "Y";
        } else {
            asig2Wheel = "N";
            txt2WheelarNo.setText("");
        }

        if (chk4Wheelar.isSelected()) {
            asig4Wheel = "Y";
        } else {
            asig4Wheel = "N";
            txt4WheelarNo.setText("");
        }

    }

    public void addlanguage() throws SQLException {
        String StrLang = "Insert Into Emp_Language Values ( " + lblEmpCode.getText() + ",'";
        //try {
            for (int i = 0; i < tblLanguage.getRowCount(); i++) {
                for (int j = 0; j < tblLanguage.getColumnCount(); j++) {
                    if (j != tblLanguage.getColumnCount() - 1) {
                        StrLang = StrLang + tblLanguage.getValueAt(i, j) + "','";
                    } else {
                        StrLang = StrLang + tblLanguage.getValueAt(i, j) + "')";
                    }
                }
                Statement st = con.createStatement();
                System.out.println("" + StrLang + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrLang);
                StrLang = "Insert Into Emp_Language Values (" + lblEmpCode.getText() + ",'";
            }
       /* } catch (SQLException sqlex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Language Info.");
            sqlex.printStackTrace();
        }*/
    }
    public void addlanguageREQ() throws SQLException {
        String StrLang = "Insert Into REQ_Emp_Language Values ( " +ISRMaxNo+" ," + lblEmpCode.getText() + ",'";
        //try {
            for (int i = 0; i < tblLanguage.getRowCount(); i++) {
                for (int j = 0; j < tblLanguage.getColumnCount(); j++) {
                    if (j != tblLanguage.getColumnCount() - 1) {
                        StrLang = StrLang + tblLanguage.getValueAt(i, j) + "','";
                    } else {
                        StrLang = StrLang + tblLanguage.getValueAt(i, j) + "')";
                    }
                }
                Statement st = con.createStatement();
                System.out.println("" + StrLang + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrLang);
                StrLang = "Insert Into REQ_Emp_Language Values ( " +ISRMaxNo+" ," + lblEmpCode.getText() + ",'";
            }
       /* } catch (SQLException sqlex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Language Info.");
            sqlex.printStackTrace();
        }*/
    }
    
    public void addRef()throws SQLException {
        String StrRef = "Insert Into Emp_Ref Values ( " + lblEmpCode.getText() + ",";
        //try {
            //rsEmpRef.first();
            for (int i = 0; i < tblRef.getRowCount(); i++) {
                
                /*for (int j = 0; j < tblRef.getColumnCount(); j++) {
                    if (j != tblRef.getColumnCount() - 1) {
                        if( j == 3){
                            StrRef = StrRef + Double.parseDouble(tblRef.getValueAt(i, j)+"") + "','";
                        }else
                            StrRef = StrRef + tblRef.getValueAt(i, j) + "','";
                    } else {
                        StrRef = StrRef + tblRef.getValueAt(i, j) + "','";
                    }                   
                }*/
                   
                StrRef +=  tblRef.getValueAt(i, 0)+",'"+tblRef.getValueAt(i, 1)+"','"+tblRef.getValueAt(i, 2)
                        +"','"+tblRef.getValueAt(i, 3)+"','"+tblRef.getValueAt(i, 4)+"','";
                
                
                if(bEdit && EmpRefInsertedBy !=null ){        
                   // rsEmpRef.next();
                   // StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    StrRef += EmpRefInsertedBy+"'";
                    StrRef += ",'"+Execute.DateConv(EmpRefInsertedDate)+"'";
                }else{
                     StrRef += User+"'";
                     StrRef += ",'"+ getToday()+"'";                     
                }
                StrRef += ",'"+User+"'";
                StrRef += ",'"+ getToday()+"')";
                
                Statement st = con.createStatement();
                System.out.println("" + StrRef + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrRef);
                StrRef = "Insert Into Emp_Ref Values (" + lblEmpCode.getText() + ",'";
                
            }
        /*} catch (SQLException sqlex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Reference Info.");
            sqlex.printStackTrace();
        }*/
    }    
    public void addRefREQ()throws SQLException {
        
        String StrRef = "Insert Into REQ_Emp_Ref Values ( " + ISRMaxNo+"," + lblEmpCode.getText() + ",";
        
            for (int i = 0; i < tblRef.getRowCount(); i++) {              
            
                   
                StrRef +=  tblRef.getValueAt(i, 0)+",'"+tblRef.getValueAt(i, 1)+"','"+tblRef.getValueAt(i, 2)
                        +"','"+tblRef.getValueAt(i, 3)+"','"+tblRef.getValueAt(i, 4)+"','";
                
                
                if(bEdit && EmpRefInsertedBy !=null ){        
                   // rsEmpRef.next();
                   // StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    StrRef += EmpRefInsertedBy+"'";
                    StrRef += ",'"+Execute.DateConv(EmpRefInsertedDate)+"'";
                }else{
                     StrRef += User+"'";
                     StrRef += ",'"+ getToday()+"'";                     
                }
                StrRef += ",'"+User+"'";
                StrRef += ",'"+ getToday()+"')";
                
                Statement st = con.createStatement();
                System.out.println("" + StrRef + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrRef);
                StrRef = "Insert Into REQ_Emp_Ref Values (" + ISRMaxNo+"," + lblEmpCode.getText() + ",";
                
            }
        
    }    
    
    
    public void addFamily() throws SQLException{

        //for(int i=0; i<tblFamily.getRowCount();i++) {
        //for(int j=0; j<tblFamily.getColumnCount();j++) {        
        if (tblFamily.isEditing()) {
            JOptionPane.showMessageDialog(this, "Row is Editing in family Details");
            return;
        }
        //  }}
        String StrFamily = "Insert Into Emp_FamilyDet Values ( " + lblEmpCode.getText() + ",";
        //try {
            for (int i = 0; i < tblFamily.getRowCount(); i++) {
                for (int j = 0; j < tblFamily.getColumnCount(); j++) {
                    if (j != tblFamily.getColumnCount() - 1) {
                        if (j == 0) {
                            StrFamily = StrFamily + tblFamily.getValueAt(i, j) + ",";
                        }
                        if (j == 1) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 2) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                       // System.out.println(tblFamily.getValueAt(i, 3).getClass());
                        if (j == 3) {
                            StrFamily = StrFamily + Execute.IntegerToString(tblFamily.getValueAt(i, 3)) + ",";
                        }
                        if (j == 4) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 5) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "','";
                        }
                        if (j == 6) {
                            StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + "',";
                        }
                    } else {
                        if (j == 0) {
                            StrFamily = StrFamily + tblFamily.getValueAt(i, j) + ",";
                        }
                        if (j == 1) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 2) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 3) {
                           StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + ",";
                        }
                        if (j == 4) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 5) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "','";
                        }
                        if (j == 6) {
                            StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + "',";
                        }
                    }
                }
                
                if(bEdit && EmpFamilyInsertedBy!= null){       
                    
                    //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    StrFamily += "'"+EmpFamilyInsertedBy+"'";
                    StrFamily += ",'"+EmpFamilyInsertedDate+"'";
                }else{
                     StrFamily += "'"+User+"'";
                     StrFamily += ",'"+ getToday()+"'";                     
                }
                StrFamily += ",'"+User+"'";
                StrFamily += ",'"+ getToday()+"')";
                
                Statement st = con.createStatement();
                System.out.println("" + StrFamily + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrFamily);
                StrFamily = "Insert Into Emp_FamilyDet Values (" + lblEmpCode.getText() + ",";
            }
       /* } catch (SQLException sqlex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Reference Info.");
            sqlex.printStackTrace();
        }*/
    }    
    public void addFamilyREQ() throws SQLException{

        //for(int i=0; i<tblFamily.getRowCount();i++) {
        //for(int j=0; j<tblFamily.getColumnCount();j++) {        
        if (tblFamily.isEditing()) {
            JOptionPane.showMessageDialog(this, "Row is Editing in family Details");
            return;
        }
        //  }}
        String StrFamily = "Insert Into REQ_Emp_FamilyDet Values ( "+ ISRMaxNo+" ," + lblEmpCode.getText() + ",";
        //try {
            for (int i = 0; i < tblFamily.getRowCount(); i++) {
                for (int j = 0; j < tblFamily.getColumnCount(); j++) {
                    if (j != tblFamily.getColumnCount() - 1) {
                        if (j == 0) {
                            StrFamily = StrFamily + tblFamily.getValueAt(i, j) + ",";
                        }
                        if (j == 1) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 2) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                       // System.out.println(tblFamily.getValueAt(i, 3).getClass());
                        if (j == 3) {
                            StrFamily = StrFamily + Execute.IntegerToString(tblFamily.getValueAt(i, 3)) + ",";
                        }
                        if (j == 4) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 5) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "','";
                        }
                        if (j == 6) {
                            StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + "',";
                        }
                    } else {
                        if (j == 0) {
                            StrFamily = StrFamily + tblFamily.getValueAt(i, j) + ",";
                        }
                        if (j == 1) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 2) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 3) {
                           StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + ",";
                        }
                        if (j == 4) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "',";
                        }
                        if (j == 5) {
                            StrFamily = StrFamily + "'" + tblFamily.getValueAt(i, j) + "','";
                        }
                        if (j == 6) {
                            StrFamily = StrFamily + Execute.IntegerToString( tblFamily.getValueAt(i, j)) + "',";
                        }
                    }
                }
                
                if(bEdit && EmpFamilyInsertedBy!= null){       
                    
                    //StrRef += rsEmpRef.getString("InsertedBy")+"'";
                    StrFamily += "'"+EmpFamilyInsertedBy+"'";
                    StrFamily += ",'"+EmpFamilyInsertedDate+"'";
                }else{
                     StrFamily += "'"+User+"'";
                     StrFamily += ",'"+ getToday()+"'";                     
                }
                StrFamily += ",'"+User+"'";
                StrFamily += ",'"+ getToday()+"')";
                
                Statement st = con.createStatement();
                System.out.println("" + StrFamily + "\n" + "Rows Updated:");//+result);
                int result = st.executeUpdate(StrFamily);
                StrFamily = "Insert Into REQ_Emp_FamilyDet Values (" + ISRMaxNo+" ," + lblEmpCode.getText() + ",";
            }
       /* } catch (SQLException sqlex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Reference Info.");
            sqlex.printStackTrace();
        }*/
    }
 
    public void addCompDetails() {
        String Depthead = "";
        if (chkDeptHead.isSelected()) {
            Depthead = "Y";
        } else {
            Depthead = "N";
        }

        String StrCompDet = "Insert Into Emp_CompDet valuse(" + lblEmpCode.getText() + ", " + arrListCodeComp.get(cboCompany.getSelectedIndex() - 1) + " , " +
                "" + 0 + ", " + 
               // arrListCodeDept.get(cboDept.getSelectedIndex())
                cboDept.getSelectedItem().toString().substring(cboDept.getSelectedItem().toString().indexOf("-"),cboDept.getSelectedItem().toString().length() ).trim()
                + ", " + arrListCateg.get(cboCategory.getSelectedIndex() - 1) + ", " +
                "'" + ((Searchs.SearchCombo)cboReporting).getEmpCode() + "', '" + Depthead + "', '" + cboWeekOff.getSelectedIndex() + "', " + 0 + ", " + 0 + "";
        System.out.println("StrSql=" + StrCompDet);
    }

    public void  addAccountDet() throws SQLException {

        String StrSal = "Insert Into Emp_AccntDet Values ( " + lblEmpCode.getText() +   ",'" + txtPFAccNo.getText() + "', '" + txtPPFAccNo.getText() + "', '" + txtESICAccNo.getText() + "', '" + txtFamilyAccNo.getText() + "')";
        System.out.println("StrSql=" + StrSal);
        Statement st = con.createStatement();
        //int resultSal =


        String strMain = "";
        for (int i = tblBankAccDet.getRowCount()-1; i >=0; i--) {
            strMain += " insert into Emp_BankDet (EmpCode,BankCode,SalaryAccNo,Company) values('"+lblEmpCode.getText()+"','"+mapBankDet.get(tblBankAccDet.getValueAt(i, 0))+"','"+tblBankAccDet.getValueAt(i, 1)+"',"+AfterLoginMainForm.compcode +") ";
            System.out.println(strMain);
        }
        st.executeUpdate(strMain+ StrSal);
    }
    
    public void InsConactFull() throws SQLException{
                assignValu();
                //try {

           
             
             /*int date = Calendar.getInstance().get(Calendar.DATE);
             int month = Calendar.getInstance().get(Calendar.MONTH)+1; 
             int year = Calendar.getInstance().get(Calendar.YEAR); 
             String toDay = year +"/"+month+"/"+date ;*/
                    String StrDet = "Insert into Emp_ContactFull Values " +
                    "(" + lblEmpCode.getText() + ", '" + txtFName.getText() + "', '" + txtSName.getText() + "', '" + txtLName.getText() + "', '" +  Others.Execute.DateConv(  dtDOB.getSelectedItem()+"") + "', " +
                    "'" + txtBirthPlace.getText() + "','" + cboSex.getSelectedItem() + "', '" + cboBgrp.getSelectedItem() + "', '" + cboReligion.getSelectedItem() + "',  " +
                    "'" + cboNationality.getSelectedItem() + "', '" + asigmMarried + "', '" +  Others.Execute.DateConv(  dtMarriageDate.getSelectedItem() +"") + "', " + ( Execute.chkNullReturnBoolean(txtChildren.getText()) ? 0 : txtChildren.getText()) + ", " +
                    "'" + txtFHGName.getText() + "', '" + txtRelation.getText() + "', '" + txtAddressM.getText() + "', '" + "Area" + "', '" + txtCityM.getText() + "', " +
                    "" + txtPinM.getText() + ", " +
                    //mapStateM.get(cboStateM.getSelectedItem().toString()) 
                    arrlistCodeStateM.get(cboStateM.getSelectedIndex())
                    + ", '" + "India" + "', " +
                    "" + txtStdM.getText() + ", " + txtPhoneM.getText() + ", " + txtMobileM.getText() + ", " +
                    "'" + txtEmailM.getText() + "', '" + "" + "', '" + txtAddressP.getText() + "', '" + "Area" + "', '" + txtCityP.getText() + "', " + txtStdP.getText() + ", " +
                    "" +
                    //mapStateP.get(cboStateP.getSelectedItem().toString()) 
                    arrlistCodeStateP.get(cboStateP.getSelectedIndex())
                    + ", '" + "Country" + "', " + txtStdP.getText() + ", " + txtPhoneP.getText() + ", " +
                    "" + txtMobileP.getText() + ", '" + Execute.IntegerToString(txtHeight.getText()) + "', " + Execute.IntegerToString(txtWeight.getText()) + ", '" + cboEyeColor.getSelectedItem() + "', " +
                    "'" + txtIdmark.getText() + "', '" + txtPan.getText() + "', '" + txtPassport.getText() + "', '" + txtDrivingLicNo.getText() + "', " +
                    "'" + txtPerpath.getText() + "', '" + "PPImg" + "', '" + txtDocDetails.getText() + "', '" + cboHouse.getSelectedItem() + "', '" + asig2Wheel + "', '" + txt2WheelarNo.getText() + "', " +
                    "'" + asig4Wheel + "',  '" + txt4WheelarNo.getText() + "' , '" + "Min" + "', '" + "" + "', '" + "Min" + "', '" + "" + "', '" + chkIsActive.isSelected()
                    +"','" + txtThumb.getText() +"','" + txtSign.getText() +"','"; 
                    
                    if(bEdit && loadedset.getString("InsertedBy") != null){
                        StrDet +=loadedset.getString("InsertedBy")+"','"+ Execute.DateBaseToDataBase(loadedset.getDate("InsertedDate"))+"','";
                    }else{
                        StrDet +=User+"','"+Execute.getToday()+"','";
                    }
                    StrDet += User+"','"+Execute.getToday()+"'"+")";

                    System.out.println("Strdet=" + StrDet);
            
            //int result = 
                    con.createStatement().executeUpdate(StrDet);
                    
                    //st.executeUpdate(StrDet);
                    
         //  st=null;

           /* if (result == 1) {
                JOptionPane.showMessageDialog(null, "Record has been Saved.");
            } else {
                JOptionPane.showMessageDialog(null, "Problem while Saving the Record.");
            }*/
            /*} catch (SQLException sqlex) {
                JOptionPane.showMessageDialog(null, "Duplicate Record.");
            }*/
    }

    public void InsConactFullREQ() throws SQLException{
                assignValu();
                //try {

                ISRMaxNo = -1;
                ResultSet mySet = con.createStatement().executeQuery("Select isNull(Max(ISRNO),0)+1 as ISRNO FROM REQ_Emp_ContactFull Where EmpCode= " + AfterLoginMainForm.user );
                mySet.next();      
                ISRMaxNo = mySet.getInt("ISRNO");
                 /*int date = Calendar.getInstance().get(Calendar.DATE);
                 int month = Calendar.getInstance().get(Calendar.MONTH)+1; 
                 int year = Calendar.getInstance().get(Calendar.YEAR); 
                 String toDay = year +"/"+month+"/"+date ;*/
                
                    String StrDet = "Insert into REQ_Emp_ContactFull Values " +
                    "("+ ISRMaxNo +","+ lblEmpCode.getText() + ", '" + txtFName.getText() + "', '" + txtSName.getText() + "', '" + txtLName.getText() + "', '" + Others.Execute.DateConv(  dtDOB.getSelectedItem() +"") + "', " +
                    "'" + txtBirthPlace.getText() + "','" + cboSex.getSelectedItem() + "', '" + cboBgrp.getSelectedItem() + "', '" + cboReligion.getSelectedItem() + "',  " +
                    "'" + cboNationality.getSelectedItem() + "', '" + asigmMarried + "', '" + Others.Execute.DateConv( dtMarriageDate.getSelectedItem()+"" ) + "', " + txtChildren.getText() + ", " +
                    "'" + txtFHGName.getText() + "', '" + txtRelation.getText() + "', '" + txtAddressM.getText() + "', '" + "Area" + "', '" + txtCityM.getText() + "', " +
                    "" + txtPinM.getText() + ", " +
                    //mapStateM.get(cboStateM.getSelectedItem().toString()) 
                    arrlistCodeStateM.get(cboStateM.getSelectedIndex())
                    + ", '" + "India" + "', " +
                    "" + txtStdM.getText() + ", " + txtPhoneM.getText() + ", " + txtMobileM.getText() + ", " +
                    "'" + txtEmailM.getText() + "', '" + "" + "', '" + txtAddressP.getText() + "', '" + "Area" + "', '" + txtCityP.getText() + "', " + txtStdP.getText() + ", " +
                    "" +
                    //mapStateP.get(cboStateP.getSelectedItem().toString()) 
                    arrlistCodeStateP.get(cboStateP.getSelectedIndex())
                    + ", '" + "Country" + "', " + txtStdP.getText() + ", " + txtPhoneP.getText() + ", " +
                    "" + txtMobileP.getText() + ", '" + Execute.IntegerToString(txtHeight.getText()) + "', " + Execute.IntegerToString(txtWeight.getText()) + ", '" + cboEyeColor.getSelectedItem() + "', " +
                    "'" + txtIdmark.getText() + "', '" + txtPan.getText() + "', '" + txtPassport.getText() + "', '" + txtDrivingLicNo.getText() + "', " +
                    "'" + txtPerpath.getText() + "', '" + "PPImg" + "', '" + txtDocDetails.getText() + "', '" + cboHouse.getSelectedItem() + "', '" + asig2Wheel + "', '" + txt2WheelarNo.getText() + "', " +
                    "'" + asig4Wheel + "',  '" + txt4WheelarNo.getText() + "' , '" + "Min" + "', '" + "" + "', '" + "Min" + "', '" + "" + "', '" + chkIsActive.isSelected()
                    +"','" + txtThumb.getText() +"','" + txtSign.getText() +"','"; 
                    
                    if(bEdit && loadedset.getString("InsertedBy") != null){
                        StrDet +=loadedset.getString("InsertedBy")+"','"+ Execute.DateBaseToDataBase(loadedset.getDate("InsertedDate"))+"','";
                    }else{
                        StrDet +=User+"','"+Execute.getToday()+"','";
                    }
                    StrDet += User+"','"+Execute.getToday()+"'"+")";

                    System.out.println("Strdet=" + StrDet);
            
            //int result = 
                    con.createStatement().executeUpdate(StrDet);
                    
                    //st.executeUpdate(StrDet);
                    
         //  st=null;

           /* if (result == 1) {
                JOptionPane.showMessageDialog(null, "Record has been Saved.");
            } else {
                JOptionPane.showMessageDialog(null, "Problem while Saving the Record.");
            }*/
            /*} catch (SQLException sqlex) {
                JOptionPane.showMessageDialog(null, "Duplicate Record.");
            }*/
    }
    
    public void fillData() {
        clearText();
        Execute.panelClear(pnlMain);
        Execute.panelClear(panelComProv);
        //Execute.panelClear( pnlPersonalDet);
        clearAllTables();
        try {
            lblEmpCode  .setText("" + loadedset.getInt("EmpCode"));
            txtFName    .setText(   loadedset.getString("EmpF_Name"));
            txtSName    .setText(   loadedset.getString("EmpS_Name"));
            txtLName    .setText(   loadedset.getString("EmpL_Name"));
            txtAddressM.setText(loadedset.getString("Address"));
            txtAddressP.setText(loadedset.getString("PAddress"));
            txtCityP.setText(   loadedset.getString("PCity"));
            txtCityM.setText(   loadedset.getString("City"));
            txtFHGName.setText( loadedset.getString("F_H_G_Name"));
            txtRelation.setText(loadedset.getString("Relation"));
            txtBirthPlace.setText(loadedset.getString("Birth_Place"));
          // dtDoj.setSelectedItem(Execute.DateConvDatabase(loadedset.getString("DOJ").toString()));
          // dtDoj.setSelectedItem(Execute.DateConvDatabase(loadedset.getString("DOJ").toString()));
            dtDOB.setSelectedItem(Execute.DateConvDatabase(loadedset.getDate("DOB")));
            dtMarriageDate.setSelectedItem(Execute.DateConvDatabase(loadedset.getDate("MarriageDate")));
            txtEmailM.setText(loadedset.getString("EmailId"));
            
            cboReligion.setSelectedItem((Object)loadedset.getString("Religion"));
            cboNationality.setSelectedItem(loadedset.getString("Nationality"));         
                        
            cboStateP.setSelectedItem((Object)mapStateP.get(loadedset.getInt("PStateCode")));
            cboStateM.setSelectedItem((Object)mapStateP.get(loadedset.getInt("StateCode")));
            cboBgrp.setSelectedItem((Object)loadedset.getString("B_group"));
            cboSex.setSelectedItem((Object)loadedset.getString("Sex"));
            
            txtPinM.setText(loadedset.getString("Pin"));
            txtStdP.setText(loadedset.getString("PPin"));            
            txtStdM.setText(loadedset.getString("StdCode"));
            txtPhoneM.setText(loadedset.getString("Phone"));
            txtMobileM.setText(loadedset.getString("Mobile"));
            txtStdP.setText(loadedset.getString("PStdCode"));
            txtPhoneP.setText(loadedset.getString("PPhone"));
            txtMobileP.setText(loadedset.getString("PMobile"));
            
            cboEyeColor.setSelectedItem(loadedset.getString("Eye_Color"));
            txtHeight.setText(loadedset.getString("Height"));
            txtWeight.setText(loadedset.getString("Weight"));
            
            cboHouse.setSelectedItem((Object)loadedset.getString("House"));
            txtPan.setText(loadedset.getString("PANNo"));
            txtIdmark.setText(loadedset.getString("IDmark"));
            txtPassport.setText(loadedset.getString("PassportNo"));
            txtDrivingLicNo.setText(loadedset.getString("DrvLic"));
            txtDocDetails.setText(loadedset.getString("DocDetails"));
        
             if( loadedset.getString("Married") != null)          
                if (loadedset.getString("Married").equalsIgnoreCase("Y")) {
                    chkMarriege.setSelected(true);
                    txtChildren.setText(loadedset.getString("No_of_Children"));
                   //dtMarriageDate
                } else {
                    chkMarriege.setSelected(false);                
                }
            
            chkTrainee.setSelected(Boolean.valueOf(rsloadedCompany.getString("IsTrainee")));
            chkExEmp.setSelected(Boolean.valueOf(rsloadedCompany.getString("IsExEmpl")));
            chkProbation.setSelected(Boolean.valueOf(rsloadedCompany.getString("OnProbation")));
            chkContract.setSelected(Boolean.valueOf(rsloadedCompany.getString("OnContract")));
            chkIsActive.setSelected(Boolean.valueOf(loadedset.getString("IsActive")));
                        
            if (loadedset.getString("TwoWhhelar").equalsIgnoreCase("Y")) {
                chk2Wheelar.setSelected(true);
                txt2WheelarNo.setText(loadedset.getString("TwoWheelNo"));
               //dtMarriageDate
            } else {
                chk2Wheelar.setSelected(false);                
                txt2WheelarNo.setText("");
            }
            if (loadedset.getString("FourWheelar").equalsIgnoreCase("Y")) {
                chk4Wheelar.setSelected(true);
                txt4WheelarNo.setText(loadedset.getString("FourWheelNo"));
               //dtMarriageDate
            } else {
                chk4Wheelar.setSelected(false);                
                txt4WheelarNo.setText("");
            }
            
            txtChildren.setText(loadedset.getString("No_of_Children"));
            
            int EmpCode = loadedset.getInt("EmpCode");
            
            System.out.println(EmpCode + " EmpCode "+ rsloadedCompany.getInt("Empcode"));
            
            //loading  Company Details
            if( rsloadedCompany.getInt("Empcode") == loadedset.getInt("Empcode")  ){
                cboCompany.setSelectedIndex(rsloadedCompany.getInt("Company"));
                
              /*  int Code = rsloadedCompany.getInt("Dept");
                for(int i =0;i < cboDept.getItemCount();i++){
                    
                    if(Code ==  Integer.parseInt(arrListDesig.get(i)))
                        cboDesignation.setSelectedIndex(i);
                }
                */
                int Code = rsloadedCompany.getInt("Dept");
                for(int i =0;i < cboDept.getItemCount();i++){
                    
                    if(Code ==  Integer.parseInt(arrListCodeDept.get(i))){
                        cboDept.setSelectedIndex(i+1);
                        break;
                    }
                }
                
               // cboDept.setSelectedIndex(rsloadedCompany.getInt("Dept"));
                Code = rsloadedCompany.getInt("Designation");
                for(int i =0;i < arrListDesig.size();i++)
                    if(Code ==  Integer.parseInt(arrListDesig.get(i))){
                       cboDesignation.setSelectedIndex(i);
                       break;
                    }
               
                chkDeptHead .setSelected(new Boolean( rsloadedCompany.getString("IsDeptHead") ));
//                cboReporting.setSelectedItem((Object)rsloadedCompany.getString("Reporting"));
                if(!Execute.chkNullReturnBoolean(rsloadedCompany.getString("Reporting"))){
                    ((Others.SearchCombo)cboReporting).setSelectedItem(rsloadedCompany.getString("reportingEmpName")+" - "+rsloadedCompany.getString("Reporting"));
                }
//                cboReporting.setSelectedItem(rsloadedCompany.getString("Reporting"));
//                String str = tblEmpDetails.getValueAt(tblEmpDetails.getSelectedRow(),1)+Execute.BLANK  ;
//                cboEmp.setSelectedItem(str +" - " + tblEmpDetails.getValueAt(tblEmpDetails.getSelectedRow(),0));
//                ((Others.SearchCombo)cboReporting).setSelectedItem(title);
                cboCategory .setSelectedIndex(rsloadedCompany.getInt("Category"));
                cboShift    .setSelectedIndex(rsloadedCompany.getInt("Shift_Code"));
                cboWeekOff  .setSelectedIndex(rsloadedCompany.getInt("WeekOffNo"));
                txtPunch    .setText(String.valueOf(rsloadedCompany.getInt("PunchNo")));
                dtDoj       .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("DoJ_Grp")));
                dtCoj       .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("DoJ_Comp")));
                dtProbFrom  .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("Prob_From")));
                dtProbToDate.setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("Prob_To")));
                dtExDoj     .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("ExDOJ")));
                dtExLeaveDate   .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("ExDoL")));
                dtContFrom      .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("ContactFrom")));
                dtContToDate    .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("ContractTo")));
                dtConfirmDate   .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("Confirmation")));
                dtEffectDate    .setSelectedItem(Execute.DateConvDatabase(rsloadedCompany.getDate("SalEffectDate")));
                txtRentPaid     .setText( rsloadedCompany.getString("AnualrentPaid")   );

                for( int i=1 ;i< cboBranch.getItemCount();i++){
                   String item = cboBranch.getItemAt(i)+"";
                         item =   item .substring( item.indexOf("-")+1, item.length()).trim();
                    if( item.equals( rsloadedCompany.getObject("Branch") )){
                        cboBranch.setSelectedIndex( i);                        
                        break;
                    }else cboBranch.setSelectedIndex( 0);                 
                }                
            }
            
            loadEmpLanguage(EmpCode);
            loadEmpRefDetails(EmpCode);
            loadFamilyDetails(EmpCode);

//            loadSalEarings(EmpCode);
//            loadSalDeductions(EmpCode);
//            loadSalEmpContrib(EmpCode);
//            loadSalOthers(EmpCode);
            loadSalaray(EmpCode);
            loadButtonImages();
            System.out.println(rsloadedInterView.getInt("Empcode")+" "+loadedset.getInt("Empcode"));
            if( rsloadedInterView.getInt("Empcode") == loadedset.getInt("Empcode")  )
                loadInterViewDetails();
           
            if( rsloadedCopmProv.getInt("Empcode") == loadedset.getInt("Empcode")  )
                loadCompanyProviding();

            loadExperince();
            loadQualification(); 
            
            try{
                loadAcountDet();
            }catch(Exception e){}
            checkBoxEvents();         
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
         tblSalEarningsKeyTyped(null);
    }
    
    public void checkBoxEvents(){
         chkMarriegeItemStateChanged(null);
         chk4WheelarItemStateChanged(null);
         chkMarriegeItemStateChanged(null);
         chkExEmpItemStateChanged(null);
         chkProbationItemStateChanged(null);
         chkContractItemStateChanged(null);
         chk2WheelarItemStateChanged(null);
         chk4WheelarItemStateChanged(null);         
    }
    
    public void loadExperince() throws SQLException{
        
          String Statement = "select * from Emp_ExperinceDet where EmpCode =" +lblEmpCode.getText();
          
          ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);
            
            for(int i = modelExpernc.getRowCount()-1;i>=0;i--){
                modelExpernc.removeRow(i);
                SrNoExperncDet--;
            }
            
            while(rsEmpLang.next()) {            
                    EmpExperncInsertedBy = rsEmpLang.getString("InsertedBy");
                    EmpExperncInsertedDate = Execute.DateBaseToDataBase(rsEmpLang.getDate("InsertedDate"));
                    Vector v = new Vector();
                    if (SrNoExperncDet == 0) {
                        SrNoExperncDet = 1;
                        v.add(SrNoExperncDet);
                        v.add(rsEmpLang.getString("Organization"));
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("Joining_Date")));
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("Leaving_Date")));
                        v.add(rsEmpLang.getString("Joining_Position"));
                        v.add(rsEmpLang.getString("Leaving_Position"));
                        v.add(rsEmpLang.getInt("Joining_Salary"));       
                        v.add(rsEmpLang.getInt("Leaving_Salary"));
                        v.add(rsEmpLang.getString("Responsibilities"));
                        v.add(rsEmpLang.getString("Leaving_Reason"));
                         v.add(rsEmpLang.getString("Superiors_Name"));                                
                        modelExpernc.addRow(v);
                        SrNoExperncDet++;
                    } else {
                       v.add(SrNoExperncDet);                      
                        v.add(rsEmpLang.getString("Organization"));
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("Joining_Date")));
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("Leaving_Date")));
                        v.add(rsEmpLang.getString("Joining_Position"));
                        v.add(rsEmpLang.getString("Leaving_Position"));
                        v.add(rsEmpLang.getInt("Joining_Salary"));       
                        v.add(rsEmpLang.getInt("Leaving_Salary"));
                        v.add(rsEmpLang.getString("Responsibilities"));
                        v.add(rsEmpLang.getString("Leaving_Reason"));
                         v.add(rsEmpLang.getString("Superiors_Name"));
                         modelExpernc.addRow(v);
                        SrNoExperncDet++;
                    }                   
            }             
    }
     
    public void loadQualification() throws SQLException{
        
          String Statement = "select * from Emp_Qualification where EmpCode =" +lblEmpCode.getText();
          
          ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);
            
            for(int i = modelQualification.getRowCount()-1;i>=0;i--){
                modelQualification.removeRow(i);
                SrNoQualification--;
            }
            
            while(rsEmpLang.next()) {                 
                    EmpQualifInsertedBy = rsEmpLang.getString("InsertedBy");
                    EmpQualifInsertedDate = Execute.DateBaseToDataBase(rsEmpLang.getDate("InsertedDate"));
                    
                    Vector v = new Vector();
                    if (SrNoQualification == 0) {
                        SrNoQualification = 1;
                        v.add(SrNoQualification);
                        
                        v.add(rsEmpLang.getString("vcQualification_Type"));
                        v.add(rsEmpLang.getString("vcDeg_Dipl"));
                        v.add(rsEmpLang.getString("board_University"));                        
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("dYear_passing")));
                       
                        v.add(new Integer(rsEmpLang.getInt("iMarks")));
                        //v.add(new Float("0"));
                        v.add(rsEmpLang.getString("Grade"));       
                                                  
                        modelQualification.addRow(v);
                        SrNoQualification++;
                    } else {
                        v.add(SrNoQualification);                      
                      
                        v.add(rsEmpLang.getString("vcQualification_Type"));
                        v.add(rsEmpLang.getString("vcDeg_Dipl"));
                        v.add(rsEmpLang.getString("board_University"));  
                        v.add(Execute.DateConvDatabase(rsEmpLang.getDate("dYear_passing")));
                                             
                        v.add(new Integer(rsEmpLang.getInt("iMarks")));
                        v.add(rsEmpLang.getString("Grade"));       
                                                  
                        modelQualification.addRow(v);
                        SrNoQualification++;
                    }                   
            }             
    }
    
    public void loadInterViewDetails()throws SQLException{
        System.out.println("Pre_Interv_By : "+rsloadedInterView.getString("Pre_Interv_By"));
         txtInterviewPre.setText(rsloadedInterView.getString("Pre_Interv_By"));
         txtRemarksFinal.setText(rsloadedInterView.getString("Final_Remarks"));
         txtRemarksPre  .setText(rsloadedInterView.getString("Pre_Remarks"));          
         cboInterviewFinal.setSelectedItem((Object)rsloadedInterView.getString("Final_Interv_By"));
         dtInterviewPre   .setSelectedItem(Execute.DateConvDatabase(rsloadedInterView.getDate("Pre_Ondate"))+"");
         dtInterviewFinal .setSelectedItem(Execute.DateConvDatabase(rsloadedInterView.getDate("Final_Ondate"))+"");
   }
    
    public void loadEmpLanguage(int EmpCode) throws SQLException{
            String Statement = "select * from Emp_Language where EmpCode= " +EmpCode;
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);
            DefaultTableModel model = (DefaultTableModel) tblLanguage.getModel();
            for(int i = model.getRowCount()-1;i>=0;i--){
                model.removeRow(i);
                SrNoLang--;
            }
            while(rsEmpLang.next()) {     
                    
                            
                    Vector v = new Vector();
                    if (SrNoLang == 0) {
                        SrNoLang = 1;
                        v.add(SrNoLang);
                        v.add(rsEmpLang.getString("Lang_Known"));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Speak")));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Read")));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Write")));
                        model.addRow(v);
                        SrNoLang++;
                    } else {
                        v.add(SrNoLang);
                        v.add(rsEmpLang.getString("Lang_Known"));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Speak")));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Read")));
                        v.add(new Boolean(rsEmpLang.getString("Lang_Write")));
                        model.addRow(v);
                        SrNoLang++;
                    }
                    tblLanguage.setModel(model);
            }        
    }
    
    public void loadEmpRefDetails(int EmpCode) throws SQLException{
          
            String Statement = "select * from Emp_Ref where EmpCode = " +EmpCode;
             //rsEmpRef = con.createStatement().executeQuery(Statement);
            rsEmpRef = Others.Execute.ExecuteMyQeury(con, Statement);
                    // con.prepareStatement(Statement, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery();
            EmpRefInsertedBy = null;
            DefaultTableModel model = (DefaultTableModel) tblRef.getModel();
             for(int i = model.getRowCount()-1;i>=0;i--){
                model.removeRow(i);
                SrNoRef--;
            }
            while(rsEmpRef.next()&& !rsEmpRef.isAfterLast()) {   
                   EmpRefInsertedBy =rsEmpRef.getString("InsertedBy");
                   EmpRefInsertedDate =Execute.DateConvDatabase(rsEmpRef.getDate("InsertedDate"));
                    Vector v = new Vector();
                    if (SrNoRef == 0) {
                        SrNoRef = 1;
                        v.add(SrNoRef);
                        v.add(rsEmpRef.getString("Name"));
                        v.add(rsEmpRef.getString("Relation"));
                        if( rsEmpRef.getString("ContactNo") == null || rsEmpRef.getString("ContactNo").equals("null")  )
                            v.add(null);
                        else
                            v.add(  rsEmpRef.getString("ContactNo") );
                        v.add(rsEmpRef.getString("Address"));
                        model.addRow(v);
                        SrNoRef++;
                    } else {
                       v.add(SrNoRef);
                        v.add(rsEmpRef.getString("Name"));
                        v.add(rsEmpRef.getString("Relation"));
                        if( rsEmpRef.getString("ContactNo") == null || rsEmpRef.getString("ContactNo").equals("null")  )
                            v.add(null);
                        else
                            v.add(  rsEmpRef.getString("ContactNo") );
                        
                        v.add(rsEmpRef.getString("Address"));
                        model.addRow(v);
                        SrNoRef++;
                    }
                    tblRef.setModel(model);
            }        
    }
    
    public void loadFamilyDetails(int EmpCode) throws SQLException{
          
            String Statement = "select * from Emp_FamilyDet where EmpCode =" +EmpCode;
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);
            DefaultTableModel model = (DefaultTableModel) tblFamily.getModel();
            for(int i = model.getRowCount()-1;i>=0;i--){
                model.removeRow(i);
                SrNoFamily--;
            }
            EmpFamilyInsertedBy =null;
            while(rsEmpLang.next()) {   
                    EmpFamilyInsertedBy = rsEmpLang.getString("InsertedBy");
                    EmpFamilyInsertedDate = Execute.DateBaseToDataBase(rsEmpLang.getDate("InsertedDate"));                    
            
                    Vector v = new Vector();
                    if (SrNoFamily == 0) {
                        SrNoFamily = 1;
                        v.add(SrNoFamily);
                        v.add(rsEmpLang.getString("Name"));
                        v.add(rsEmpLang.getString("Relation"));
                        v.add(new Integer(rsEmpLang.getString("Age")));
                        v.add(rsEmpLang.getString("Occupation"));
                        v.add(new Boolean(rsEmpLang.getString("IsDependent")));
                        v.add( rsEmpLang.getString("ContactNo"));                       
                        model.addRow(v);
                        SrNoFamily++;
                    } else {
                       v.add(SrNoFamily);
                       v.add(rsEmpLang.getString("Name"));
                        v.add(rsEmpLang.getString("Relation"));
                        v.add(new Integer(rsEmpLang.getInt("Age")));
                        v.add(rsEmpLang.getString("Occupation"));
                        v.add(new Boolean(rsEmpLang.getString("IsDependent")));
                        // v.add(new BigInteger(rsEmpLang.getString("ContactNo")));
                         v.add( rsEmpLang.getString("ContactNo"));                                              
                        /*if(rsEmpLang.getString("ContactNo").equals("") )
                            v.add(new BigInteger("0"));
                        else
                            v.add(new BigInteger(rsEmpLang.getString("ContactNo")));    
                         * */
                        model.addRow(v);
                        SrNoFamily++;
                    }
                    tblFamily.setModel(model);
            }        
    }
    
    public void loadSalaray(int EmpCode) throws SQLException{        
        int maxNo =0;        
        String str      = "Select MAX(ISrNo) As SrNo from Ms_EmpEarnings where EmpCode= "+EmpCode  ;
        ResultSet  set  = Execute.ExecuteMyQeury(con, str);
        set.next();
        maxNo= set.getInt("SrNO");
        
        loadSalEarings(EmpCode, maxNo);
        loadSalDeductions(EmpCode, maxNo);
        loadSalEmpContrib(EmpCode, maxNo);
        loadSalOthers(EmpCode, maxNo);
    }
    
    
    
    public void loadSalEarings(int EmpCode,int ISRNO) throws SQLException{

        String Statement = "select * from Ms_EmpEarnings where ISrNo = "+ISRNO + " and  Empcode =" +EmpCode;
        ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            

        Execute.ClearTable(tblSalEarnings);
        modelSal = (DefaultTableModel) tblSalEarnings.getModel();
        SrNoTblEarnings=0;
        while(rsEmpLang.next()) {
            try{
                ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Ern_Code"));
                rsDisc.next();
                Vector v = new Vector(3);
                SrNoTblEarnings++;
                v.add(SrNoTblEarnings);
                v.add(rsDisc.getString("Er_Discription"));
                v.add(new Integer(rsEmpLang.getInt("Amount")));
                modelSal.addRow(v);
            }catch(Exception ex){
                ex.printStackTrace();
            }
        }
    }

    public void loadSalEaringsOld(int EmpCode,int SrNo) throws SQLException {

            String Statement = "select * from Ms_EmpEarnings where ISrNo =(Select max(ISrNo) from Ms_EmpEarnings where Empcode =" +EmpCode+") and  Empcode =" +EmpCode;
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);

            for(int i = modelSal.getRowCount()-1;i>=0;i--){
                modelSal.removeRow(i);
                SrNoTblEarnings--;
            }
            while(rsEmpLang.next()) {
                ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Ern_Code"));
                rsDisc.next();
                Vector v = new Vector(3);
                if (SrNoTblEarnings == 0) {
                    SrNoTblEarnings = 1;
                    v.add(SrNoTblEarnings);                    
                    v.add(rsDisc.getString("Er_Discription"));
                    v.add(new Integer(rsEmpLang.getInt("Amount")));                       
                    modelSal.addRow(v);
                    SrNoTblEarnings++;
                } else {
                    v.add(SrNoTblEarnings);
                    v.add(rsDisc.getString("Er_Discription"));
                    v.add(new Integer(rsEmpLang.getInt("Amount")));    
                    modelSal.addRow(v);
                    SrNoTblEarnings++;
                }
            }
    }
    
    public void loadSalDeductions(int EmpCode,int ISRNo) throws SQLException{

            String Statement = "select * from Ms_EmpDeduction where  ISrNo = " +ISRNo+"  and Ded_code<>-1 and  Empcode =" +EmpCode;
            
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            
            for(int i = modelDedSal.getRowCount()-1;i>=0;i--){
                modelDedSal.removeRow(i);                
            }
            SrNoTblSalEmpDed = 0;
            while(rsEmpLang.next()) { 
                try{
                    ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Ded_Code"));
                    rsDisc.next();
                    SrNoTblSalEmpDed++;
                    Vector v = new Vector(3);
                    if (SrNoTblSalEmpDed <= 0) {
                        SrNoTblSalEmpDed=1;
                    }
                    v.add(SrNoTblSalEmpDed);
                    v.add(rsDisc.getString("Er_Discription"));
                    v.add(new Integer(rsEmpLang.getInt("Amount")));    
                    modelDedSal.addRow(v);
                }catch(Exception ex){
                    ex.printStackTrace();
                }     
            }
    }
    
    public void loadSalDeductionsOld(int EmpCode) throws SQLException{
          
            //String Statement = "select * from Ms_EmpDeduction where EmpCode =" +EmpCode;
            
            String Statement = "select * from Ms_EmpDeduction where ISrNo =(Select max(ISrNo) from Ms_EmpEarnings where Empcode =" +EmpCode+")and  Empcode =" +EmpCode;
            
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            
            for(int i = modelDedSal.getRowCount()-1;i>=0;i--){
                modelDedSal.removeRow(i);
                SrNoTblSalEmpDed--;
            }
            SrNoTblSalEmpDed =0;
            while(rsEmpLang.next()) {     
                ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Ded_Code"));
                rsDisc.next();         
                
                    Vector v = new Vector(3);
                    if (SrNoTblSalEmpDed == 0) {
                        SrNoTblSalEmpDed = 1;
                        v.add(SrNoTblSalEmpDed);                       
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));                       
                        modelDedSal.addRow(v);
                        SrNoTblSalEmpDed++;
                    } else {
                        v.add(SrNoTblSalEmpDed);
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));    
                        modelDedSal.addRow(v);
                        SrNoTblSalEmpDed++;
                    }                  
            }        
    }
    
    public void loadSalEmpContrib(int EmpCode,int ISRNo) throws SQLException{

            String Statement =  " SELECT Contrib.*,Ms_Ern_Ded.Er_Discription "+
                                " FROM 	Ms_EmpContribution Contrib "+
                                " LEFT JOIN Ms_Ern_Ded Ms_Ern_Ded On Contrib.Con_Code = Ms_Ern_Ded.Er_Ded_Code "+
                                " WHERE Empcode =" +EmpCode+" and Con_Code<>-1 and ISrNo ="+ISRNo ;

            System.out.println(Statement);
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            
            Execute.ClearTable(tblSalDedEmpCon);
            modelSalDedEmpCon = (DefaultTableModel) tblSalDedEmpCon.getModel();
            SrNoTblEmpCon = 0;
            while(rsEmpLang.next()) {
//                    ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Con_Code"));
//                    rsDisc.next();
                try{
                    Vector v = new Vector(3);
                    SrNoTblEmpCon++;
                    v.add(SrNoTblEmpCon);
                    v.add(rsEmpLang.getString("Er_Discription"));
                    v.add(rsEmpLang.getInt("Amount"));
                    modelSalDedEmpCon.addRow(v);
                }catch(Exception ex){
                    ex.printStackTrace();
                }      
            }
    }      
    
    public void loadSalEmpContribOld(int EmpCode) throws SQLException{
          
            //String Statement = "select * from Ms_EmpContribution where EmpCode =" +EmpCode;
            String Statement = "select * from Ms_EmpContribution where ISrNo =(Select max(ISrNo) from Ms_EmpEarnings where Empcode =" +EmpCode+")and  Empcode =" +EmpCode;
            
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            
            for(int i = modelSalDedEmpCon.getRowCount()-1;i>=0;i--){
                modelSalDedEmpCon.removeRow(i);
                SrNoTblEmpCon--;
            }

            while(rsEmpLang.next()) {

                 ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Con_Code"));
                 rsDisc.next();  
                
                    Vector v = new Vector(3);
                    if (SrNoTblEmpCon == 0) {
                        SrNoTblEmpCon = 1;
                        v.add(SrNoTblEmpCon);                       
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));                       
                        modelSalDedEmpCon.addRow(v);
                        SrNoTblEmpCon++;
                    } else {
                        v.add(SrNoTblEmpCon);
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));    
                        modelSalDedEmpCon.addRow(v);
                        SrNoTblEmpCon++;
                    }                  
            }        
    }
    
    public void loadSalOthers(int EmpCode,int ISRNo) throws SQLException{
              
            String Statement = "select * from MS_EmpSalOthers where ISrNo ="+ ISRNo+" and Othe_Code<>-1 and  Empcode =" +EmpCode;
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            
            
            for(int i = modelSalOthers.getRowCount()-1;i>=0;i--){
                modelSalOthers.removeRow(i);                
            }
            SrNoSalOthers = 0;
            while(rsEmpLang.next()) {                 
                ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Othe_Code"));
                rsDisc.next();
                try{
                    Vector v = new Vector(3);
                    SrNoSalOthers++;
                    if (SrNoSalOthers <= 0) {                        
                        v.add(SrNoSalOthers);                    
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));     
                        v.add(new Float( rsEmpLang.getFloat("Percentage")));
                        modelSalOthers.addRow(v);                        
                    } else {
                        v.add(SrNoSalOthers);
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));    
                        v.add(new Float( rsEmpLang.getFloat("Percentage")));
                        modelSalOthers.addRow(v);                        
                    }
                }catch(Exception ex){
                    ex.printStackTrace();
                }   
            }
    }
    
    public void loadSalOthersOld(int EmpCode) throws SQLException{
              
            String Statement = "select * from MS_EmpSalOthers where ISrNo =(Select max(ISrNo) from Ms_EmpEarnings where Empcode =" +EmpCode+")and  Empcode =" +EmpCode;
            ResultSet rsEmpLang = con.createStatement().executeQuery(Statement);            

            for(int i = modelSalOthers.getRowCount()-1;i>=0;i--){
                modelSalOthers.removeRow(i);
                SrNoSalOthers--;
            }
            while(rsEmpLang.next()) {
                ResultSet rsDisc =  con.createStatement().executeQuery("select Er_Discription from  Ms_Ern_Ded where Er_Ded_Code=" +rsEmpLang.getInt("Othe_Code"));
                rsDisc.next();
                    Vector v = new Vector(3);
                    if (SrNoSalOthers == 0) {
                        SrNoSalOthers = 1;
                        v.add(SrNoSalOthers);                    
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));     
                        v.add(new Float( rsEmpLang.getFloat("Percentage")));
                        modelSalOthers.addRow(v);
                        SrNoSalOthers++;
                    } else {
                        v.add(SrNoSalOthers);
                        v.add(rsDisc.getString("Er_Discription"));
                        v.add(new Integer(rsEmpLang.getInt("Amount")));    
                        v.add(new Float( rsEmpLang.getFloat("Percentage")));
                        modelSalOthers.addRow(v);
                        SrNoSalOthers++;
                    }                  
            }
        
    }
    
    public void loadCompanyProviding() throws SQLException{
        chkAccomodation.setSelected(new Boolean(rsloadedCopmProv.getString("Accomdation")));        
        chkPhonComp.setSelected(new Boolean(rsloadedCopmProv.getString("Phone")));
        chkFood.setSelected(new Boolean( rsloadedCopmProv.getString("Food")));
        chkMobile.setSelected (new Boolean(rsloadedCopmProv.getString("Mobile")));
        chkInternet.setSelected(new Boolean( rsloadedCopmProv.getString("Internet")));                  
        chkFuel.setSelected(new Boolean( rsloadedCopmProv.getString("Fuel")));
        chkSimCard.setSelected(new Boolean(rsloadedCopmProv.getString("SimCard")));
        chkMobileBill.setSelected(new Boolean( rsloadedCopmProv.getString("MobBill")));
        chk2WheelComp.setSelected(new Boolean( rsloadedCopmProv.getString("Two_Wheeler")));
        chk4WheelComp.setSelected(new Boolean( rsloadedCopmProv.getString("Four_Wheeler")));
    }
    
    /*public void getTotal() {
        int intBasic = 0, intHRA = 0;
        try {
            intBasic = Integer.parseInt(txtBasic.getText());
        } catch (NumberFormatException e) {
        }
        try {
            intHRA = Integer.parseInt(txtHRA.getText());
        } catch (NumberFormatException e) {
        }
        txtGrossSal.setText(intHRA + intBasic + "");
    }*/

    public void delEmpSal() throws SQLException {
        String myStatement = "delete from  Empl_Sal_Structure where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        System.out.println("  " + myStatement);
        int num = con.prepareStatement(myStatement).executeUpdate();
        System.out.println("Rows Affected : " + num);        
    }

    public void delEmpDetails() throws SQLException {
        String myStatement = "delete from  Emp_ContactFull where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        System.out.println("  " + myStatement);
        int num =  con.prepareStatement(myStatement).executeUpdate();         
    }

    public void delEmpLanguage() throws SQLException {
        String myStatement = "delete from  Emp_Language where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        System.out.println("  " + myStatement);
        PreparedStatement state = con.prepareStatement(myStatement);
        int num = state.executeUpdate();
        System.out.println("Rows Affected : " + num);           
    }

    public void delEmpCompDetails() throws SQLException {
        String myStatement = "delete from  Emp_CompDet where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        //try {
            PreparedStatement state = con.prepareStatement(myStatement);
            int num = state.executeUpdate();
            System.out.println("Rows Affected : " + num);
            //JOptionPane.showMessageDialog(this, " Record Deleted . . . ! ");
        /*} catch (SQLException ex) {
            System.out.println("Exception in SQL DATE");
            System.out.println("Message : " + ex.getMessage());
            System.out.println("Error Code: " + ex.getErrorCode());
            ex.printStackTrace();
        } catch (java.lang.NullPointerException e) {
            e.printStackTrace();
        }*/
    }

    public void delEmpRef() throws SQLException {
        String myStatement = "delete from  Emp_Ref where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        //try {
            PreparedStatement state = con.prepareStatement(myStatement);
            int num = state.executeUpdate();
            System.out.println("Rows Affected : " + num);
         //   JOptionPane.showMessageDialog(this, " Record Deleted . . . ! ");
        /*} catch (SQLException ex) {
            System.out.println("Exception in SQL DATE");
            System.out.println("Message : " + ex.getMessage());
            System.out.println("Error Code: " + ex.getErrorCode());
            ex.printStackTrace();
        } catch (java.lang.NullPointerException e) {
            e.printStackTrace();
        }*/
    }

    public void delEmpFamily() throws SQLException {
        String myStatement = "Delete from  Emp_FamilyDet where EmpCode=" + lblEmpCode.getText();//+ " And SrNo=(Select max(SrNo) from Empl_Sal_Structure Where EmpCode=" + lblEmpCode.getText()+")";
        //try {
            PreparedStatement state = con.prepareStatement(myStatement);
            int num = state.executeUpdate();
            System.out.println("Rows Affected : " + num);
         //   JOptionPane.showMessageDialog(this, " Record Deleted . . . ! ");
        /*} catch (SQLException ex) {
            System.out.println("Exception in SQL DATE");
            System.out.println("Message : " + ex.getMessage());
            System.out.println("Error Code: " + ex.getErrorCode());
            ex.printStackTrace();
        } catch (java.lang.NullPointerException e) {
            e.printStackTrace();
        }*/
    }
    
    private void delSalary() throws SQLException {
        //try {
                String str =  " delete from Ms_EmpDeduction where EmpCode="+lblEmpCode.getText()  ;
                Statement state = con.createStatement();
                state.addBatch(str) ;              
                str  =  " delete from Ms_EmpEarnings where EmpCode="+lblEmpCode.getText() ;
                state.addBatch(str);
                str  =  " delete from Ms_EmpContribution where EmpCode="+lblEmpCode.getText()  ;
                state.addBatch(str);
                str  =  " delete from MS_EmpSalOthers where EmpCode="+lblEmpCode.getText()  ;
                state.addBatch(str);
                System.out.println(state.executeBatch().length);            
        /*} catch (Exception exception) {
            exception.printStackTrace();
        }*/
    }
    
    private void delMaxSalary() throws SQLException {
        int maxSrno =0;        
        String str =  "Select max(ISrNo) as SrNo from Ms_EmpEarnings where EmpCode= "+lblEmpCode.getText()  ;
        ResultSet maxSrSet = Execute.ExecuteMyQeury(con, str);
        maxSrSet.next();
        maxSrno = maxSrSet.getInt("SrNO");

        Statement state = con.createStatement();
        str =  " delete from Ms_EmpDeduction where EmpCode="+lblEmpCode.getText()+" and  ISrNO = "+maxSrno;
        state.addBatch(str) ;              
        str  =  " delete from Ms_EmpEarnings where EmpCode="+lblEmpCode.getText()+" and  ISrNO = "+maxSrno;                
        state.addBatch(str);
        str  =  " delete from Ms_EmpContribution where EmpCode="+lblEmpCode.getText()+" and  ISrNO = "+maxSrno;                
        state.addBatch(str);
        str  =  " delete from MS_EmpSalOthers where EmpCode="+lblEmpCode.getText()  +" and  ISrNO = "+maxSrno;                
        state.addBatch(str);
        state.executeBatch();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnCancel = new design.MHLButton();
        btnDelete = new design.MHLButton();
        btnSaveNew = new design.MHLButton();
        btnEdit = new design.MHLButton();
        btnNew = new design.MHLButton();
        btnLast = new design.MHLButton();
        btnNext = new design.MHLButton();
        btnPrev = new design.MHLButton();
        btnFirst = new design.MHLButton();
        chkIsActive = new javax.swing.JCheckBox();
        btnReport = new design.MHLButton();
        btnSearch = new design.MHLButton();
        pnlEmpHdr = new javax.swing.JPanel();
        txtFName = new design.MHLTextField(true);
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel95 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel96 = new javax.swing.JLabel();
        txtSName = new design.MHLTextField(true);
        javax.swing.JLabel jLabel97 = new javax.swing.JLabel();
        txtLName = new design.MHLTextField(true);
        lblEmpCode = new javax.swing.JLabel();
        tbdEmpDet = new javax.swing.JTabbedPane();
        pnlPersonalDet = new design.MHLPanelWithBorder();
        pnlAdd_personal = new javax.swing.JPanel();
        javax.swing.JLabel jLabel64 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel65 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel66 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAddressM = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel67 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel68 = new javax.swing.JLabel();
        txtEmailM = new design.MHLTextField();
        javax.swing.JLabel jLabel69 = new javax.swing.JLabel();
        txtFHGName = new design.MHLTextField();
        javax.swing.JLabel jLabel70 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel71 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel72 = new javax.swing.JLabel();
        txtBirthPlace = new design.MHLTextField();
        javax.swing.JLabel jLabel73 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel74 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel75 = new javax.swing.JLabel();
        chkMarriege = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel76 = new javax.swing.JLabel();
        txtChildren = new javax.swing.JTextField();
        javax.swing.JLabel jLabel47 = new javax.swing.JLabel();
        txtRelation = new design.MHLTextField();
        cboSex = new design.MHLComboBox();
        cboBgrp = new design.MHLComboBox();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        cboNationality = new design.MHLComboBox();
        cboReligion = new design.MHLComboBox();
        javax.swing.JLabel jLabel83 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel84 = new javax.swing.JLabel();
        cboStateM = new design.MHLComboBox();
        txtPinM = new design.MHLTextField();
        txtStdM = new design.MHLTextField();
        txtPhoneM = new design.MHLTextField();
        txtMobileM = new design.MHLTextField();
        txtCityM = new design.MHLTextField();
        jSeparator1 = new javax.swing.JSeparator();
        dtMarriageDate = new AdvDate.AdvDatePnl();
        dtDOB = new AdvDate.AdvDatePnl();
        pnlCompDet_pesonal = new javax.swing.JPanel();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        cboDesignation = new design.MHLComboBox();
        cboCategory = new design.MHLComboBox();
        cboDept = new design.MHLComboBox();
        chkExEmp = new javax.swing.JCheckBox();
        chkProbation = new javax.swing.JCheckBox();
        chkContract = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        chkTrainee = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel54 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel55 = new javax.swing.JLabel();
        cboWeekOff = new design.MHLComboBox();
        chkDeptHead = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel56 = new javax.swing.JLabel();
        cboCompany = new design.MHLComboBox();
        javax.swing.JLabel jLabel57 = new javax.swing.JLabel();
        cboShift = new design.MHLComboBox();
        javax.swing.JLabel jLabel58 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel59 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel62 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        javax.swing.JLabel jLabel82 = new javax.swing.JLabel();
        txtPerpath = new javax.swing.JTextField();
        btnImg = new design.MHLButton();
        txtPunch = new javax.swing.JTextField();
        cboBranch = new design.MHLComboBox();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        dtDoj = new AdvDate.AdvDatePnl();
        dtCoj = new AdvDate.AdvDatePnl();
        dtExDoj = new AdvDate.AdvDatePnl();
        dtExLeaveDate = new AdvDate.AdvDatePnl();
        dtProbFrom = new AdvDate.AdvDatePnl();
        dtProbToDate = new AdvDate.AdvDatePnl();
        dtContFrom = new AdvDate.AdvDatePnl();
        dtContToDate = new AdvDate.AdvDatePnl();
        dtConfirmDate = new AdvDate.AdvDatePnl();
        cboReporting = new Others.SearchCombo();
        pnlSal_Ben = new design.MHLPanelWithBorder();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        tbdSalType = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnAddEarnings = new design.MHLButton();
        btnRemEarnings = new design.MHLButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblSalEarnings = new design.MHLTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnAddDed = new design.MHLButton();
        btnRemDed = new design.MHLButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new design.MHLTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblSalDeduction = new design.MHLTable();
        txtsumDed = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblSalDedEmpCon = new design.MHLTable();
        txtSumEmpCon = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        btnAddEmpCon = new design.MHLButton();
        btnRemEmpCon = new design.MHLButton();
        tbdOthers = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblSalOthers = new design.MHLTable();
        btnAddOthers = new javax.swing.JButton();
        btnRemOthers = new javax.swing.JButton();
        txtSumOthers = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        chkPFYN = new javax.swing.JCheckBox();
        btnCalc = new design.MHLButton();
        SalType = new javax.swing.JPanel();
        rdoManual = new design.MHLRadioButton();
        rdoAuto = new design.MHLRadioButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblNetSalDet = new design.MHLTable();
        dtEffectDate = new AdvDate.AdvDatePnl();
        pnlSalAccounts = new javax.swing.JPanel();
        javax.swing.JLabel jLabel43 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel42 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel41 = new javax.swing.JLabel();
        txtPFAccNo = new design.MHLTextField();
        txtPPFAccNo = new design.MHLTextField();
        txtFamilyAccNo = new design.MHLTextField();
        txtESICAccNo = new design.MHLTextField();
        javax.swing.JLabel jLabel61 = new javax.swing.JLabel();
        txtRentPaid = new design.MHLTextField();
        javax.swing.JLabel lblrentpaid = new javax.swing.JLabel();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        tblBankAccDet = new design.MHLTable();
        javax.swing.JButton btnBankNameAdd = design.MHLButton.getSimpleButton();
        javax.swing.JButton btnRemoveAcc = design.MHLButton.getSimpleButton();
        pnlExp_Qual = new design.MHLPanelWithBorder();
        jPanel15 = new javax.swing.JPanel();
        btnAddExp = new design.MHLButton();
        btnRemExp = new design.MHLButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblExperinceDetails = new design.MHLTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblQualification = new design.MHLTable();
        btnQualification = new design.MHLButton();
        btnRemQual = new design.MHLButton();
        pnlFamilyDet = new design.MHLPanelWithBorder();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblFamily = new design.MHLTable();
        btnAddFamily = new design.MHLButton();
        btnRemFamily = new design.MHLButton();
        pnlReference1 = new javax.swing.JPanel();
        jScrollRef1 = new javax.swing.JScrollPane();
        tblRef = new design.MHLTable();
        btnAddRef = new design.MHLButton();
        btnRemRef = new design.MHLButton();
        pnlLanguage1 = new javax.swing.JPanel();
        btnAddLanguage = new design.MHLButton();
        btnRemLanguage = new design.MHLButton();
        Scrl_language1 = new javax.swing.JScrollPane();
        tblLanguage = new design.MHLTable();
        pnlFullDet = new design.MHLPanelWithBorder();
        javax.swing.JPanel pnlAdd_Full = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddressP = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel77 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel78 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel79 = new javax.swing.JLabel();
        txtCityP = new design.MHLTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel48 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel49 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel50 = new javax.swing.JLabel();
        txtIdmark = new design.MHLTextField();
        txtPan = new design.MHLTextField();
        txtPassport = new design.MHLTextField();
        txtDrivingLicNo = new design.MHLTextField();
        txtDocDetails = new design.MHLTextField();
        javax.swing.JSeparator jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        javax.swing.JLabel jLabel51 = new javax.swing.JLabel();
        cboHouse = new design.MHLComboBox();
        chk2Wheelar = new javax.swing.JCheckBox();
        chk4Wheelar = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel52 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel53 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel63 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel80 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel81 = new javax.swing.JLabel();
        cboEyeColor = new design.MHLComboBox();
        cboStateP = new design.MHLComboBox();
        txtStdP = new design.MHLTextField();
        txtPinP1 = new design.MHLTextField();
        txtPhoneP = new design.MHLTextField();
        txtMobileP = new design.MHLTextField();
        txtHeight = new design.MHLTextField();
        txtWeight = new design.MHLTextField();
        txt2WheelarNo = new design.MHLTextField();
        txt4WheelarNo = new design.MHLTextField();
        javax.swing.JPanel jPanel17 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel85 = new javax.swing.JLabel();
        txtInterviewPre = new design.MHLTextField();
        javax.swing.JLabel jLabel86 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel87 = new javax.swing.JLabel();
        txtRemarksPre = new design.MHLTextField();
        dtInterviewPre = new AdvDate.AdvDatePnl();
        jPanel22 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel88 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel89 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel90 = new javax.swing.JLabel();
        txtRemarksFinal = new design.MHLTextField();
        cboInterviewFinal = new design.MHLComboBox();
        dtInterviewFinal = new AdvDate.AdvDatePnl();
        panelComProv = new javax.swing.JPanel();
        chkAccomodation = new javax.swing.JCheckBox();
        chkFood = new javax.swing.JCheckBox();
        chkMobile = new javax.swing.JCheckBox();
        chkSimCard = new javax.swing.JCheckBox();
        chkMobileBill = new javax.swing.JCheckBox();
        chk2WheelComp = new javax.swing.JCheckBox();
        chk4WheelComp = new javax.swing.JCheckBox();
        chkFuel = new javax.swing.JCheckBox();
        chkPhonComp = new javax.swing.JCheckBox();
        chkInternet = new javax.swing.JCheckBox();
        jPanel24 = new javax.swing.JPanel();
        lblThumb = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        lblSign = new javax.swing.JLabel();
        jLabel94 = new javax.swing.JLabel();
        txtSign = new design.MHLTextField();
        txtThumb = new design.MHLTextField();

        setBackground(new java.awt.Color(255, 102, 153));
        setPreferredSize(new java.awt.Dimension(900, 695));

        pnlMain.setOpaque(false);

        pnlButtons.setBackground(new java.awt.Color(255, 153, 204));
        pnlButtons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        pnlButtons.setOpaque(false);
        pnlButtons.setLayout(null);

        btnCancel.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnCancel.setText("Cancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCancel);
        btnCancel.setBounds(580, 10, 80, 25);

        btnDelete.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnDelete.setText("Delete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);
        btnDelete.setBounds(500, 10, 80, 25);

        btnSaveNew.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnSaveNew.setText("Save"); // NOI18N
        btnSaveNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveNewActionPerformed(evt);
            }
        });
        pnlButtons.add(btnSaveNew);
        btnSaveNew.setBounds(420, 10, 80, 25);

        btnEdit.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnEdit.setText("Edit"); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        pnlButtons.add(btnEdit);
        btnEdit.setBounds(340, 10, 80, 25);

        btnNew.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNew);
        btnNew.setBounds(260, 10, 80, 25);

        btnLast.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnLast.setText(">>"); // NOI18N
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);
        btnLast.setBounds(200, 10, 60, 25);

        btnNext.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnNext.setText(">"); // NOI18N
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);
        btnNext.setBounds(140, 10, 60, 25);

        btnPrev.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnPrev.setText("<"); // NOI18N
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);
        btnPrev.setBounds(80, 10, 60, 25);

        btnFirst.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnFirst.setForeground(new java.awt.Color(0, 0, 153));
        btnFirst.setText("<<"); // NOI18N
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);
        btnFirst.setBounds(20, 10, 60, 25);

        chkIsActive.setBackground(new java.awt.Color(255, 153, 204));
        chkIsActive.setForeground(new java.awt.Color(0, 153, 0));
        chkIsActive.setSelected(true);
        chkIsActive.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkIsActive.setEnabled(false);
        chkIsActive.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkIsActive.setOpaque(false);
        chkIsActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIsActiveActionPerformed(evt);
            }
        });
        pnlButtons.add(chkIsActive);
        chkIsActive.setBounds(820, 10, 20, 20);

        btnReport.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnReport.setText("Report"); // NOI18N
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });
        pnlButtons.add(btnReport);
        btnReport.setBounds(740, 10, 70, 25);

        btnSearch.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnSearch.setText("Search"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlButtons.add(btnSearch);
        btnSearch.setBounds(660, 10, 80, 25);

        pnlEmpHdr.setBackground(new java.awt.Color(255, 204, 204));
        pnlEmpHdr.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 3)));
        pnlEmpHdr.setOpaque(false);
        pnlEmpHdr.setLayout(null);

        txtFName.setDocument(Execute.getDocument(30,false));
        txtFName.setFont(new java.awt.Font("Bookman Old Style", 1, 12));
        txtFName.setForeground(new java.awt.Color(0, 0, 204));
        txtFName.setAlignmentX(5.0F);
        txtFName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 0)));
        txtFName.setMargin(new java.awt.Insets(3, 2, 2, 2));
        txtFName.setNextFocusableComponent(txtSName);
        pnlEmpHdr.add(txtFName);
        txtFName.setBounds(250, 10, 150, 25);

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel1.setText("Emp_Code :"); // NOI18N
        pnlEmpHdr.add(jLabel1);
        jLabel1.setBounds(20, 10, 70, 20);

        jLabel95.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel95.setText("F_Name :"); // NOI18N
        pnlEmpHdr.add(jLabel95);
        jLabel95.setBounds(190, 10, 60, 20);

        jLabel96.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel96.setText("S_Name :"); // NOI18N
        pnlEmpHdr.add(jLabel96);
        jLabel96.setBounds(420, 10, 60, 20);

        txtSName.setDocument(Execute.getDocument(30,false));
        txtSName.setFont(new java.awt.Font("Tahoma", 1, 12));
        txtSName.setForeground(new java.awt.Color(0, 0, 204));
        txtSName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 0)));
        txtSName.setNextFocusableComponent(txtLName);
        pnlEmpHdr.add(txtSName);
        txtSName.setBounds(480, 10, 130, 25);

        jLabel97.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel97.setText("L_Name :"); // NOI18N
        pnlEmpHdr.add(jLabel97);
        jLabel97.setBounds(620, 10, 60, 20);

        txtLName.setDocument(Execute.getDocument(30,false));
        txtLName.setFont(new java.awt.Font("Tahoma", 1, 12));
        txtLName.setForeground(new java.awt.Color(0, 0, 204));
        txtLName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 0)));
        txtLName.setNextFocusableComponent(txtAddressM);
        pnlEmpHdr.add(txtLName);
        txtLName.setBounds(680, 10, 140, 25);

        lblEmpCode.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblEmpCode.setForeground(new java.awt.Color(0, 0, 204));
        pnlEmpHdr.add(lblEmpCode);
        lblEmpCode.setBounds(110, 10, 60, 20);

        tbdEmpDet.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        tbdEmpDet.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbdEmpDetStateChanged(evt);
            }
        });

        pnlPersonalDet.setOpaque(false);

        pnlAdd_personal.setBackground(new java.awt.Color(255, 204, 204));
        pnlAdd_personal.setOpaque(false);
        pnlAdd_personal.setLayout(null);

        jLabel64.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel64.setForeground(new java.awt.Color(153, 0, 0));
        jLabel64.setText("Address :"); // NOI18N
        pnlAdd_personal.add(jLabel64);
        jLabel64.setBounds(10, 10, 80, 20);

        jLabel65.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel65.setForeground(new java.awt.Color(153, 0, 0));
        jLabel65.setText("City :"); // NOI18N
        pnlAdd_personal.add(jLabel65);
        jLabel65.setBounds(10, 70, 50, 20);

        jLabel66.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel66.setForeground(new java.awt.Color(153, 0, 0));
        jLabel66.setText("State / Pin :"); // NOI18N
        pnlAdd_personal.add(jLabel66);
        jLabel66.setBounds(10, 100, 80, 20);

        txtAddressM.setColumns(20);
        txtAddressM.setDocument(Execute.getDocument(249,false));
        txtAddressM.setLineWrap(true);
        txtAddressM.setRows(5);
        txtAddressM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtAddressM.setNextFocusableComponent(txtCityM);
        txtAddressM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressMKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(txtAddressM);

        pnlAdd_personal.add(jScrollPane4);
        jScrollPane4.setBounds(100, 10, 250, 50);

        jLabel67.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel67.setForeground(new java.awt.Color(153, 0, 0));
        jLabel67.setText("Contact P/M :"); // NOI18N
        pnlAdd_personal.add(jLabel67);
        jLabel67.setBounds(10, 150, 90, 20);

        jLabel68.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel68.setForeground(new java.awt.Color(153, 0, 0));
        jLabel68.setText("Email Id :"); // NOI18N
        pnlAdd_personal.add(jLabel68);
        jLabel68.setBounds(10, 180, 70, 20);

        txtEmailM.setDocument(Execute.getDocument(30,false));
        txtEmailM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtEmailM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmailMKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailMKeyReleased(evt);
            }
        });
        pnlAdd_personal.add(txtEmailM);
        txtEmailM.setBounds(100, 180, 250, 22);

        jLabel69.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel69.setForeground(new java.awt.Color(153, 0, 0));
        jLabel69.setText("F/H/G/ Name "); // NOI18N
        pnlAdd_personal.add(jLabel69);
        jLabel69.setBounds(10, 210, 100, 20);

        txtFHGName.setDocument(Execute.getDocument(50,false));
        txtFHGName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtFHGName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFHGNameKeyPressed(evt);
            }
        });
        pnlAdd_personal.add(txtFHGName);
        txtFHGName.setBounds(100, 210, 250, 22);

        jLabel70.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel70.setForeground(new java.awt.Color(153, 0, 0));
        jLabel70.setText("Sex :"); // NOI18N
        pnlAdd_personal.add(jLabel70);
        jLabel70.setBounds(210, 270, 50, 20);

        jLabel71.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel71.setForeground(new java.awt.Color(153, 0, 0));
        jLabel71.setText("B Group :"); // NOI18N
        pnlAdd_personal.add(jLabel71);
        jLabel71.setBounds(210, 300, 60, 20);

        jLabel72.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel72.setForeground(new java.awt.Color(153, 0, 0));
        jLabel72.setText("Birth Place :"); // NOI18N
        pnlAdd_personal.add(jLabel72);
        jLabel72.setBounds(10, 270, 80, 20);

        txtBirthPlace.setDocument(Execute.getDocument(30,false));
        txtBirthPlace.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtBirthPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthPlaceActionPerformed(evt);
            }
        });
        txtBirthPlace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBirthPlaceKeyPressed(evt);
            }
        });
        pnlAdd_personal.add(txtBirthPlace);
        txtBirthPlace.setBounds(100, 270, 100, 22);

        jLabel73.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel73.setForeground(new java.awt.Color(153, 0, 0));
        jLabel73.setText("DOB :"); // NOI18N
        pnlAdd_personal.add(jLabel73);
        jLabel73.setBounds(10, 330, 40, 20);

        jLabel74.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel74.setForeground(new java.awt.Color(153, 0, 0));
        jLabel74.setText("(Present)"); // NOI18N
        pnlAdd_personal.add(jLabel74);
        jLabel74.setBounds(10, 30, 60, 14);

        jLabel75.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel75.setForeground(new java.awt.Color(153, 0, 0));
        jLabel75.setText("Marriage Date:"); // NOI18N
        pnlAdd_personal.add(jLabel75);
        jLabel75.setBounds(10, 360, 90, 20);

        chkMarriege.setBackground(new java.awt.Color(255, 204, 204));
        chkMarriege.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        chkMarriege.setForeground(new java.awt.Color(153, 0, 0));
        chkMarriege.setText("Married :"); // NOI18N
        chkMarriege.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkMarriege.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkMarriege.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkMarriege.setIconTextGap(10);
        chkMarriege.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkMarriege.setNextFocusableComponent(btnAddRef);
        chkMarriege.setOpaque(false);
        chkMarriege.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkMarriegeItemStateChanged(evt);
            }
        });
        chkMarriege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMarriegeActionPerformed(evt);
            }
        });
        pnlAdd_personal.add(chkMarriege);
        chkMarriege.setBounds(210, 330, 90, 20);

        jLabel76.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel76.setForeground(new java.awt.Color(153, 0, 0));
        jLabel76.setText("Children :"); // NOI18N
        pnlAdd_personal.add(jLabel76);
        jLabel76.setBounds(210, 360, 60, 20);

        txtChildren.setDocument(Execute.getDocument(2,true));
        txtChildren.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtChildren.setEnabled(false);
        txtChildren.setNextFocusableComponent(btnAddRef);
        txtChildren.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChildrenKeyPressed(evt);
            }
        });
        pnlAdd_personal.add(txtChildren);
        txtChildren.setBounds(280, 360, 70, 22);

        jLabel47.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel47.setForeground(new java.awt.Color(153, 0, 0));
        jLabel47.setText("Relation :"); // NOI18N
        pnlAdd_personal.add(jLabel47);
        jLabel47.setBounds(10, 240, 80, 20);

        txtRelation.setDocument(Execute.getDocument(30,false));
        txtRelation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtRelation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRelationKeyPressed(evt);
            }
        });
        pnlAdd_personal.add(txtRelation);
        txtRelation.setBounds(100, 240, 100, 22);

        cboSex.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboSex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Male", "Female" }));
        cboSex.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cboSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSexActionPerformed(evt);
            }
        });
        pnlAdd_personal.add(cboSex);
        cboSex.setBounds(270, 270, 80, 22);

        cboBgrp.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboBgrp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "A +ve", "A -ve", "B +ve", "B -ve", "AB +ve", "AB -ve", "O +ve", "O -ve", "NA" }));
        cboBgrp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(cboBgrp);
        cboBgrp.setBounds(270, 300, 80, 22);

        jLabel7.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Mobile"); // NOI18N
        pnlAdd_personal.add(jLabel7);
        jLabel7.setBounds(280, 130, 60, 15);

        jLabel8.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Phone"); // NOI18N
        pnlAdd_personal.add(jLabel8);
        jLabel8.setBounds(180, 130, 40, 15);

        jLabel9.setBackground(new java.awt.Color(204, 51, 0));
        jLabel9.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel9.setForeground(new java.awt.Color(153, 0, 0));
        jLabel9.setText("STD"); // NOI18N
        pnlAdd_personal.add(jLabel9);
        jLabel9.setBounds(110, 130, 30, 15);

        cboNationality.setEditable(true);
        cboNationality.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboNationality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Indian", "Other" }));
        cboNationality.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(cboNationality);
        cboNationality.setBounds(100, 300, 100, 22);

        cboReligion.setEditable(true);
        cboReligion.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboReligion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Hindu", "Jain", "Muslim", "Cristian", "Sikh", "Parsi", "Other" }));
        cboReligion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cboReligion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboReligionKeyPressed(evt);
            }
        });
        pnlAdd_personal.add(cboReligion);
        cboReligion.setBounds(270, 240, 80, 22);

        jLabel83.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel83.setForeground(new java.awt.Color(153, 0, 0));
        jLabel83.setText("Religion :"); // NOI18N
        pnlAdd_personal.add(jLabel83);
        jLabel83.setBounds(210, 240, 60, 20);

        jLabel84.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel84.setForeground(new java.awt.Color(153, 0, 0));
        jLabel84.setText("Nationality :"); // NOI18N
        pnlAdd_personal.add(jLabel84);
        jLabel84.setBounds(10, 300, 90, 20);

        cboStateM.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboStateM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        cboStateM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(cboStateM);
        cboStateM.setBounds(100, 100, 150, 22);

        txtPinM.setDocument(Execute.getDocument(8,true));
        txtPinM.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 0), 1, true));
        pnlAdd_personal.add(txtPinM);
        txtPinM.setBounds(260, 100, 90, 22);

        txtStdM.setDocument(Execute.getDocument(4,true));
        txtStdM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(txtStdM);
        txtStdM.setBounds(100, 150, 50, 22);

        txtPhoneM.setDocument(Execute.getDocument(10,true));
        txtPhoneM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(txtPhoneM);
        txtPhoneM.setBounds(160, 150, 90, 22);

        txtMobileM.setDocument(Execute.getDocument(10,true));
        txtMobileM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(txtMobileM);
        txtMobileM.setBounds(260, 150, 90, 22);

        txtCityM.setDocument(Execute.getDocument(30,false));
        txtCityM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_personal.add(txtCityM);
        txtCityM.setBounds(100, 70, 250, 20);

        jSeparator1.setBackground(new java.awt.Color(153, 0, 0));
        pnlAdd_personal.add(jSeparator1);
        jSeparator1.setBounds(0, 450, 340, 10);
        pnlAdd_personal.add(dtMarriageDate);
        dtMarriageDate.setBounds(100, 360, 95, 23);
        pnlAdd_personal.add(dtDOB);
        dtDOB.setBounds(100, 330, 95, 23);

        pnlCompDet_pesonal.setBackground(new java.awt.Color(255, 204, 204));
        pnlCompDet_pesonal.setOpaque(false);
        pnlCompDet_pesonal.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                pnlCompDet_pesonalAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        pnlCompDet_pesonal.setLayout(null);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel15.setForeground(new java.awt.Color(153, 0, 0));
        jLabel15.setText("Dept. :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel15);
        jLabel15.setBounds(20, 80, 50, 20);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel16.setForeground(new java.awt.Color(153, 0, 0));
        jLabel16.setText("Desig. :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel16);
        jLabel16.setBounds(20, 110, 50, 20);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel17.setForeground(new java.awt.Color(153, 0, 0));
        jLabel17.setText("Category :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel17);
        jLabel17.setBounds(10, 140, 60, 20);

        cboDesignation.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboDesignation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboDesignation);
        cboDesignation.setBounds(80, 110, 190, 20);

        cboCategory.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboCategory);
        cboCategory.setBounds(80, 140, 190, 22);

        cboDept.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboDept);
        cboDept.setBounds(80, 80, 190, 22);

        chkExEmp.setBackground(new java.awt.Color(255, 204, 102));
        chkExEmp.setFont(new java.awt.Font("Tahoma", 1, 11));
        chkExEmp.setForeground(new java.awt.Color(153, 0, 0));
        chkExEmp.setText("Is ExEmpl :"); // NOI18N
        chkExEmp.setToolTipText(""); // NOI18N
        chkExEmp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkExEmp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkExEmp.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkExEmp.setIconTextGap(28);
        chkExEmp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkExEmp.setOpaque(false);
        chkExEmp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkExEmpItemStateChanged(evt);
            }
        });
        pnlCompDet_pesonal.add(chkExEmp);
        chkExEmp.setBounds(30, 350, 110, 20);
        chkExEmp.getAccessibleContext().setAccessibleParent(pnlCompDet_pesonal);

        chkProbation.setBackground(new java.awt.Color(255, 204, 102));
        chkProbation.setFont(new java.awt.Font("Tahoma", 1, 11));
        chkProbation.setForeground(new java.awt.Color(153, 0, 0));
        chkProbation.setText("On Probation :"); // NOI18N
        chkProbation.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkProbation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkProbation.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkProbation.setIconTextGap(8);
        chkProbation.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkProbation.setOpaque(false);
        chkProbation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkProbationItemStateChanged(evt);
            }
        });
        pnlCompDet_pesonal.add(chkProbation);
        chkProbation.setBounds(30, 380, 110, 20);
        chkProbation.getAccessibleContext().setAccessibleParent(pnlCompDet_pesonal);

        chkContract.setBackground(new java.awt.Color(255, 204, 102));
        chkContract.setFont(new java.awt.Font("Tahoma", 1, 11));
        chkContract.setForeground(new java.awt.Color(153, 0, 0));
        chkContract.setText("On Contract :"); // NOI18N
        chkContract.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkContract.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkContract.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkContract.setIconTextGap(14);
        chkContract.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkContract.setOpaque(false);
        chkContract.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkContractItemStateChanged(evt);
            }
        });
        pnlCompDet_pesonal.add(chkContract);
        chkContract.setBounds(30, 410, 110, 20);
        chkContract.getAccessibleContext().setAccessibleParent(pnlCompDet_pesonal);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel14.setForeground(new java.awt.Color(153, 0, 0));
        jLabel14.setText("Ex DOJ :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel14);
        jLabel14.setBounds(140, 350, 50, 20);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel18.setForeground(new java.awt.Color(153, 0, 0));
        jLabel18.setText("From :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel18);
        jLabel18.setBounds(140, 410, 35, 20);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel20.setForeground(new java.awt.Color(153, 0, 0));
        jLabel20.setText("From :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel20);
        jLabel20.setBounds(140, 380, 35, 20);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel13.setForeground(new java.awt.Color(153, 0, 0));
        jLabel13.setText("COJ :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel13);
        jLabel13.setBounds(290, 320, 27, 20);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel19.setForeground(new java.awt.Color(153, 0, 0));
        jLabel19.setText("ToDate :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel19);
        jLabel19.setBounds(290, 380, 47, 20);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel21.setForeground(new java.awt.Color(153, 0, 0));
        jLabel21.setText("To Date :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel21);
        jLabel21.setBounds(290, 410, 50, 20);

        chkTrainee.setFont(new java.awt.Font("Tahoma", 1, 11));
        chkTrainee.setForeground(new java.awt.Color(153, 0, 0));
        chkTrainee.setText("Is Trainee :"); // NOI18N
        chkTrainee.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkTrainee.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkTrainee.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkTrainee.setIconTextGap(25);
        chkTrainee.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkTrainee.setOpaque(false);
        pnlCompDet_pesonal.add(chkTrainee);
        chkTrainee.setBounds(30, 320, 110, 20);

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel54.setForeground(new java.awt.Color(153, 0, 0));
        jLabel54.setText("Company :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel54);
        jLabel54.setBounds(10, 20, 60, 20);

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel55.setForeground(new java.awt.Color(153, 0, 0));
        jLabel55.setText("Shift :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel55);
        jLabel55.setBounds(20, 230, 50, 20);

        cboWeekOff.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboWeekOff.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "No WeekOff", "" }));
        pnlCompDet_pesonal.add(cboWeekOff);
        cboWeekOff.setBounds(80, 200, 190, 22);

        chkDeptHead.setFont(new java.awt.Font("Tahoma", 1, 11));
        chkDeptHead.setForeground(new java.awt.Color(153, 0, 0));
        chkDeptHead.setText("Dept Head : "); // NOI18N
        chkDeptHead.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkDeptHead.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkDeptHead.setIconTextGap(10);
        chkDeptHead.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkDeptHead.setOpaque(false);
        pnlCompDet_pesonal.add(chkDeptHead);
        chkDeptHead.setBounds(280, 50, 100, 20);

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel56.setForeground(new java.awt.Color(153, 0, 0));
        jLabel56.setText("Reporting :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel56);
        jLabel56.setBounds(10, 170, 70, 20);

        cboCompany.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboCompany.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboCompany);
        cboCompany.setBounds(80, 20, 370, 22);

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel57.setForeground(new java.awt.Color(153, 0, 0));
        jLabel57.setText("Punch No :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel57);
        jLabel57.setBounds(280, 260, 60, 20);

        cboShift.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboShift);
        cboShift.setBounds(80, 230, 190, 22);

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel58.setForeground(new java.awt.Color(153, 0, 0));
        jLabel58.setText("DOJ :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel58);
        jLabel58.setBounds(140, 320, 28, 20);

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel59.setForeground(new java.awt.Color(153, 0, 0));
        jLabel59.setText("Ex L.Dt. :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel59);
        jLabel59.setBounds(290, 350, 60, 20);

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel62.setForeground(new java.awt.Color(153, 0, 0));
        jLabel62.setText("Week Off  :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel62);
        jLabel62.setBounds(10, 200, 70, 20);

        jSeparator6.setForeground(new java.awt.Color(153, 0, 0));
        pnlCompDet_pesonal.add(jSeparator6);
        jSeparator6.setBounds(20, 310, 430, 10);

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel82.setForeground(new java.awt.Color(153, 0, 0));
        jLabel82.setText("Confirm Date :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel82);
        jLabel82.setBounds(0, 260, 80, 20);

        txtPerpath.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));
        pnlCompDet_pesonal.add(txtPerpath);
        txtPerpath.setBounds(280, 230, 170, 20);

        btnImg.setText(" Add Photo"); // NOI18N
        btnImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImgActionPerformed(evt);
            }
        });
        pnlCompDet_pesonal.add(btnImg);
        btnImg.setBounds(280, 80, 170, 150);

        txtPunch.setDocument(Execute.getDocument(10,true));
        txtPunch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlCompDet_pesonal.add(txtPunch);
        txtPunch.setBounds(350, 260, 100, 20);

        cboBranch.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboBranch);
        cboBranch.setBounds(80, 50, 190, 22);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel22.setForeground(new java.awt.Color(153, 0, 0));
        jLabel22.setText("Branch :"); // NOI18N
        pnlCompDet_pesonal.add(jLabel22);
        jLabel22.setBounds(13, 50, 50, 20);

        jSeparator2.setBackground(new java.awt.Color(153, 0, 0));
        pnlCompDet_pesonal.add(jSeparator2);
        jSeparator2.setBounds(20, 450, 420, 10);
        pnlCompDet_pesonal.add(dtDoj);
        dtDoj.setBounds(190, 320, 95, 23);
        pnlCompDet_pesonal.add(dtCoj);
        dtCoj.setBounds(350, 320, 95, 23);
        pnlCompDet_pesonal.add(dtExDoj);
        dtExDoj.setBounds(190, 350, 95, 23);
        pnlCompDet_pesonal.add(dtExLeaveDate);
        dtExLeaveDate.setBounds(350, 350, 95, 23);
        pnlCompDet_pesonal.add(dtProbFrom);
        dtProbFrom.setBounds(190, 380, 95, 23);
        pnlCompDet_pesonal.add(dtProbToDate);
        dtProbToDate.setBounds(350, 380, 95, 23);
        pnlCompDet_pesonal.add(dtContFrom);
        dtContFrom.setBounds(190, 410, 95, 23);
        pnlCompDet_pesonal.add(dtContToDate);
        dtContToDate.setBounds(350, 410, 95, 23);
        pnlCompDet_pesonal.add(dtConfirmDate);
        dtConfirmDate.setBounds(80, 260, 100, 23);

        cboReporting.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboReporting.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        pnlCompDet_pesonal.add(cboReporting);
        cboReporting.setBounds(80, 170, 190, 22);

        org.jdesktop.layout.GroupLayout pnlPersonalDetLayout = new org.jdesktop.layout.GroupLayout(pnlPersonalDet);
        pnlPersonalDet.setLayout(pnlPersonalDetLayout);
        pnlPersonalDetLayout.setHorizontalGroup(
            pnlPersonalDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPersonalDetLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlAdd_personal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 361, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlCompDet_pesonal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 456, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPersonalDetLayout.setVerticalGroup(
            pnlPersonalDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPersonalDetLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPersonalDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlCompDet_pesonal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 470, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlAdd_personal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                .addContainerGap())
        );

        tbdEmpDet.addTab("      Personal Details      ", pnlPersonalDet);

        pnlSal_Ben.setOpaque(false);
        pnlSal_Ben.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(102, 204, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(null);

        jLabel31.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel31.setForeground(new java.awt.Color(153, 0, 0));
        jLabel31.setText("Effec. Date :"); // NOI18N
        jPanel3.add(jLabel31);
        jLabel31.setBounds(30, 60, 80, 20);

        tbdSalType.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204))));
        tbdSalType.setFont(new java.awt.Font("Bookman Old Style", 0, 11));

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 1, 2, new java.awt.Color(51, 153, 255)));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(null);

        btnAddEarnings.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnAddEarnings.setForeground(new java.awt.Color(153, 0, 0));
        btnAddEarnings.setText("Add"); // NOI18N
        btnAddEarnings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnAddEarnings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEarningsActionPerformed(evt);
            }
        });
        jPanel2.add(btnAddEarnings);
        btnAddEarnings.setBounds(80, 220, 100, 30);

        btnRemEarnings.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemEarnings.setForeground(new java.awt.Color(153, 0, 0));
        btnRemEarnings.setText("Remove"); // NOI18N
        btnRemEarnings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnRemEarnings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemEarningsActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemEarnings);
        btnRemEarnings.setBounds(190, 220, 100, 30);

        jScrollPane11.setBackground(new java.awt.Color(0, 102, 255));

        tblSalEarnings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 3));
        tblSalEarnings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Type", "Rs."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSalEarnings.setGridColor(new java.awt.Color(51, 102, 255));
        tblSalEarnings.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblSalEarningsFocusLost(evt);
            }
        });
        tblSalEarnings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalEarningsMouseClicked(evt);
            }
        });
        tblSalEarnings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblSalEarningsKeyTyped(evt);
            }
        });
        jScrollPane11.setViewportView(tblSalEarnings);
        tblSalEarnings.getColumnModel().getColumn(0).setResizable(false);
        tblSalEarnings.getColumnModel().getColumn(1).setResizable(false);
        tblSalEarnings.getColumnModel().getColumn(2).setResizable(false);

        jPanel2.add(jScrollPane11);
        jScrollPane11.setBounds(10, 10, 350, 190);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 30, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4);
        jPanel4.setBounds(210, 40, 100, 30);

        tbdSalType.addTab("Earnings", jPanel2);

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));
        jPanel5.setOpaque(false);
        jPanel5.setLayout(null);

        btnAddDed.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnAddDed.setForeground(new java.awt.Color(153, 0, 0));
        btnAddDed.setText("Add"); // NOI18N
        btnAddDed.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnAddDed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDedActionPerformed(evt);
            }
        });
        jPanel5.add(btnAddDed);
        btnAddDed.setBounds(60, 220, 100, 30);

        btnRemDed.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemDed.setForeground(new java.awt.Color(153, 0, 0));
        btnRemDed.setText("Remove"); // NOI18N
        btnRemDed.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnRemDed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemDedActionPerformed(evt);
            }
        });
        jPanel5.add(btnRemDed);
        btnRemDed.setBounds(170, 220, 100, 30);

        jTable1.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(570, 200, 160, 120);

        tblSalDeduction.setFont(new java.awt.Font("Bookman Old Style", 0, 11)); // NOI18N
        tblSalDeduction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Type", "Rs."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblSalDeduction.setGridColor(new java.awt.Color(51, 102, 255));
        tblSalDeduction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalDeductionMouseClicked(evt);
            }
        });
        tblSalDeduction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblSalDeductionKeyTyped(evt);
            }
        });
        jScrollPane9.setViewportView(tblSalDeduction);
        tblSalDeduction.getColumnModel().getColumn(0).setResizable(false);
        tblSalDeduction.getColumnModel().getColumn(0).setPreferredWidth(3);
        tblSalDeduction.getColumnModel().getColumn(1).setResizable(false);
        tblSalDeduction.getColumnModel().getColumn(2).setResizable(false);

        jPanel5.add(jScrollPane9);
        jScrollPane9.setBounds(10, 10, 350, 180);

        txtsumDed.setEditable(false);
        txtsumDed.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel5.add(txtsumDed);
        txtsumDed.setBounds(250, 190, 110, 20);

        jLabel36.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel36.setText("Total Rs:"); // NOI18N
        jPanel5.add(jLabel36);
        jLabel36.setBounds(190, 190, 60, 20);

        tbdSalType.addTab("Deduction", jPanel5);

        jPanel8.setBackground(new java.awt.Color(0, 153, 153));
        jPanel8.setOpaque(false);

        tblSalDedEmpCon.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        tblSalDedEmpCon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Type", "Rs."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblSalDedEmpCon.setGridColor(new java.awt.Color(51, 102, 255));
        tblSalDedEmpCon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalDedEmpConMouseClicked(evt);
            }
        });
        tblSalDedEmpCon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblSalDedEmpConKeyTyped(evt);
            }
        });
        jScrollPane10.setViewportView(tblSalDedEmpCon);
        tblSalDedEmpCon.getColumnModel().getColumn(0).setResizable(false);
        tblSalDedEmpCon.getColumnModel().getColumn(0).setPreferredWidth(3);
        tblSalDedEmpCon.getColumnModel().getColumn(1).setResizable(false);
        tblSalDedEmpCon.getColumnModel().getColumn(2).setResizable(false);

        txtSumEmpCon.setEditable(false);
        txtSumEmpCon.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSumEmpCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSumEmpConActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel37.setText("Total Rs:"); // NOI18N

        btnAddEmpCon.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnAddEmpCon.setForeground(new java.awt.Color(153, 0, 0));
        btnAddEmpCon.setText("Add"); // NOI18N
        btnAddEmpCon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnAddEmpCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmpConActionPerformed(evt);
            }
        });

        btnRemEmpCon.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemEmpCon.setForeground(new java.awt.Color(153, 0, 0));
        btnRemEmpCon.setText("Remove"); // NOI18N
        btnRemEmpCon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnRemEmpCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemEmpConActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap(191, Short.MAX_VALUE)
                        .add(jLabel37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtSumEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel8Layout.createSequentialGroup()
                                .add(72, 72, 72)
                                .add(btnAddEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(btnRemEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtSumEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemEmpCon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(69, 69, 69))
        );

        tbdSalType.addTab("Employers Cont.", jPanel8);

        tbdOthers.setBackground(new java.awt.Color(0, 153, 153));
        tbdOthers.setOpaque(false);

        tblSalOthers.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        tblSalOthers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Type", "Rs.", "Percentage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSalOthers.setGridColor(new java.awt.Color(51, 102, 255));
        tblSalOthers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalOthersMouseClicked(evt);
            }
        });
        tblSalOthers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSalOthersKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblSalOthersKeyTyped(evt);
            }
        });
        jScrollPane12.setViewportView(tblSalOthers);
        tblSalOthers.getColumnModel().getColumn(0).setResizable(false);
        tblSalOthers.getColumnModel().getColumn(0).setPreferredWidth(3);
        tblSalOthers.getColumnModel().getColumn(3).setPreferredWidth(30);

        btnAddOthers.setFont(new java.awt.Font("Bodoni MT Black", 1, 11));
        btnAddOthers.setForeground(new java.awt.Color(153, 0, 0));
        btnAddOthers.setText("Add"); // NOI18N
        btnAddOthers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnAddOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOthersActionPerformed(evt);
            }
        });

        btnRemOthers.setFont(new java.awt.Font("Bodoni MT Black", 1, 11));
        btnRemOthers.setForeground(new java.awt.Color(153, 0, 0));
        btnRemOthers.setText("Remove"); // NOI18N
        btnRemOthers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 255), 2));
        btnRemOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemOthersActionPerformed(evt);
            }
        });

        txtSumOthers.setEditable(false);
        txtSumOthers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel45.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        jLabel45.setText("Total Rs:"); // NOI18N

        org.jdesktop.layout.GroupLayout tbdOthersLayout = new org.jdesktop.layout.GroupLayout(tbdOthers);
        tbdOthers.setLayout(tbdOthersLayout);
        tbdOthersLayout.setHorizontalGroup(
            tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tbdOthersLayout.createSequentialGroup()
                .add(tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tbdOthersLayout.createSequentialGroup()
                        .addContainerGap(191, Short.MAX_VALUE)
                        .add(jLabel45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtSumOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(tbdOthersLayout.createSequentialGroup()
                        .add(tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbdOthersLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(tbdOthersLayout.createSequentialGroup()
                                .add(71, 71, 71)
                                .add(btnAddOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(btnRemOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tbdOthersLayout.setVerticalGroup(
            tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tbdOthersLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtSumOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbdOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tbdSalType.addTab("Others", tbdOthers);

        jPanel3.add(tbdSalType);
        tbdSalType.setBounds(20, 90, 380, 290);
        tbdSalType.getAccessibleContext().setAccessibleName("Earnings"); // NOI18N

        chkPFYN.setBackground(new java.awt.Color(102, 204, 255));
        chkPFYN.setFont(new java.awt.Font("Bookman Old Style", 1, 10)); // NOI18N
        chkPFYN.setForeground(new java.awt.Color(153, 0, 0));
        chkPFYN.setText("P.F. Y/N"); // NOI18N
        chkPFYN.setOpaque(false);
        chkPFYN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPFYNActionPerformed(evt);
            }
        });
        jPanel3.add(chkPFYN);
        chkPFYN.setBounds(210, 60, 70, 21);

        btnCalc.setFont(new java.awt.Font("Bookman Old Style", 0, 11)); // NOI18N
        btnCalc.setForeground(new java.awt.Color(102, 0, 102));
        btnCalc.setText("Calculate"); // NOI18N
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });
        jPanel3.add(btnCalc);
        btnCalc.setBounds(310, 60, 90, 23);

        SalType.setBackground(new java.awt.Color(51, 153, 255));
        SalType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));
        SalType.setForeground(new java.awt.Color(51, 153, 255));
        SalType.setOpaque(false);

        rdoManual.setBackground(new java.awt.Color(51, 153, 255));
        buttonGroup1.add(rdoManual);
        rdoManual.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        rdoManual.setForeground(new java.awt.Color(153, 0, 255));
        rdoManual.setText("Manual"); // NOI18N
        rdoManual.setOpaque(false);
        rdoManual.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdoManualItemStateChanged(evt);
            }
        });

        rdoAuto.setBackground(new java.awt.Color(51, 153, 255));
        buttonGroup1.add(rdoAuto);
        rdoAuto.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        rdoAuto.setForeground(new java.awt.Color(153, 0, 255));
        rdoAuto.setSelected(true);
        rdoAuto.setText("Auto"); // NOI18N
        rdoAuto.setOpaque(false);
        rdoAuto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdoAutoItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout SalTypeLayout = new org.jdesktop.layout.GroupLayout(SalType);
        SalType.setLayout(SalTypeLayout);
        SalTypeLayout.setHorizontalGroup(
            SalTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, SalTypeLayout.createSequentialGroup()
                .add(30, 30, 30)
                .add(rdoManual)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 176, Short.MAX_VALUE)
                .add(rdoAuto)
                .add(46, 46, 46))
        );
        SalTypeLayout.setVerticalGroup(
            SalTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SalTypeLayout.createSequentialGroup()
                .addContainerGap()
                .add(SalTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoAuto)
                    .add(rdoManual))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(SalType);
        SalType.setBounds(20, 10, 380, 40);

        tblNetSalDet.setFont(new java.awt.Font("Bookman Old Style", 0, 11)); // NOI18N
        tblNetSalDet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Float(0.0), new Float(0.0), new Float(0.0)}
            },
            new String [] {
                "Net Sal.", "Gross Sal.", "C.T.C."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tblNetSalDet);

        jPanel3.add(jScrollPane8);
        jScrollPane8.setBounds(20, 390, 380, 46);
        jPanel3.add(dtEffectDate);
        dtEffectDate.setBounds(110, 60, 95, 23);

        pnlSal_Ben.add(jPanel3);
        jPanel3.setBounds(40, 20, 420, 450);

        pnlSalAccounts.setBackground(new java.awt.Color(102, 204, 255));
        pnlSalAccounts.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 51, 255), 3), "  Accounts Details  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 51, 255))); // NOI18N
        pnlSalAccounts.setOpaque(false);
        pnlSalAccounts.setLayout(null);

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel43.setForeground(new java.awt.Color(153, 0, 0));
        jLabel43.setText("Family Account No :"); // NOI18N
        pnlSalAccounts.add(jLabel43);
        jLabel43.setBounds(20, 110, 110, 20);

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel42.setForeground(new java.awt.Color(153, 0, 0));
        jLabel42.setText("P P F Account No :"); // NOI18N
        pnlSalAccounts.add(jLabel42);
        jLabel42.setBounds(20, 50, 98, 20);

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel41.setForeground(new java.awt.Color(153, 0, 0));
        jLabel41.setText("P F Account No :"); // NOI18N
        pnlSalAccounts.add(jLabel41);
        jLabel41.setBounds(20, 20, 88, 20);

        txtPFAccNo.setDocument(Execute.getDocument(20,false));
        txtPFAccNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 51, 0)));
        pnlSalAccounts.add(txtPFAccNo);
        txtPFAccNo.setBounds(140, 20, 150, 23);

        txtPPFAccNo.setDocument(Execute.getDocument(20, false));
        txtPPFAccNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSalAccounts.add(txtPPFAccNo);
        txtPPFAccNo.setBounds(140, 50, 150, 23);

        txtFamilyAccNo.setDocument(Execute.getDocument(20, false));
        txtFamilyAccNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSalAccounts.add(txtFamilyAccNo);
        txtFamilyAccNo.setBounds(140, 110, 150, 23);

        txtESICAccNo.setDocument(Execute.getDocument(25, false));
        txtESICAccNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSalAccounts.add(txtESICAccNo);
        txtESICAccNo.setBounds(140, 80, 150, 23);

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel61.setForeground(new java.awt.Color(153, 0, 0));
        jLabel61.setText("E S I C No. :"); // NOI18N
        pnlSalAccounts.add(jLabel61);
        jLabel61.setBounds(20, 80, 100, 20);

        txtRentPaid.setDocument(Execute.getDocument(8,true));
        txtRentPaid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSalAccounts.add(txtRentPaid);
        txtRentPaid.setBounds(140, 140, 150, 22);

        lblrentpaid.setFont(new java.awt.Font("Bookman Old Style", 1, 11));
        lblrentpaid.setForeground(new java.awt.Color(153, 0, 0));
        lblrentpaid.setText("Anual Rent Paid:"); // NOI18N
        lblrentpaid.setToolTipText("Enter the sum of actual rent paid by Emp. /used in Form 16");
        pnlSalAccounts.add(lblrentpaid);
        lblrentpaid.setBounds(20, 140, 110, 20);

        pnlSal_Ben.add(pnlSalAccounts);
        pnlSalAccounts.setBounds(500, 20, 310, 180);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setOpaque(false);

        tblBankAccDet.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblBankAccDet);
        /*
        tblBankAccDet.getColumnModel().getColumn(0).setHeaderValue("BankName");
        tblBankAccDet.getColumnModel().getColumn(1).setHeaderValue("Acc Code");
        */
        tblBankAccDet.setModel( new DefaultTableModel(
            new Object [][] {    },
            new String [] { "BankName", "Acc Code"  }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        btnBankNameAdd.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnBankNameAdd.setText("Add");
        btnBankNameAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBankNameAddActionPerformed(evt);
            }
        });

        btnRemoveAcc.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemoveAcc.setText("Remove");
        btnRemoveAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAccActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(btnBankNameAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnRemoveAcc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(51, 51, 51))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnBankNameAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemoveAcc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSal_Ben.add(jPanel1);
        jPanel1.setBounds(500, 210, 320, 180);

        tbdEmpDet.addTab("     Salary & Benefits     ", pnlSal_Ben);

        pnlExp_Qual.setOpaque(false);

        jPanel15.setBackground(new java.awt.Color(102, 153, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 2, true), "        Experience Details     ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(153, 0, 0))); // NOI18N
        jPanel15.setOpaque(false);

        btnAddExp.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnAddExp.setForeground(new java.awt.Color(0, 0, 204));
        btnAddExp.setText("Add Experinence"); // NOI18N
        btnAddExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExpActionPerformed(evt);
            }
        });

        btnRemExp.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemExp.setForeground(new java.awt.Color(0, 0, 204));
        btnRemExp.setText("Remove Experience"); // NOI18N
        btnRemExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemExpActionPerformed(evt);
            }
        });

        tblExperinceDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Organization", "Joining_Date", "Leaving_Date", "Joining_Position", "Leaving_Position", "Joining_Salary", "Leaving_Salary", "Responsibilities", "Leaving_Reason", "Superiors_Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblExperinceDetails.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                tblExperinceDetailsComponentHidden(evt);
            }
        });
        tblExperinceDetails.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tblExperinceDetailsMouseMoved(evt);
            }
        });
        tblExperinceDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblExperinceDetailsKeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(tblExperinceDetails);

        org.jdesktop.layout.GroupLayout jPanel15Layout = new org.jdesktop.layout.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .add(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel15Layout.createSequentialGroup()
                        .add(311, 311, 311)
                        .add(btnAddExp)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnRemExp))
                    .add(jPanel15Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnAddExp)
                    .add(btnRemExp))
                .addContainerGap())
        );

        jPanel16.setBackground(new java.awt.Color(102, 153, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 2, true), "    Qualification Details    ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(153, 0, 0))); // NOI18N
        jPanel16.setOpaque(false);

        jScrollPane6.setBorder(null);

        tblQualification.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Qual_Type", "Degree/Diploma", "Board/University", "Year_Passing", "Marks", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblQualification);

        btnQualification.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnQualification.setForeground(new java.awt.Color(0, 0, 204));
        btnQualification.setText("Add Qualification"); // NOI18N
        btnQualification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQualificationActionPerformed(evt);
            }
        });

        btnRemQual.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemQual.setForeground(new java.awt.Color(0, 0, 204));
        btnRemQual.setText("Remove Qualification"); // NOI18N
        btnRemQual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemQualActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel16Layout = new org.jdesktop.layout.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel16Layout.createSequentialGroup()
                        .add(btnQualification)
                        .add(18, 18, 18)
                        .add(btnRemQual, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(203, 203, 203))
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnRemQual, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnQualification))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnlExp_QualLayout = new org.jdesktop.layout.GroupLayout(pnlExp_Qual);
        pnlExp_Qual.setLayout(pnlExp_QualLayout);
        pnlExp_QualLayout.setHorizontalGroup(
            pnlExp_QualLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlExp_QualLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlExp_QualLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlExp_QualLayout.setVerticalGroup(
            pnlExp_QualLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlExp_QualLayout.createSequentialGroup()
                .add(32, 32, 32)
                .add(jPanel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(jPanel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38))
        );

        tbdEmpDet.addTab("      Exp / Qual Details      ", pnlExp_Qual);

        pnlFamilyDet.setOpaque(false);

        jPanel6.setBackground(new java.awt.Color(102, 153, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 2, true), "             Family Detailes                    ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(153, 0, 0)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(153, 0, 0))); // NOI18N
        jPanel6.setOpaque(false);

        jScrollPane5.setBackground(new java.awt.Color(255, 204, 204));
        jScrollPane5.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jScrollPane5.setForeground(new java.awt.Color(153, 0, 0));

        tblFamily.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 255), 2)));
        tblFamily.setForeground(new java.awt.Color(102, 0, 0));
        tblFamily.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr.No.", "Name", "Relation", "Age", "Occuption", "Dependent", "Contact No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFamily.setGridColor(new java.awt.Color(114, 116, 31));
        tblFamily.setSelectionBackground(new java.awt.Color(146, 193, 131));
        jScrollPane5.setViewportView(tblFamily);

        btnAddFamily.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnAddFamily.setForeground(new java.awt.Color(0, 0, 204));
        btnAddFamily.setText("Add Family"); // NOI18N
        btnAddFamily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFamilyActionPerformed(evt);
            }
        });

        btnRemFamily.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        btnRemFamily.setForeground(new java.awt.Color(0, 0, 204));
        btnRemFamily.setText("Remove Family"); // NOI18N
        btnRemFamily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemFamilyActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(278, 278, 278)
                        .add(btnAddFamily, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(41, 41, 41)
                        .add(btnRemFamily, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 748, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnRemFamily, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnAddFamily, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pnlReference1.setBackground(new java.awt.Color(255, 153, 153));
        pnlReference1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 2, true), "  Reference Details  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));
        pnlReference1.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        pnlReference1.setOpaque(false);
        pnlReference1.setLayout(null);

        jScrollRef1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(134, 185, 34), 2));
        jScrollRef1.setForeground(new java.awt.Color(51, 0, 255));

        tblRef.setFont(new java.awt.Font("Tahoma", 1, 11));
        tblRef.setForeground(new java.awt.Color(0, 0, 204));
        tblRef.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No.", "Name", "Relation", "Contact No", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRef.getTableHeader().setReorderingAllowed(false);
        jScrollRef1.setViewportView(tblRef);
        tblRef.getColumnModel().getColumn(0).setPreferredWidth(50);

        pnlReference1.add(jScrollRef1);
        jScrollRef1.setBounds(10, 20, 360, 160);

        btnAddRef.setText("Add Reference"); // NOI18N
        btnAddRef.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 0), 2));
        btnAddRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRefActionPerformed(evt);
            }
        });
        pnlReference1.add(btnAddRef);
        btnAddRef.setBounds(30, 190, 140, 30);

        btnRemRef.setText("Remove Reference "); // NOI18N
        btnRemRef.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 0), 2));
        btnRemRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemRefActionPerformed(evt);
            }
        });
        pnlReference1.add(btnRemRef);
        btnRemRef.setBounds(200, 190, 150, 30);

        pnlLanguage1.setBackground(new java.awt.Color(255, 153, 51));
        pnlLanguage1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 2, true), "   Languages Known     ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(153, 0, 0))); // NOI18N
        pnlLanguage1.setOpaque(false);
        pnlLanguage1.setLayout(null);

        btnAddLanguage.setText("Add Language"); // NOI18N
        btnAddLanguage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));
        btnAddLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLanguageActionPerformed(evt);
            }
        });
        pnlLanguage1.add(btnAddLanguage);
        btnAddLanguage.setBounds(50, 190, 130, 30);

        btnRemLanguage.setText("Remove language"); // NOI18N
        btnRemLanguage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));
        btnRemLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemLanguageActionPerformed(evt);
            }
        });
        pnlLanguage1.add(btnRemLanguage);
        btnRemLanguage.setBounds(200, 190, 140, 30);

        Scrl_language1.setBackground(new java.awt.Color(204, 153, 0));
        Scrl_language1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0), 2));

        tblLanguage.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        tblLanguage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Language", "Speak", "Read", "Write"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Scrl_language1.setViewportView(tblLanguage);
        tblLanguage.getColumnModel().getColumn(0).setPreferredWidth(40);

        pnlLanguage1.add(Scrl_language1);
        Scrl_language1.setBounds(10, 20, 350, 160);

        org.jdesktop.layout.GroupLayout pnlFamilyDetLayout = new org.jdesktop.layout.GroupLayout(pnlFamilyDet);
        pnlFamilyDet.setLayout(pnlFamilyDetLayout);
        pnlFamilyDetLayout.setHorizontalGroup(
            pnlFamilyDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlFamilyDetLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .add(pnlFamilyDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(pnlFamilyDetLayout.createSequentialGroup()
                        .add(pnlReference1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 380, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(pnlLanguage1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 370, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(41, 41, 41))
        );
        pnlFamilyDetLayout.setVerticalGroup(
            pnlFamilyDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlFamilyDetLayout.createSequentialGroup()
                .add(31, 31, 31)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(pnlFamilyDetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlReference1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlLanguage1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addContainerGap())
        );

        tbdEmpDet.addTab("       Other Details        ", pnlFamilyDet);

        pnlFullDet.setOpaque(false);
        pnlFullDet.setLayout(null);

        pnlAdd_Full.setBackground(new java.awt.Color(102, 153, 255));
        pnlAdd_Full.setForeground(java.awt.Color.white);
        pnlAdd_Full.setOpaque(false);
        pnlAdd_Full.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel2.setText("Address :"); // NOI18N
        pnlAdd_Full.add(jLabel2);
        jLabel2.setBounds(20, 10, 60, 20);

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 0, 9));
        jLabel3.setText("(Permanent)"); // NOI18N
        pnlAdd_Full.add(jLabel3);
        jLabel3.setBounds(20, 30, 60, 12);

        txtAddressP.setColumns(20);
        txtAddressP.setDocument(Execute.getDocument(250, false));
        txtAddressP.setRows(5);
        txtAddressP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(txtAddressP);

        pnlAdd_Full.add(jScrollPane1);
        jScrollPane1.setBounds(100, 10, 270, 60);

        jLabel77.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel77.setText("City :"); // NOI18N
        pnlAdd_Full.add(jLabel77);
        jLabel77.setBounds(10, 80, 40, 20);

        jLabel78.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel78.setText("State / Pin :"); // NOI18N
        pnlAdd_Full.add(jLabel78);
        jLabel78.setBounds(10, 110, 80, 20);

        jLabel79.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel79.setText("Contact P/M :"); // NOI18N
        pnlAdd_Full.add(jLabel79);
        jLabel79.setBounds(10, 150, 80, 20);

        txtCityP.setDocument(Execute.getDocument(30,false));
        txtCityP.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtCityP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtCityP);
        txtCityP.setBounds(100, 80, 270, 22);

        jLabel4.setBackground(new java.awt.Color(204, 51, 0));
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("STD"); // NOI18N
        pnlAdd_Full.add(jLabel4);
        jLabel4.setBounds(110, 136, 30, 14);

        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setText("Phone"); // NOI18N
        pnlAdd_Full.add(jLabel5);
        jLabel5.setBounds(160, 136, 50, 14);

        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setText("Mobile"); // NOI18N
        pnlAdd_Full.add(jLabel6);
        jLabel6.setBounds(280, 136, 50, 14);

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel10.setText("ID Mark :"); // NOI18N
        pnlAdd_Full.add(jLabel10);
        jLabel10.setBounds(10, 260, 60, 20);

        jLabel11.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel11.setText("PANNo :"); // NOI18N
        pnlAdd_Full.add(jLabel11);
        jLabel11.setBounds(10, 290, 50, 20);

        jLabel48.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel48.setText("PassportNo :"); // NOI18N
        pnlAdd_Full.add(jLabel48);
        jLabel48.setBounds(10, 320, 80, 20);

        jLabel49.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel49.setText("Driving Lic No. :"); // NOI18N
        pnlAdd_Full.add(jLabel49);
        jLabel49.setBounds(10, 350, 90, 20);

        jLabel50.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel50.setText("DocDetails :"); // NOI18N
        pnlAdd_Full.add(jLabel50);
        jLabel50.setBounds(10, 380, 80, 20);

        txtIdmark.setDocument(Execute.getDocument(50,false));
        txtIdmark.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtIdmark.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtIdmark);
        txtIdmark.setBounds(100, 260, 270, 22);

        txtPan.setDocument(Execute.getDocument(50,false));
        txtPan.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtPan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtPan);
        txtPan.setBounds(100, 290, 270, 22);

        txtPassport.setDocument(Execute.getDocument(50,false));
        txtPassport.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtPassport.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtPassport);
        txtPassport.setBounds(100, 320, 270, 22);

        txtDrivingLicNo.setDocument(Execute.getDocument(50,false));
        txtDrivingLicNo.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtDrivingLicNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtDrivingLicNo);
        txtDrivingLicNo.setBounds(100, 350, 270, 22);

        txtDocDetails.setDocument(Execute.getDocument(50,false));
        txtDocDetails.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtDocDetails.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtDocDetails);
        txtDocDetails.setBounds(100, 380, 270, 22);

        jSeparator4.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdd_Full.add(jSeparator4);
        jSeparator4.setBounds(10, 180, 360, 10);

        jSeparator5.setForeground(new java.awt.Color(153, 0, 0));
        pnlAdd_Full.add(jSeparator5);
        jSeparator5.setBounds(10, 410, 360, 10);

        jLabel51.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel51.setText("House :"); // NOI18N
        pnlAdd_Full.add(jLabel51);
        jLabel51.setBounds(200, 230, 60, 20);

        cboHouse.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Own", "Rented" }));
        cboHouse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(cboHouse);
        cboHouse.setBounds(290, 230, 80, 22);

        chk2Wheelar.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chk2Wheelar.setText("2 Wheelar :"); // NOI18N
        chk2Wheelar.setActionCommand("2  Wheelar :"); // NOI18N
        chk2Wheelar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk2Wheelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chk2Wheelar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chk2Wheelar.setIconTextGap(27);
        chk2Wheelar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chk2Wheelar.setOpaque(false);
        chk2Wheelar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk2WheelarItemStateChanged(evt);
            }
        });
        pnlAdd_Full.add(chk2Wheelar);
        chk2Wheelar.setBounds(10, 420, 110, 13);

        chk4Wheelar.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chk4Wheelar.setText("4 Wheelar :"); // NOI18N
        chk4Wheelar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk4Wheelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chk4Wheelar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chk4Wheelar.setIconTextGap(27);
        chk4Wheelar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chk4Wheelar.setOpaque(false);
        chk4Wheelar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk4WheelarItemStateChanged(evt);
            }
        });
        pnlAdd_Full.add(chk4Wheelar);
        chk4Wheelar.setBounds(10, 450, 110, 13);

        jLabel52.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel52.setText("No. :"); // NOI18N
        pnlAdd_Full.add(jLabel52);
        jLabel52.setBounds(130, 420, 30, 13);

        jLabel53.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel53.setText("No. :"); // NOI18N
        pnlAdd_Full.add(jLabel53);
        jLabel53.setBounds(130, 450, 22, 13);

        jLabel63.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel63.setText("Height :"); // NOI18N
        pnlAdd_Full.add(jLabel63);
        jLabel63.setBounds(10, 200, 60, 13);

        jLabel80.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel80.setText("Weight :"); // NOI18N
        pnlAdd_Full.add(jLabel80);
        jLabel80.setBounds(200, 200, 50, 13);

        jLabel81.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel81.setText("Eye Colour :"); // NOI18N
        pnlAdd_Full.add(jLabel81);
        jLabel81.setBounds(10, 230, 70, 20);

        cboEyeColor.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboEyeColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Black", "Brown" }));
        cboEyeColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(cboEyeColor);
        cboEyeColor.setBounds(100, 230, 80, 22);

        cboStateP.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboStateP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        cboStateP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(cboStateP);
        cboStateP.setBounds(100, 110, 150, 22);

        txtStdP.setDocument(Execute.getDocument(10,true     ));
        txtStdP.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtStdP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtStdP);
        txtStdP.setBounds(100, 150, 40, 20);

        txtPinP1.setDocument(Execute.getDocument(8,false));
        txtPinP1.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtPinP1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtPinP1);
        txtPinP1.setBounds(260, 110, 110, 20);

        txtPhoneP.setDocument(Execute.getDocument(10,true));
        txtPhoneP.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtPhoneP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtPhoneP);
        txtPhoneP.setBounds(150, 150, 100, 20);

        txtMobileP.setDocument(Execute.getDocument(10,true));
        txtMobileP.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtMobileP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtMobileP);
        txtMobileP.setBounds(260, 150, 110, 20);

        txtHeight.setDocument(Execute.getDocument(10, false));
        txtHeight.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtHeight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txtHeight);
        txtHeight.setBounds(100, 196, 80, 20);

        txtWeight.setDocument(Execute.getDocument(10, false));
        txtWeight.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtWeight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });
        pnlAdd_Full.add(txtWeight);
        txtWeight.setBounds(290, 196, 80, 20);

        txt2WheelarNo.setDocument(Execute.getDocument(20, false));
        txt2WheelarNo.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txt2WheelarNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txt2WheelarNo);
        txt2WheelarNo.setBounds(170, 420, 90, 22);

        txt4WheelarNo.setDocument(Execute.getDocument(20,false));
        txt4WheelarNo.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txt4WheelarNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlAdd_Full.add(txt4WheelarNo);
        txt4WheelarNo.setBounds(170, 450, 90, 22);

        pnlFullDet.add(pnlAdd_Full);
        pnlAdd_Full.setBounds(10, 10, 380, 480);

        jPanel17.setBackground(new java.awt.Color(102, 153, 255));
        jPanel17.setOpaque(false);
        jPanel17.setLayout(null);

        jPanel20.setBackground(new java.awt.Color(102, 153, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2), "      Preliminary Interview        ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 0, 204))); // NOI18N
        jPanel20.setOpaque(false);
        jPanel20.setLayout(null);

        jLabel85.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel85.setText("Inetrview By :"); // NOI18N
        jPanel20.add(jLabel85);
        jLabel85.setBounds(10, 20, 80, 20);

        txtInterviewPre.setDocument(Execute.getDocument(20, false));
        txtInterviewPre.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtInterviewPre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.add(txtInterviewPre);
        txtInterviewPre.setBounds(100, 20, 120, 22);

        jLabel86.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel86.setText("Date :"); // NOI18N
        jPanel20.add(jLabel86);
        jLabel86.setBounds(240, 20, 40, 20);

        jLabel87.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel87.setText("Remarks :"); // NOI18N
        jPanel20.add(jLabel87);
        jLabel87.setBounds(10, 50, 70, 20);

        txtRemarksPre.setDocument(Execute.getDocument(40,false));
        txtRemarksPre.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtRemarksPre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.add(txtRemarksPre);
        txtRemarksPre.setBounds(100, 50, 280, 22);
        jPanel20.add(dtInterviewPre);
        dtInterviewPre.setBounds(280, 20, 95, 23);

        jPanel17.add(jPanel20);
        jPanel20.setBounds(10, 0, 400, 90);

        jPanel22.setBackground(new java.awt.Color(102, 153, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 0), 2), "    Final Interview & Orders by     ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel22.setOpaque(false);
        jPanel22.setLayout(null);

        jLabel88.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel88.setText("Inetrview By :"); // NOI18N
        jPanel22.add(jLabel88);
        jLabel88.setBounds(10, 20, 90, 20);

        jLabel89.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel89.setText("Date :"); // NOI18N
        jPanel22.add(jLabel89);
        jLabel89.setBounds(240, 20, 40, 20);

        jLabel90.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        jLabel90.setText("Remarks :"); // NOI18N
        jPanel22.add(jLabel90);
        jLabel90.setBounds(10, 50, 70, 20);

        txtRemarksFinal.setDocument(Execute.getDocument(40,false));
        txtRemarksFinal.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtRemarksFinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel22.add(txtRemarksFinal);
        txtRemarksFinal.setBounds(100, 50, 280, 22);

        cboInterviewFinal.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        cboInterviewFinal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MD", "CMD", "Director", "Dept Head" }));
        cboInterviewFinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel22.add(cboInterviewFinal);
        cboInterviewFinal.setBounds(100, 20, 130, 22);
        jPanel22.add(dtInterviewFinal);
        dtInterviewFinal.setBounds(280, 20, 95, 23);

        jPanel17.add(jPanel22);
        jPanel22.setBounds(10, 90, 400, 90);

        panelComProv.setBackground(new java.awt.Color(102, 153, 255));
        panelComProv.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2), "      Company Providing      ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 0, 255))); // NOI18N
        panelComProv.setForeground(java.awt.Color.white);
        panelComProv.setOpaque(false);
        panelComProv.setLayout(null);

        chkAccomodation.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkAccomodation.setText("Accomodation    :"); // NOI18N
        chkAccomodation.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkAccomodation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkAccomodation.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkAccomodation.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkAccomodation.setOpaque(false);
        panelComProv.add(chkAccomodation);
        chkAccomodation.setBounds(10, 20, 110, 13);

        chkFood.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkFood.setText("Food  :"); // NOI18N
        chkFood.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkFood.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkFood.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkFood.setIconTextGap(35);
        chkFood.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkFood.setOpaque(false);
        panelComProv.add(chkFood);
        chkFood.setBounds(130, 20, 90, 13);

        chkMobile.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkMobile.setText("Mobile  :"); // NOI18N
        chkMobile.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkMobile.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkMobile.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkMobile.setIconTextGap(25);
        chkMobile.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkMobile.setOpaque(false);
        panelComProv.add(chkMobile);
        chkMobile.setBounds(130, 40, 80, 13);

        chkSimCard.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkSimCard.setText("Sim Card  :"); // NOI18N
        chkSimCard.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkSimCard.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkSimCard.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkSimCard.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkSimCard.setOpaque(false);
        panelComProv.add(chkSimCard);
        chkSimCard.setBounds(310, 40, 80, 13);

        chkMobileBill.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkMobileBill.setText("Mob Bill :"); // NOI18N
        chkMobileBill.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkMobileBill.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkMobileBill.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkMobileBill.setIconTextGap(12);
        chkMobileBill.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkMobileBill.setOpaque(false);
        panelComProv.add(chkMobileBill);
        chkMobileBill.setBounds(310, 60, 80, 13);

        chk2WheelComp.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chk2WheelComp.setText("2 Wheeler  :"); // NOI18N
        chk2WheelComp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk2WheelComp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chk2WheelComp.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chk2WheelComp.setIconTextGap(30);
        chk2WheelComp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chk2WheelComp.setOpaque(false);
        panelComProv.add(chk2WheelComp);
        chk2WheelComp.setBounds(10, 60, 110, 13);

        chk4WheelComp.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chk4WheelComp.setText("4 Wheeler  :"); // NOI18N
        chk4WheelComp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk4WheelComp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chk4WheelComp.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chk4WheelComp.setIconTextGap(6);
        chk4WheelComp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chk4WheelComp.setOpaque(false);
        panelComProv.add(chk4WheelComp);
        chk4WheelComp.setBounds(130, 60, 80, 13);

        chkFuel.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkFuel.setText("Fuel:"); // NOI18N
        chkFuel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkFuel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkFuel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkFuel.setIconTextGap(30);
        chkFuel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkFuel.setOpaque(false);
        panelComProv.add(chkFuel);
        chkFuel.setBounds(230, 60, 70, 13);

        chkPhonComp.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkPhonComp.setText("Phone :"); // NOI18N
        chkPhonComp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkPhonComp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkPhonComp.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkPhonComp.setIconTextGap(52);
        chkPhonComp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkPhonComp.setOpaque(false);
        panelComProv.add(chkPhonComp);
        chkPhonComp.setBounds(10, 40, 110, 13);

        chkInternet.setFont(new java.awt.Font("Bookman Old Style", 0, 10));
        chkInternet.setText("Internet  :"); // NOI18N
        chkInternet.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkInternet.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkInternet.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkInternet.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkInternet.setOpaque(false);
        panelComProv.add(chkInternet);
        chkInternet.setBounds(230, 40, 70, 13);

        jPanel17.add(panelComProv);
        panelComProv.setBounds(10, 180, 400, 90);

        jPanel24.setBackground(new java.awt.Color(102, 153, 255));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2), "        Images      ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 0, 255))); // NOI18N
        jPanel24.setOpaque(false);
        jPanel24.setLayout(null);

        lblThumb.setBackground(new java.awt.Color(255, 204, 204));
        lblThumb.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblThumb.setForeground(new java.awt.Color(0, 0, 204));
        lblThumb.setText("              Thumb     "); // NOI18N
        lblThumb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        lblThumb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblThumbMouseClicked(evt);
            }
        });
        jPanel24.add(lblThumb);
        lblThumb.setBounds(20, 20, 120, 90);

        jLabel92.setForeground(new java.awt.Color(0, 0, 204));
        jLabel92.setText("    Thumb Impression   "); // NOI18N
        jPanel24.add(jLabel92);
        jLabel92.setBounds(20, 110, 120, 14);

        lblSign.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblSign.setForeground(new java.awt.Color(0, 0, 204));
        lblSign.setText("            Signature    "); // NOI18N
        lblSign.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        lblSign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSignMouseClicked(evt);
            }
        });
        jPanel24.add(lblSign);
        lblSign.setBounds(230, 20, 140, 90);

        jLabel94.setForeground(new java.awt.Color(0, 0, 204));
        jLabel94.setText("                  Signature"); // NOI18N
        jPanel24.add(jLabel94);
        jLabel94.setBounds(230, 110, 140, 14);

        txtSign.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtSign.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel24.add(txtSign);
        txtSign.setBounds(230, 130, 150, 20);

        txtThumb.setFont(new java.awt.Font("Bookman Old Style", 0, 11));
        txtThumb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel24.add(txtThumb);
        txtThumb.setBounds(20, 130, 130, 20);

        jPanel17.add(jPanel24);
        jPanel24.setBounds(10, 270, 400, 160);

        pnlFullDet.add(jPanel17);
        jPanel17.setBounds(400, 10, 420, 440);

        tbdEmpDet.addTab("          Full Details          ", pnlFullDet);

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, tbdEmpDet, 0, 843, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, pnlMainLayout.createSequentialGroup()
                            .add(1, 1, 1)
                            .add(pnlButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, pnlEmpHdr, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlEmpHdr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbdEmpDet, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(62, 62, 62))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 638, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    private void btnRemFamilyActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if (tblFamily.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select Family member to Delete . . . ");
            return;
        }
        SrNoFamily--;
        int totalno = tblFamily.getRowCount();
        int stratno = tblFamily.getSelectedRow();
        while (stratno < totalno) {
            try {
                tblFamily.setValueAt(stratno, stratno, 0);
                stratno++;
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
        DefaultTableModel model = (DefaultTableModel) tblFamily.getModel();
        model.removeRow(tblFamily.getSelectedRow());        
    }                                            

    public void setFamily() {
        tblFamily.setColumnSelectionAllowed(false);
        tblFamily.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblFamily.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblFamily.getTableHeader().setResizingAllowed(true);
        tblFamily.getTableHeader().setReorderingAllowed(true);
       // tblFamily.setRowHeight(tblFamily.getRowHeight() + 4);

        TableColumnModel columnModel = tblFamily.getColumnModel();
        TableColumn column = columnModel.getColumn(0);
        column.setPreferredWidth(20);
        column = columnModel.getColumn(1);
        column.setPreferredWidth(150);
        column = columnModel.getColumn(2);
        column.setPreferredWidth(80);
        column = columnModel.getColumn(3);      //Age
        column.setPreferredWidth(20);
        column = columnModel.getColumn(4);
        column.setPreferredWidth(50);
        column = columnModel.getColumn(5);
        column.setPreferredWidth(20);
        column = columnModel.getColumn(6);      //ContactNo
        column.setPreferredWidth(15);
    }

    private void btnAddFamilyActionPerformed(java.awt.event.ActionEvent evt) {                                             
// TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFamily.getModel();

        Vector v = new Vector();

        if (SrNoFamily == 0) {
            SrNoFamily = 1;
            v.add(SrNoFamily);
            v.add("");
            v.add("");
            v.add("");
            v.add("");
            v.add(false);
            v.add("");
            model.addRow(v);
            SrNoFamily++;
        } else {
            v.add(SrNoFamily);
            v.add("");
            v.add("");
            v.add("");
            v.add("");
            v.add(false);
            v.add("");
            model.addRow(v);
            SrNoFamily++;
        }
        tblFamily.setModel(model);
    }                                            

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
      
       if(  JOptionPane.showConfirmDialog(this, "Confirm Delete?","Confirmation..",JOptionPane.YES_NO_OPTION)
            != JOptionPane.YES_OPTION)
            return;

       java.sql.Savepoint point = null;
       
       try {
            con.setAutoCommit(false);
            point = con.setSavepoint("Delete Employee");
            bclkDelete =true;
            
             if("User".equals(AfterLoginMainForm.userType) ){
                                        
                        AddNewRequest();
                        con.commit();
                        JOptionPane.showMessageDialog(null, "Request Submitted to Administrators . . .");
                        point = null;
                        con.setAutoCommit(true);
                        //Status(true, false, true);
                        btnCancelActionPerformed(null);
                        loadEmpDet(null,false);
                        EnableAll(true,false, false, true,true,true);
                        makeAllEnable(false);                        
                        return ;
              }else{
   
                     String myStatement = " Select max(cont.EmpCode)as EmpCode from Emp_ContactFull cont " +
                        " JOin Emp_CompDet det " +
                        " on Det.EmpCode= cont.EmpCode" +
                        " where Company=" + AfterLoginMainForm.compcode ;                   

                        ResultSet set = con.createStatement().executeQuery(myStatement);
                        if(set.next()){
                                if(set.getInt("EmpCode") == Integer.parseInt(lblEmpCode.getText())){
                                String maxStr = " update Ms_Start_Max_EmpCode set Start_EmpCode= Start_EmpCode-1 " +
                                        " where  Company="+AfterLoginMainForm.compcode;
                                con.createStatement().executeUpdate(maxStr);  
                                }
                        }
                      deleteRecord();
              }
                con.commit();
                point =  null;
                con.setAutoCommit(true);
                JOptionPane.showMessageDialog(this, " Record Deleted . . . ! ");
                reloadReminders();
                EnableAll(true,false, false, true,true,true);
                loadEmpDet(null,true);
               
        } catch (Exception exception) {
            try {
                exception.printStackTrace();
                con.rollback(point);                
                con.setAutoCommit(true);
                point = null;
                JOptionPane.showMessageDialog(this, "Unable to Delete Record . . . ! ");
            } catch (Exception ex) {
                Logger.getLogger(EmpDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }                                         

    private void deleteRecord() throws SQLException{
       
          if( ! "User".equals( AfterLoginMainForm.userType) ) {
                delEmpSal();
                delEmpDetails();
                delEmpLanguage();
                delEmpRef();
                delEmpFamily();
                delEmpComanyDet();
                if(!bEdit)
                    delSalary();
                else
                    delMaxSalary();        
                deleteInterViewDetails();
                deleteCompProvidingDetails();
                deleteQualification();
                deleteExperince();
                deleteAccountDet();       
                if(bclkDelete){
                    deletelogin();
                }
                    deleteImages();  
          }else  {
                if( bEdit ){
                            
                            delEmpDetails();
                            delEmpLanguage();
                            delEmpRef();
                            delEmpFamily();
                            deleteInterViewDetails();
                            deleteCompProvidingDetails();
                            deleteQualification();
                            deleteExperince();
                            //deleteAccountDet();                
                           // deletelogin();
                            deleteImages();                           
                }          
          }
          deleteReminders();      
    }

    private void deleteReminders() throws SQLException{
        String  str = "DELETE FROM TRN_TASKDATA WHERE UPD_BY like '"+lblEmpCode.getText()+"%' ";
        System.out.println(str);
        AfterLoginMainForm.con.createStatement().executeUpdate(str);
    }

    private void deleteImages(){
            
         if( attendance.AfterLoginMainForm.WebFolderShared  )
         {           
            MyDeleteImage( txtPerpath.getText(), attendance.AfterLoginMainForm.EmployeeImg );
            MyDeleteImage( lblThumb.getText(), attendance.AfterLoginMainForm.EmployeeThumbImg );
            MyDeleteImage( lblSign.getText(), attendance.AfterLoginMainForm.EmployeeSignImg );                        
         }
        
    }
    
    public static  void MyDeleteImage(String path, String Where ){
            
            if(path != null || path != "" || !path.equals("")  ){
                try{
                    //System.out.println("\\\\"+attendance.AfterLoginMainForm.WebServerName  + attendance.AfterLoginMainForm.EmployeeLogInImage +"\\"  +txtPerpath.getText());
                    Others.Execute.DeleteImage( path, "\\\\"+attendance.AfterLoginMainForm.WebServerName +"\\" + Where);
                } catch (java.io.FileNotFoundException ex) {
                    //Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                } catch (IOException ex) {
                   //Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
             }    
       }
    
    private void deletelogin() throws SQLException{
               
            String str = " delete from  UserMaster where UserName = '"+ lblEmpCode.getText()+"'";                                        
            System.out.println(str);
            java.sql.Statement stat = con.createStatement();            
            stat.addBatch(str) ;                    
            
            str = "delete from Frm_Normal_User_Form_Properties where EmpCode="+  lblEmpCode.getText();
            System.out.println(str);
            stat.addBatch(str) ;   
            stat.executeBatch();  
             
    }
    
    private void txtEmailMKeyPressed(java.awt.event.KeyEvent evt) {                                     
       if(evt.getKeyCode() !=  java.awt.event.KeyEvent.VK_BACK_SPACE)                    
        if (txtEmailM.getText().length() > 30) {
            JOptionPane.showMessageDialog(this, "Email ID Can not be Greater Than 30 . . . !.");
        }
    }                                    

    private void txtEmailMKeyReleased(java.awt.event.KeyEvent evt) {                                      
        
    }                                     

    private void chk4WheelarItemStateChanged(java.awt.event.ItemEvent evt) {                                             
// TODO add your handling code here:
        if (chk4Wheelar.isSelected() && btnSaveNew.isEnabled()) {
            txt4WheelarNo.setEnabled(true);
        } else {
            txt4WheelarNo.setEnabled(false);
        }
    }                                            

    private void chk2WheelarItemStateChanged(java.awt.event.ItemEvent evt) {                                             
// TODO add your handling code here:
        if (chk2Wheelar.isSelected() && btnSaveNew.isEnabled()) {
            txt2WheelarNo.setEnabled(true);
        } else {
            txt2WheelarNo.setEnabled(false);
        }
    }                                            

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {                                          

        // Status(true, false ,true);
        clearText();
        clearAllTables();
        makeAllEnable(false);
        EnableAll(true,false, false, true,true,true);
    //ValidateText();
    }                                         

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(!bRSearch)
            return;
        
        try {
            loadedset.last();
            
            rsloadedCompany.last();
            rsloadedInterView.last();
            rsloadedCopmProv.last();
            
          /*  rsloadedCompany.first();            
            rsloadedInterView.first();
            rsloadedCopmProv.first();
            
           */
         /*try{
              while(loadedset.getInt("EmpCode") != rsloadedInterView.getInt("EmpCode"))
                rsloadedCompany.next();                
          }catch(SQLException s)   {}
         
          try{
            while(loadedset.getInt("EmpCode") != rsloadedInterView.getInt("EmpCode"))
                rsloadedInterView.next();
          }catch(SQLException s)   {}
         
          try{  
            while(loadedset.getInt("EmpCode") != rsloadedCopmProv.getInt("EmpCode"))            
                rsloadedCopmProv.next();            
          }catch(SQLException s)   {}
            
          * */
            fillData();
        } catch (SQLException e) {
        }
    }                                       

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        if(!bRSearch)
            return;
        
        try {
            loadedset.first();
            rsloadedCompany.first();            
            rsloadedInterView.first();
            rsloadedCopmProv.first();
            
             /*        
            while(loadedset.getInt("EmpCode") != rsloadedInterView.getInt("EmpCode"))
                rsloadedCompany.next();                
            while(loadedset.getInt("EmpCode") != rsloadedInterView.getInt("EmpCode"))
                rsloadedInterView.next();
            while(loadedset.getInt("EmpCode") != rsloadedCopmProv.getInt("EmpCode"))            
                rsloadedCopmProv.next();
           */
            
            fillData();
        } catch (SQLException e) {
        }
    }                                        

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {                                        
       if(!bRSearch)
            return;
        
        try {
              loadedset.next();
            //try{
                rsloadedCompany.next();
            //}catch(Exception e) {}
            //try{
                rsloadedInterView.next();
           // }catch(Exception e) {}
            rsloadedCopmProv.next();
            fillData();
        } catch (SQLException e) {
        }
    }                                       

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(!bRSearch)
            return;
        
        try {
            loadedset.previous();
            rsloadedCompany.previous();
            rsloadedInterView.previous();
            rsloadedCopmProv.previous();
            fillData();
        } catch (SQLException e) {
        }
    }                                       

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {                                        
        bEdit = true;
        Status(false, false,false );
        makeAllEnable(true);
        checkBoxEvents();
    }                                       

    private void  makeAllEnable(boolean choice){        
        Execute.panelEnable(pnlPersonalDet, choice);  
        Execute.panelEnable(pnlSal_Ben, choice);  
        Execute.panelEnable(pnlExp_Qual, choice);  
        Execute.panelEnable(pnlFamilyDet, choice);        
        Execute.panelEnable(pnlFullDet, choice);  
        txtAddressM.setEnabled(choice);
        dtEffectDate.setEnabled(choice);
        tblExperinceDetails.setEnabled(choice);
        tblQualification.setEnabled(choice);
        tblFamily.setEnabled(choice);
        tblLanguage.setEnabled(choice);
        txtAddressP.setEnabled(choice);
        dtEffectDate.setEnabled(choice);
        btnAddEarnings.setEnabled(choice);
        btnRemEarnings.setEnabled(choice);
        //rdo(null);
    }
    
    private void btnSaveNewActionPerformed(java.awt.event.ActionEvent evt) {                                           

            if(JOptionPane.showConfirmDialog(this, "Are You Sure to Save ?","Confirmation..",JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION)
                return;
            boolean isSaved= true;
            String currentEmpCode =  lblEmpCode.getText();
            try {
                 try {
                    if (Validate0() != true  || validate4() != true) { return;  }

                    if (!Execute.TableCheck(tblSalEarnings, this, 1, tbdSalType, 0) || !Execute.TableCheck(tblSalDeduction, this, 1, tbdSalType, 1) || !Execute.TableCheck(tblSalDedEmpCon, this, 1, tbdSalType, 2) || !Execute.TableCheck(tblSalOthers, this, 1, tbdSalType, 3)) {
                        return;
                    }
                    if(!Execute.TableCheckNull(tblQualification, this, -1, tbdEmpDet,2 ) ||
                       !Execute.TableCheckNull(tblExperinceDetails, this, -1, tbdEmpDet,2 ))
                        return;
                     if (!Execute.TableCheck( tblBankAccDet, this, 0, tbdEmpDet, 1) ) {
                        return;
                    }
                   
                } catch (Exception exception) {
                      JOptionPane.showMessageDialog(this, "Error in Validating...  " );
                      exception.printStackTrace();
                      return;
                }
                bclkDelete =false;
                DateConv();
                con.setAutoCommit(false);
                java.sql.Savepoint savepoint = con.setSavepoint("Insert_Emp_Det");

                try {
                    if("User".equals(AfterLoginMainForm.userType) ){                            
                            AddNewRequest();                            
                            con.commit();
                            JOptionPane.showMessageDialog(null, "Request Submitted to Administrators . . .");
                            savepoint = null;
                            con.setAutoCommit(true);
                            //Status(true, false, true);
                             btnCancelActionPerformed(null);
                             loadEmpDet(null,false);
                                    
                             EnableAll(true,false, false, true,true,true);
                             makeAllEnable(false);
                             return;
                    }else
                            if(bEdit){
                                addHistory();
                                deleteRecord();
                                AddNewRecord();
                            }else
                                AddNewRecord();
                    
                } catch (Exception exception) {
                    isSaved =false;
                    exception.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error in Saving Record.");
                    try { 
                        con.rollback(savepoint);
                        con.setAutoCommit(true);
                        return;
                    } catch (Exception ex) {                        
                        ex.printStackTrace();
                        con.setAutoCommit(true);                        
                        return;
                    }
                }
                con.commit();
                savepoint = null;
                con.setAutoCommit(true);
                JOptionPane.showMessageDialog(null, "Record Saved . . .");
                reloadReminders();
                //Status(true, false, true);
                btnCancelActionPerformed(null);
                loadEmpDet(currentEmpCode,true);
                //Status(true, false ,true);              
                EnableAll(true,false, false, true,true,true);
                makeAllEnable(false);
                
                frmEmpCode = null;
                frmSrno = null;
                
            } catch (Exception ex) {
                Logger.getLogger(EmpDetails.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        
    }                                          

    private void AddNewRequest() throws SQLException
    {
              
            String Message="",type ="";
            int ISrno = -1;
            if(!bEdit){
                Message = "'Requeseted For New Employee Details'  ";
                type    =   "'false'";
            }
            else if( bclkDelete ){
                     Message = "'Requeseted To Delete Employee Details'";
                     type    =   "'Delete'";
                }
               else{
                    Message = "'Requeseted Change In Employee Details'";
                    type    =   "'true'";
               }

            type    =   "'false'";
            String comma =",",code="'";        
            String str =" { call sp_InsertDelIntoEmp_Request ("+ AfterLoginMainForm.user +",";
            str += " 2,9,-1,"+Message+","+type+","+ ISrno;
            str +=    " )}";
            System.out.println(str);
            con.prepareCall(str).execute();  
        
        
        
            InsConactFullREQ();               
            addRefREQ();
            addlanguageREQ();
            addFamilyREQ();             
            addInterviewDetailsREQ();
            addCompProvidingREQ();
            addQualificationREQ();
            addExperinceREQ();             
            addButtonImages();        

    }
    
    private void AddNewRecord() throws Exception{

        if(!bEdit){
            try {
                /*String maxStr = " Select Max(cont.EmpCode) as EmpCode " +
                        " From Emp_ContactFull cont " +
                        " join Emp_CompDet det" +
                        " on det.EmpCode=cont.EmpCode " +
                        " where Company= "+AfterLoginMainForm.compcode;
                Statement maxStat = con.createStatement();
                ResultSet rsMaxEmpcode = maxStat.executeQuery(maxStr);
                rsMaxEmpcode.next();
                lblEmpCode.setText(rsMaxEmpcode.getInt("EmpCode") + 1 + "");
                System.out.println(lblEmpCode.getText());
                 * */
                String maxStr = "Select Start_EmpCode from Ms_Start_Max_EmpCode where Company="+ AfterLoginMainForm.compcode;
                Statement maxStat = con.createStatement();
                ResultSet rsMaxEmpcode = maxStat.executeQuery(maxStr);
                rsMaxEmpcode.next();
                lblEmpCode.setText(rsMaxEmpcode.getInt("Start_EmpCode") + 1 + "");
                System.out.println(lblEmpCode.getText());

                maxStr = " update Ms_Start_Max_EmpCode set Start_EmpCode= Start_EmpCode+1 " +
                        " where  Company="+AfterLoginMainForm.compcode;
                con.createStatement().executeUpdate(maxStr);
                                
            } catch (Exception ex) {
                System.out.println("Error in Loding Stages...!");
                //ex.printStackTce();
            } 
        }
   
                InsConactFull();   
                addAccountDet();
                addRef();
                addlanguage();
                addFamily();
                addCompanyDetails();
                addInterviewDetails();
                addCompProviding();
                addQualification();
                addExperince();              
                addSalary(); 
                addButtonImages();
                //addShiftMaster();  
                if(!bEdit) {
                    addShiftMaster();            
                    CreateLogin();
                }
                addReminders();
    }

    private void addReminders() throws Exception {

//        String user = "SELECT CASE UserMailId WHEN '' THEN NULL ELSE UserMailId END UserMailId FROM USERMASTER WHERE USERNAME = '"+AfterLoginMainForm.user+"' ";
//        ResultSet userSet = AfterLoginMainForm.con.createStatement().executeQuery(user);
//        String toSelfEmailID=null;
//        while(userSet.next()){
//            toSelfEmailID = userSet.getString("UserMailId");
//        }
//        if(toSelfEmailID == null) return;

        String toSelfEmailID= AutoServerI.HR_EMAIL;

        // <editor-fold defaultstate="collapsed" desc="Contract reminder">
        if (chkContract.isSelected() && !Execute.chkNullReturnBoolean(dtContToDate.getSelectedItem())) {
            Calendar contractToDate = GregorianCalendar.getInstance();
            SimpleDateFormat dateFromat = new SimpleDateFormat("dd/MM/yyyy");
            contractToDate.setTime(dateFromat.parse(dtContToDate.getSelectedItem()));
            System.out.println(dateFromat.format(contractToDate.getTime()));
            Calendar today = GregorianCalendar.getInstance();
            System.out.println(dateFromat.format(today.getTime()));

            if (Execute.chk_DateFroMinMax(
                    contractToDate.get(Calendar.YEAR), contractToDate.get(Calendar.MONTH), contractToDate.get(Calendar.DATE),
                    today.get(Calendar.YEAR), today.get(Calendar.MONTH), today.get(Calendar.DATE)) > 0) {
                String strEmpDetails = "<TABLE><TR><TD>Company Name : <TD>" + cboCompany.getSelectedItem();
                strEmpDetails += "<TR><TD>Branch Name : <TD>" + cboBranch.getSelectedItem();
                strEmpDetails += "<TR><TD>Department  : <TD>" + cboDept.getSelectedItem();
                strEmpDetails += "<TR><TD>Designation : <TD>" + cboDesignation.getSelectedItem();
                strEmpDetails += "<TR><TD>Reporting To: <TD>" + cboReporting.getSelectedItem();
                strEmpDetails += "<TR><TD>Contact No  : <TD>" + txtMobileM.getText();
                strEmpDetails += "</TABLE>";
                strEmpDetails = strEmpDetails.replaceAll("'", "''");

                String strTaskData = "insert into Trn_Taskdata ( ";
                strTaskData += "Subject,Description,StartDate,EndDate,ReminderDate,ReminderTime,Duration,EmailID";
                strTaskData += ",ConfirmEmailID,MobileNo,TaskType,repeatinterval,RecurType,Company,Branch,FinYear,Ins_by,Ins_Date,Upd_By,Upd_Date )";
                strTaskData += "VALUES( ";
                strTaskData += "'Conformation of Employee " + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''") + "'";
                strTaskData += ",'<FONT TYPE=\"times New roman\">Employee Name: <B>" + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''");
                strTaskData += "</B> has completed <B>contract</B> period (" + dtContFrom.getSelectedItem() + "-" + dtContToDate.getSelectedItem() + ").<BR><BR>Employee details are as follows.";
                strTaskData += strEmpDetails;
                strTaskData += "<I><BR><BR><BR>Please Note that this is an auto-generated mail.Kindly Ignore this if this mail is not for you.</I></FONT>'";

                contractToDate.set(Calendar.HOUR_OF_DAY, 10);
                contractToDate.set(Calendar.MINUTE, 59);
                contractToDate.set(Calendar.SECOND, 59);
                contractToDate.set(Calendar.MILLISECOND, 0);
                //            contractToDate.set(Calendar.AM_PM, Calendar.AM);

                dateFromat.applyPattern("yyyy-MM-dd HH:mm:ss");

                strTaskData += ",GETDATE(),'" + dateFromat.format(contractToDate.getTime()) + "'";
                dateFromat.applyPattern("yyyy-MM-dd");
                strTaskData += ",'" + dateFromat.format(contractToDate.getTime()) + "'";

                contractToDate.set(Calendar.MINUTE, 44);
                dateFromat.applyPattern("HH:mm:ss");
                strTaskData += ",'" + dateFromat.format(contractToDate.getTime()) + "'";
                strTaskData += ",null,'";// + (Execute.isValidEmailId(txtEmailM.getText()) ? txtEmailM.getText() + "," : "");
                strTaskData += toSelfEmailID + "'";
                strTaskData += ",NULL,NULL," + 1;
                strTaskData += ",NULL,"+AutoServerI.NONE+"," + AfterLoginMainForm.compcode + "," + "null,'" + AfterLoginMainForm.finyear + "','" + AfterLoginMainForm.user + "'";
                strTaskData += ",getDate()";
                strTaskData += ",'" + lblEmpCode.getText() + "-Contract',NULL )";
                System.out.println(strTaskData);
                con.createStatement().executeUpdate(strTaskData);
            }
        }// </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="Probation reminder">
        if (chkProbation.isSelected() &&  !Execute.chkNullReturnBoolean(dtProbToDate.getSelectedItem())) {
            Calendar probationToDate = GregorianCalendar.getInstance();
            SimpleDateFormat dateFromat = new SimpleDateFormat("dd/MM/yyyy");
            probationToDate.setTime(dateFromat.parse(dtProbToDate.getSelectedItem()));
            Calendar today = GregorianCalendar.getInstance();

            if (Execute.chk_DateFroMinMax(
                    probationToDate.get(Calendar.YEAR), probationToDate.get(Calendar.MONTH), probationToDate.get(Calendar.DATE),
                    today.get(Calendar.YEAR), today.get(Calendar.MONTH), today.get(Calendar.DATE)) > 0) {
                String strEmpDetails = "<TABLE><TR><TD>Company Name : <TD>" + cboCompany.getSelectedItem();
                strEmpDetails += "<TR><TD>Branch Name : <TD>" + cboBranch.getSelectedItem();
                strEmpDetails += "<TR><TD>Department  : <TD>" + cboDept.getSelectedItem();
                strEmpDetails += "<TR><TD>Designation : <TD>" + cboDesignation.getSelectedItem();
                strEmpDetails += "<TR><TD>Reporting To: <TD>" + cboReporting.getSelectedItem();
                strEmpDetails += "<TR><TD>Contact No  : <TD>" + txtMobileM.getText();
                strEmpDetails += "</TABLE>";
                strEmpDetails = strEmpDetails.replaceAll("'", "''");

                String strTaskData = "insert into Trn_Taskdata ( ";
                strTaskData += "Subject,Description,StartDate,EndDate,ReminderDate,ReminderTime,Duration,EmailID";
                strTaskData += ",ConfirmEmailID,MobileNo,TaskType,repeatinterval,RecurType,Company,Branch,FinYear,Ins_by,Ins_Date,Upd_By,Upd_Date )";
                strTaskData += "VALUES( ";
                strTaskData += "'Probation of Employee " + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''") + "'";
                strTaskData += ",'<FONT TYPE=\"times New roman\">Employee Name: <B>" + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''");
                strTaskData += "</B> has completed <B>Probation</B> period (" + dtProbFrom.getSelectedItem() + "-" + dtProbToDate.getSelectedItem() + ").<BR><BR>Employee details are as follows.";
                strTaskData += strEmpDetails;
                strTaskData += "<I><BR><BR><BR>Please Note that this is an auto-generated mail.Kindly Ignore this if this mail is not for you.</I></FONT>'";

                probationToDate.set(Calendar.HOUR_OF_DAY, 10);
                probationToDate.set(Calendar.MINUTE, 59);
                probationToDate.set(Calendar.SECOND, 59);
                probationToDate.set(Calendar.MILLISECOND, 0);
                //            contractToDate.set(Calendar.AM_PM, Calendar.AM);

                dateFromat.applyPattern("yyyy-MM-dd HH:mm:ss");

                strTaskData += ",GETDATE(),'" + dateFromat.format(probationToDate.getTime()) + "'";
                dateFromat.applyPattern("yyyy-MM-dd");
                strTaskData += ",'" + dateFromat.format(probationToDate.getTime()) + "'";

                probationToDate.set(Calendar.MINUTE, 44);
                dateFromat.applyPattern("HH:mm:ss");
                strTaskData += ",'" + dateFromat.format(probationToDate.getTime()) + "'";
                strTaskData += ",null,'";// + (Execute.isValidEmailId(txtEmailM.getText()) ? txtEmailM.getText() + "," : "");
                strTaskData += toSelfEmailID + "'";
                strTaskData += ",NULL,NULL," + 1;
                strTaskData += ",NULL,"+AutoServerI.NONE+"," + AfterLoginMainForm.compcode + "," + "null,'" + AfterLoginMainForm.finyear + "','" + AfterLoginMainForm.user + "'";
                strTaskData += ",getDate()";
                strTaskData += ",'" + lblEmpCode.getText() + "-Probation',NULL )";
                System.out.println(strTaskData);
                con.createStatement().executeUpdate(strTaskData);
            }
        }// </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="Birthday reminder">
        if (!Execute.chkNullReturnBoolean(dtDOB.getSelectedItem())) {
            Calendar birtDateDate = GregorianCalendar.getInstance();
            SimpleDateFormat dateFromat = new SimpleDateFormat("dd/MM/yyyy");
            birtDateDate.setTime(dateFromat.parse(dtDOB.getSelectedItem()));
            Calendar today = GregorianCalendar.getInstance();

            if (Execute.chk_DateFroMinMax(
                    birtDateDate.get(Calendar.YEAR), birtDateDate.get(Calendar.MONTH), birtDateDate.get(Calendar.DATE),
                    today.get(Calendar.YEAR), today.get(Calendar.MONTH), today.get(Calendar.DATE)) < 0) {
                String strEmpDetails = "<TABLE><TR><TD>Company Name : <TD>" + cboCompany.getSelectedItem();
                strEmpDetails += "<TR><TD>Branch Name : <TD>" + cboBranch.getSelectedItem();
                strEmpDetails += "<TR><TD>Department  : <TD>" + cboDept.getSelectedItem();
                strEmpDetails += "<TR><TD>Designation : <TD>" + cboDesignation.getSelectedItem();
                strEmpDetails += "<TR><TD>Reporting To: <TD>" + cboReporting.getSelectedItem();
                strEmpDetails += "<TR><TD>Contact No  : <TD>" + txtMobileM.getText();
                strEmpDetails += "</TABLE>";
                strEmpDetails = strEmpDetails.replaceAll("'", "''");

                String strTaskData = "insert into Trn_Taskdata ( ";
                strTaskData += "Subject,Description,StartDate,EndDate,ReminderDate,ReminderTime,Duration,EmailID";
                strTaskData += ",ConfirmEmailID,MobileNo,TaskType,repeatinterval,RecurType,Company,Branch,FinYear,Ins_by,Ins_Date,Upd_By,Upd_Date )";
                strTaskData += "VALUES( ";
                strTaskData += "'Birthday Reminder " + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''") + "'";
                strTaskData += ",'<FONT TYPE=\"times New roman\">Today is birthday of our Employee, Name: <B>" + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''");
                strTaskData += "<BR><BR>Employee details are as follows.";
                strTaskData += strEmpDetails;
                strTaskData += "<I><BR><BR><BR>Please Note that this is an auto-generated mail.Kindly Ignore this if this mail is not for you.</I></FONT>'";

                birtDateDate.set(Calendar.HOUR_OF_DAY, 10);
                birtDateDate.set(Calendar.MINUTE, 59);
                birtDateDate.set(Calendar.SECOND, 59);
                birtDateDate.set(Calendar.MILLISECOND, 0);
                //            contractToDate.set(Calendar.AM_PM, Calendar.AM);
                GregorianCalendar  endDate =  (GregorianCalendar) birtDateDate.clone();
                endDate.set(GregorianCalendar.YEAR,2100);

                dateFromat.applyPattern("yyyy-MM-dd HH:mm:ss");

                strTaskData += ",GETDATE(),'" + dateFromat.format(endDate.getTime()) + "'";
                dateFromat.applyPattern("yyyy-MM-dd");
                strTaskData += ",'" + dateFromat.format(birtDateDate.getTime()) + "'";

                birtDateDate.set(Calendar.MINUTE, 44);
                dateFromat.applyPattern("HH:mm:ss");
                strTaskData += ",'" + dateFromat.format(birtDateDate.getTime()) + "'";
                strTaskData += ",null,'";
                strTaskData += toSelfEmailID + "'";
                strTaskData += ",NULL,NULL," + 1;
                strTaskData += ",1,"+AutoServerI.YEARLY+","   + AfterLoginMainForm.compcode + "," + "null,'" + AfterLoginMainForm.finyear + "','" + AfterLoginMainForm.user + "'";
                strTaskData += ",getDate()";
                strTaskData += ",'" + lblEmpCode.getText() + "-BirthDay',NULL )";
                System.out.println(strTaskData);
                con.createStatement().executeUpdate(strTaskData);
            }
        }// </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="Anniversary Reminder">
        if (chkMarriege.isSelected() &&!Execute.chkNullReturnBoolean(dtMarriageDate.getSelectedItem())) {
            Calendar birtDateDate = GregorianCalendar.getInstance();
            SimpleDateFormat dateFromat = new SimpleDateFormat("dd/MM/yyyy");
            birtDateDate.setTime(dateFromat.parse(dtMarriageDate.getSelectedItem()));
            Calendar today = GregorianCalendar.getInstance();

                String strEmpDetails = "<TABLE><TR><TD>Company Name : <TD>" + cboCompany.getSelectedItem();
                strEmpDetails += "<TR><TD>Branch Name : <TD>" + cboBranch.getSelectedItem();
                strEmpDetails += "<TR><TD>Department  : <TD>" + cboDept.getSelectedItem();
                strEmpDetails += "<TR><TD>Designation : <TD>" + cboDesignation.getSelectedItem();
                strEmpDetails += "<TR><TD>Reporting To: <TD>" + cboReporting.getSelectedItem();
                strEmpDetails += "<TR><TD>Contact No  : <TD>" + txtMobileM.getText();
                strEmpDetails += "</TABLE>";
                strEmpDetails = strEmpDetails.replaceAll("'", "''");

                String strTaskData = "insert into Trn_Taskdata ( ";
                strTaskData += "Subject,Description,StartDate,EndDate,ReminderDate,ReminderTime,Duration,EmailID";
                strTaskData += ",ConfirmEmailID,MobileNo,TaskType,repeatinterval,RecurType,Company,Branch,FinYear,Ins_by,Ins_Date,Upd_By,Upd_Date )";
                strTaskData += "VALUES( ";
                strTaskData += "'Anniversary Reminder " + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''") + "'";
                strTaskData += ",'<FONT TYPE=\"times New roman\">Today is Anniversary of our Employee, Name: <B>" + lblEmpCode.getText() + "-" + txtFName.getText().replaceAll("'", "''") + " " + (txtSName.getText() + "").replaceAll("'", "''") + " " + txtLName.getText().replaceAll("'", "''");
                strTaskData += "<BR><BR>Employee details are as follows.";
                strTaskData += strEmpDetails;
                strTaskData += "<I><BR><BR><BR>Please Note that this is an auto-generated mail.Kindly Ignore this if this mail is not for you.</I></FONT>'";

                birtDateDate.set(Calendar.HOUR_OF_DAY, 10);
                birtDateDate.set(Calendar.MINUTE, 59);
                birtDateDate.set(Calendar.SECOND, 59);
                birtDateDate.set(Calendar.MILLISECOND, 0);
                //            contractToDate.set(Calendar.AM_PM, Calendar.AM);
                java.util.GregorianCalendar  endDate =  (java.util.GregorianCalendar) birtDateDate.clone();
                endDate.set(java.util.GregorianCalendar.YEAR,2100);

                dateFromat.applyPattern("yyyy-MM-dd HH:mm:ss");

                strTaskData += ",GETDATE(),'" + dateFromat.format(endDate.getTime()) + "'";
                dateFromat.applyPattern("yyyy-MM-dd");
                strTaskData += ",'" + dateFromat.format(birtDateDate.getTime()) + "'";

                birtDateDate.set(Calendar.MINUTE, 44);
                dateFromat.applyPattern("HH:mm:ss");
                strTaskData += ",'" + dateFromat.format(birtDateDate.getTime()) + "'";
                strTaskData += ",null,'";
                strTaskData += toSelfEmailID + "'";
                strTaskData += ",NULL,NULL," + 1;
                strTaskData += ",1,"+AutoServerI.YEARLY+","   + AfterLoginMainForm.compcode + "," + "null,'" + AfterLoginMainForm.finyear + "','" + AfterLoginMainForm.user + "'";
                strTaskData += ",getDate()";
                strTaskData += ",'" + lblEmpCode.getText() + "-Anniversary',NULL )";
                System.out.println(strTaskData);
                con.createStatement().executeUpdate(strTaskData);
            
        }// </editor-fold>

    }

    public void reloadReminders() {
          try {
            String str = "SELECT DB_NAME()DB_NAME,-786 SRNO UNION SELECT DB_NAME()DB_NAME,SRNO FROM TRN_TASKDATA WHERE /*INS_BY in ('"+AfterLoginMainForm.user +"','Kunal') and*/ Upd_by like '"+lblEmpCode.getText()+"%'";            
            System.out.println(str);
            ResultSet empTaskSet = AfterLoginMainForm.con.createStatement().executeQuery(str);
            Registry registry = LocateRegistry.getRegistry(design.Static.AutoServerIP, design.Static.AutoServerPort);
            AutoServerI comp  =(AutoServerI) registry.lookup(design.Static.AuoServerName);
            System.out.println("Auto Server found");
            while (empTaskSet.next()) {
//              int taskNo,String dbName,int company,int branch,String finYear
                if( empTaskSet.getInt("SRNO") == -786  ){
                    comp.closeEmployeeTask(
                        lblEmpCode.getText(), empTaskSet.getString("DB_NAME"),
                        AfterLoginMainForm.compcode , 0, AfterLoginMainForm.finyear
                    );
                    continue;
                }
                comp.addTask(
                    empTaskSet.getInt("Srno")   , empTaskSet.getString("DB_NAME"),
                    AfterLoginMainForm.compcode , 0, AfterLoginMainForm.finyear
                );
            }
        }catch(java.rmi.NotBoundException e ){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage()+" not bound");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void addButtonImages(){
         if( attendance.AfterLoginMainForm.WebFolderShared  )
         {
            MyCopyImage( txtPerpath.getText(), attendance.AfterLoginMainForm.EmployeeImg );
            MyCopyImage( lblThumb.getText(), attendance.AfterLoginMainForm.EmployeeThumbImg );
            MyCopyImage( lblSign.getText(), attendance.AfterLoginMainForm.EmployeeSignImg );                        
         }
    }

    public static  void MyCopyImage(String path, String Where ){
            
        if(path != null || path != "" || !path.equals("")  ){
            try{
                //System.out.println("\\\\"+attendance.AfterLoginMainForm.WebServerName  + attendance.AfterLoginMainForm.EmployeeLogInImage +"\\"  +txtPerpath.getText());
                Others.Execute.CopyImage( path, "\\\\"+attendance.AfterLoginMainForm.WebServerName +"\\" + Where);
            } catch (java.io.FileNotFoundException ex) {
                //Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } catch (IOException ex) {
               //Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
         }       
   }
     
    private void chkMarriegeItemStateChanged(java.awt.event.ItemEvent evt) {                                             

        if (chkMarriege.isSelected() && btnSaveNew.isEnabled()) {
            this.dtMarriageDate.setEnabled(true);
            this.txtChildren.setEnabled(true);
            txtLName.setNextFocusableComponent(txtAddressM);
            chkMarriege.setNextFocusableComponent(dtMarriageDate);
        } else {
            this.dtMarriageDate.setEnabled(false);
            this.txtChildren.setEnabled(false);
            //chkMarriege.setNextFocusableComponent(btnAddRef);
        }
    }                                            

    private void chkMarriegeActionPerformed(java.awt.event.ActionEvent evt) {                                            
        
        /*
        Execute.panelEnable(pnlPersonalDet, true);  
        Execute.panelEnable(pnlSal_Ben, true);  
        Execute.panelEnable(pnlExp_Qual, true);  
        Execute.panelEnable(pnlFamilyDet, true);        
        Execute.panelEnable(pnlFullDet, true);  
        txtAddressP.setEnabled(true);
        dtEffectDate.setEnabled(true);*/

    }                                           

    private void Status(boolean choice,boolean New,boolean cancel){
       
       btnNew.setEnabled(choice);
       btnEdit.setEnabled(choice);
       
       if(!cancel){
          btnSaveNew.setEnabled(!choice && !AfterLoginMainForm.userType.equals("User") /* THIS WILL NOT STUBMIT REQUEST AS PER ARCHANA ON 27-01-2012 */);
           if(New)
             btnDelete.setEnabled(choice);
           else{
             btnDelete.setEnabled(!choice);
             if (!bRDelete)
                 btnDelete.setEnabled(false);
           }
       }else{
            btnSaveNew.setEnabled(false);
            btnDelete.setEnabled(false);
       }
       
       btnFirst.setEnabled(choice );
       btnLast.setEnabled(choice  );
       btnNext.setEnabled(choice  );
       btnPrev.setEnabled(choice  );
       btnSearch.setEnabled(choice  );
               
       
    }
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {                                       
        bEdit=false;      
      
        btnCancelActionPerformed(null);
        Status(false, true,false );
        makeAllEnable(true);
        checkBoxEvents();      
        chkIsActive.setSelected(true);
        String maxStr = "Select Start_EmpCode from Ms_Start_Max_EmpCode where Company="+ AfterLoginMainForm.compcode;
        try{
         Statement maxStat = con.createStatement();
         ResultSet rsMaxEmpcode = maxStat.executeQuery(maxStr);
         rsMaxEmpcode.next();
         lblEmpCode.setText(rsMaxEmpcode.getInt("Start_EmpCode") + 1 + "");
         System.out.println(lblEmpCode.getText());
        }catch( SQLException e) { e.printStackTrace();}
        
    }                                      

    private void btnAddEarningsActionPerformed(java.awt.event.ActionEvent evt) {                                               
        SrNoTblEarnings++;
        Vector v = new Vector();
        if (SrNoTblEarnings <= 0) {
            SrNoTblEarnings = 1;
        }
        v.add(SrNoTblEarnings);
        v.add("");
        v.add(null);
        modelSal.addRow(v);
}                                              

    private void btnRemEarningsActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (tblSalEarnings.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Sal Type to Delete . . . ");
            return;
        }
        SrNoEarn--;
        int totalno = tblSalEarnings.getRowCount();
        int stratno = tblSalEarnings.getSelectedRow();
        while (stratno < totalno) {
            try {
                tblSalEarnings.setValueAt(stratno, stratno, 0);
                stratno++;
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }    
        modelSal.removeRow(tblSalEarnings.getSelectedRow());    
}                                              

    private void tbdEmpDetStateChanged(javax.swing.event.ChangeEvent evt) {                                       
        JTabbedPane pane = (JTabbedPane) evt.getSource();
        if (pane.getSelectedIndex() == 1) {
            if (chkTrainee.isSelected()) {
                java.util.Calendar curCalendar = java.util.Calendar.getInstance();
                if (dtDoj.getSelectedItem().equals("") ) {
                    JOptionPane.showMessageDialog(this, "Please Select Date Of Joining..");
                    pane.setSelectedIndex(0);
                    dtDoj.transferFocus();
                    return;
                }
                curCalendar.set(Integer.parseInt(dtDoj.getSelectedItem().toString().substring(6, 10)), Integer.parseInt(dtDoj.getSelectedItem().toString().substring(3, 5)), Integer.parseInt(dtDoj.getSelectedItem().toString().substring(0, 2)));
                curCalendar.roll(java.util.Calendar.MONTH, 3);
                // System.out.println("Month: "+curCalendar.get(java.util.Calendar.MONTH));     
                //  System.out.println("Date: "+curCalendar.get(java.util.Calendar.DATE));     
                String time = "";
                int date = curCalendar.get(java.util.Calendar.DATE);
                int month = curCalendar.get(java.util.Calendar.MONTH);
                if (date < 10) {
                    time = "0" + date + "/";
                } else {
                    time = date + "/";
                }
                if (month < 10) {
                    time = time + "0" + month + "/";
                } else {
                    time = time + month + "/";
                }

                time = time + curCalendar.get(java.util.Calendar.YEAR);
                dtEffectDate.setSelectedItem(time); 
                 dtEffectDate.setEnabled(false);
                //StateForTraine(true);
                // ClearSalTables();
            } else {
               // StateForTraine(false);
                 dtEffectDate.setEnabled(true);
               // ClearSalTables();
                //dtEffectDate.setSelectedItem("");               
            }
            
            if(chkContract.isSelected()){
                if (dtContFrom.getSelectedItem().equals("") || dtContToDate.getSelectedItem().equals("")) {
                    JOptionPane.showMessageDialog(this, "Please Select Date Of Contract From and To Date...");
                    pane.setSelectedIndex(0);
                    dtContFrom.transferFocus();
                    return;
                }                
            }
        }
    }                                      
    
    private  void StateForTraine(boolean choice){
        choice = !choice;
        dtEffectDate.setEnabled(choice);
        tbdSalType.setEnabled(choice);
        tblSalOthers.setEnabled(choice);        
        tblSalEarnings.setEnabled(choice);
        tblSalDedEmpCon.setEnabled(choice);
        tblSalDeduction.setEnabled(choice);
        btnAddDed.setEnabled(choice);
        btnRemDed.setEnabled(choice);
        btnAddEarnings.setEnabled(choice);
        btnRemEarnings.setEnabled(choice);
        btnAddEmpCon.setEnabled(choice);
        btnRemEmpCon.setEnabled(choice);
        btnAddOthers.setEnabled(choice);
        btnRemOthers.setEnabled(choice);
        rdoAuto.setEnabled(choice);
        rdoManual.setEnabled(choice);
        btnCalc.setEnabled(choice);
        chkPFYN.setEnabled(choice);
    }     
     
    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {                                        
        chknAddDedRow();        
}                                       

    private void btnRemDedActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (tblSalDeduction.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Sal Type to Delete . . . ");
            return;
        }
        modelDedSal.removeRow(tblSalDeduction.getSelectedRow());
        SrNoTblSalEmpDed--;
    }                                         

    private void btnAddDedActionPerformed(java.awt.event.ActionEvent evt) {                                          
        SrNoTblSalEmpDed++;
        Vector v = new Vector();
        if (SrNoTblSalEmpDed <= 0) {
            SrNoTblSalEmpDed = 1;            
        }
        v.add(SrNoTblSalEmpDed);
        v.add("");
        v.add(null);
        modelDedSal.addRow(v);
    }                                         

    private void chkPFYNActionPerformed(java.awt.event.ActionEvent evt) {                                        
    // TODO add your handling code here:
    }                                       

    private void txtSumEmpConActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void tblSalEarningsFocusLost(java.awt.event.FocusEvent evt) {                                         
        
    }                                        

    private void tblSalEarningsKeyTyped(java.awt.event.KeyEvent evt) {                                        
    
    try {

 
        float Earnigs = 0, Deduct = 0, EC = 0;              
        float others=0; 
        //Setting Net Salary    
        for (int i = 0; i < tblSalEarnings.getRowCount(); i++) {
            Earnigs += new Float(tblSalEarnings.getValueAt(i, 2).toString());
        }
        for (int i = 0; i < tblSalDeduction.getRowCount(); i++) {
            Deduct += new Float(tblSalDeduction.getValueAt(i, 2).toString());
        }
        for (int i = 0; i < tblSalDedEmpCon.getRowCount(); i++) {
            EC += new Float(tblSalDedEmpCon.getValueAt(i, 2).toString());
        }
      
        for (int i = 0; i < tblSalOthers.getRowCount(); i++) {
            others += new Float(tblSalOthers.getValueAt(i, 2).toString());
        }
        float [] FBT =  CalcFBT();
        
        /* Change Made on 28/05/2008 For FBT
        tblNetSalDet.setValueAt(new Float(Earnigs - Deduct), 0, 0);
         if(FBT != null)
            tblNetSalDet.setValueAt(new Float(Earnigs), 0, 1);
        if(FBT != null)
            tblNetSalDet.setValueAt(new Float(Earnigs + EC + Math.round(FBT[0])), 0, 2);
        else
           tblNetSalDet.setValueAt(new Float(Earnigs + EC), 0, 2);
        */
        
        if(FBT != null){                           
            Earnigs = Earnigs + Math.round(FBT[0]);
        }
            
        tblNetSalDet.setValueAt(new Float(Earnigs - Deduct), 0, 0);
        tblNetSalDet.setValueAt(new Float(Earnigs), 0, 1);
        tblNetSalDet.setValueAt(new Float(Earnigs + EC), 0, 2);
        
        
        txtsumDed.setText(Deduct+"");
        txtSumEmpCon.setText(EC+"");       
        txtSumOthers.setText(others+"");
        //System.out.println("Key Event");
        
        } catch (Exception exception) {        }
        
    }                                       

    private void tblSalEarningsMouseClicked(java.awt.event.MouseEvent evt) {                                            
        tblSalEarningsKeyTyped(null);
    }                                           

    private void btnAddEmpConActionPerformed(java.awt.event.ActionEvent evt) {                                             
        SrNoTblEmpCon++;
        Vector v = new Vector();
        if (SrNoTblEmpCon <= 0) {
            SrNoTblEmpCon = 1;            
        }
        v.add(SrNoTblEmpCon);
        v.add("");
        v.add(null);
        modelSalDedEmpCon.addRow(v);
}                                            

    private void btnRemEmpConActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if (tblSalDedEmpCon.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Sal Type to Delete . . . ");
            return;
        }
        modelSalDedEmpCon.removeRow(tblSalDedEmpCon.getSelectedRow());
        SrNoTblEmpCon--;
}                                            

    private void tblSalDeductionKeyTyped(java.awt.event.KeyEvent evt) {                                         
        tblSalEarningsKeyTyped(null);
    }                                        

    private void tblSalDeductionMouseClicked(java.awt.event.MouseEvent evt) {                                             
        tblSalEarningsKeyTyped(null);
    }                                            

    private void tblSalDedEmpConKeyTyped(java.awt.event.KeyEvent evt) {                                         
        tblSalEarningsKeyTyped(null);
    }                                        

    private void tblSalDedEmpConMouseClicked(java.awt.event.MouseEvent evt) {                                             
        tblSalEarningsKeyTyped(null);
    }                                            

    private void rdoManualItemStateChanged(java.awt.event.ItemEvent evt) {                                           
        if(rdoManual.isSelected()){
            btnCalc.setEnabled(false);      
            ClearSalTables();
        }        
    }                                          
    
    public void ClearSalTables(){
    
        for(int i = modelDedSal.getRowCount()-1 ; i>=0 ;i--){
               modelDedSal.removeRow(i);
               SrNoTblSalEmpDed --;
            }             
        for(int i = modelSalDedEmpCon.getRowCount()-1 ; i>=0 ;i--){
           modelSalDedEmpCon.removeRow(i);
           SrNoTblEmpCon --;
        }  
       /* for(int i = modelSalOthers.getRowCount()-1 ; i>=0 ;i--){
           modelSalOthers.removeRow(i);
           SrNoSalOthers --;
       } */    
        
    }
      
    public void clearAllTables(){
            
            Execute.ClearTable(tblSalDedEmpCon);
            SrNoTblEmpCon=0;
            Execute.ClearTable(tblSalDeduction);
            SrNoTblSalEmpDed = 0;
            Execute.ClearTable(tblSalEarnings);
            SrNoTblEarnings=0;        
            Execute.ClearTable(tblSalOthers);
            SrNoSalOthers=0;            
            Execute.ClearTable(tblExperinceDetails);
            SrNoExperncDet=0;
            Execute.ClearTable(tblFamily); 
            SrNoFamily=0;
            Execute.ClearTable(tblLanguage); 
            SrNoLang=0;
            Execute.ClearTable(tblQualification); 
            SrNoQualification=0;
            Execute.ClearTable(tblRef);           
            SrNoRef=0;
             
    }
    
    private void tblSalOthersMouseClicked(java.awt.event.MouseEvent evt) {                                          
       tblSalEarningsKeyTyped(null);
}                                         

    private void tblSalOthersKeyTyped(java.awt.event.KeyEvent evt) {                                      
        tblSalOthersMouseClicked(null);
}                                     

    private void btnAddOthersActionPerformed(java.awt.event.ActionEvent evt) {                                             
      Vector v = new Vector();
        if (SrNoSalOthers <= 0) {
            SrNoSalOthers = 1;
            v.add(SrNoSalOthers);
            v.add("");
            v.add(null);
            modelSalOthers.addRow(v);
            SrNoSalOthers++;
        } else {
            v.add(SrNoSalOthers);
            v.add("");
            v.add(null);
            modelSalOthers.addRow(v);
            SrNoSalOthers++;
        }
}                                            

    private void btnRemOthersActionPerformed(java.awt.event.ActionEvent evt) {                                             
         if (tblSalOthers.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Sal Type to Delete . . . ");
            return;
        }
        SrNoSalOthers--;
        int totalno = tblSalOthers.getRowCount();
        int stratno = tblSalOthers.getSelectedRow();
        while (stratno < totalno) {
            try {
                tblSalOthers.setValueAt(stratno, stratno, 0);
                stratno++;
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
       // DefaultTableModel model = (DefaultTableModel) tblSalEarnings.getModel();
        modelSalOthers.removeRow(tblSalOthers.getSelectedRow());       
}                                            

    private void tblSalOthersKeyPressed(java.awt.event.KeyEvent evt) {                                        
        tblSalOthersKeyTyped(null);
    }                                       

    private void rdoAutoItemStateChanged(java.awt.event.ItemEvent evt) {                                         
     if(rdoAuto.isSelected())
         btnCalc.setEnabled(true);
    }                                        

    private void lblThumbMouseClicked(java.awt.event.MouseEvent evt) {                                      
             
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {

                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".bmp")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".jpg")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".gif")) {
                        return true;
                    }
                    return false;
                //return f.getName().toLowerCase().endsWith(".jpeg")
                //   || f.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "JPG Files";
                }
            });
            chooser.showOpenDialog(this);

            System.out.println(chooser.getCurrentDirectory().toString());
            lblThumb.setIcon(new ImageIcon(
                    new ImageIcon(chooser.getSelectedFile().toString())
                    .getImage().getScaledInstance(btnImg.getWidth(), btnImg.getHeight(), Image.SCALE_FAST))
                    );
            txtThumb.setText(chooser.getSelectedFile().toString());
    }                                     

    private void lblSignMouseClicked(java.awt.event.MouseEvent evt) {                                     
          JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {

                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".bmp")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".jpg")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".gif")) {
                        return true;
                    }
                    return false;
                //return f.getName().toLowerCase().endsWith(".jpeg")
                //   || f.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "JPG Files";
                }
            });
            chooser.showOpenDialog(this);

            System.out.println(chooser.getCurrentDirectory().toString());
            lblSign.setIcon(new ImageIcon(
                    new ImageIcon(chooser.getSelectedFile().toString())
                    .getImage().getScaledInstance(lblSign.getWidth(), lblSign.getHeight(), Image.SCALE_FAST))
                    );
            txtSign.setText(chooser.getSelectedFile().toString());
    }                                    

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
       if(!bRSearch) return;

       String strEmpCode = Others.StaticSearchPanel.showSearchPan(this, con);//SearchPanel.showSearchPan(this, con);
       System.out.println(strEmpCode);

       /*if(strEmpCode == null || strEmpCode.equals(""))
            return;
       */
        search_fill_EmpData(strEmpCode);
          
}                                         
    
    private void search_fill_EmpData(String EmpCode){
        try{
            loadedset.first();
            rsloadedCompany.first();
            rsloadedInterView.first();
            rsloadedCopmProv.first();

            do{
                  System.out.println(loadedset.getString("EmpCode")+"-"+EmpCode);
                  if( loadedset.getString("EmpCode").equals( EmpCode ) ){                           
                      break;
                  }
                  rsloadedCompany.next();
                  rsloadedInterView.next();
                  rsloadedCopmProv.next();
            } while( loadedset.next());

            fillData();
        }catch(Exception e) { e.printStackTrace();}
    }

    private void btnAddExpActionPerformed(java.awt.event.ActionEvent evt) {                                          
        Vector v = new Vector();
        if (SrNoExperncDet == 0) {
            SrNoExperncDet = 1;
            v.add(SrNoExperncDet);
            v.add("");
            v.add(null);
            modelExpernc.addRow(v);
            SrNoExperncDet++;
        } else {
            v.add(SrNoExperncDet);
            v.add("");
            v.add(null);
            modelExpernc.addRow(v);
            SrNoExperncDet++;
        }
    }                                         

    private void btnQualificationActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        Vector v = new Vector();
        if (SrNoQualification == 0) {
            SrNoQualification = 1;
            v.add(SrNoQualification);
            v.add("");
            v.add(null);
            modelQualification.addRow(v);
            SrNoQualification++;
        } else {
            v.add(SrNoQualification);
            v.add("");
            v.add(null);
            modelQualification.addRow(v);
            SrNoQualification++;
        }
    }                                                

    private void btnRemExpActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (tblExperinceDetails.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Reference to Delete . . . ");
            return;
        }
        SrNoExperncDet--;
        int totalno = tblExperinceDetails.getRowCount();
        int stratno = tblExperinceDetails.getSelectedRow();
        while (stratno < totalno) {
            tblExperinceDetails.setValueAt(stratno, stratno, 0);
            stratno++;
        }       
        modelExpernc.removeRow(tblExperinceDetails.getSelectedRow());
    }                                         

    private void btnRemQualActionPerformed(java.awt.event.ActionEvent evt) {                                           
         if (tblQualification.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Reference to Delete . . . ");
            return;
        }
        SrNoQualification--;
        int totalno = tblQualification.getRowCount();
        int stratno = tblQualification.getSelectedRow();
        while (stratno < totalno) {
            tblQualification.setValueAt(stratno, stratno, 0);
            stratno++;
        }       
        modelQualification.removeRow(tblQualification.getSelectedRow());
    }                                          

    private void tblExperinceDetailsMouseMoved(java.awt.event.MouseEvent evt) {                                               
       /*  DefaultCellEditor edit   = (DefaultCellEditor) tblExperinceDetails.getColumnModel().getColumn(2).getCellEditor();
          tblExperinceDetails.setValueAt(((JComboBox)edit.getComponent()).getSelectedItem(),tblExperinceDetails.getSelectedRow(),2);  
      */
    }                                              

    private void tblExperinceDetailsKeyPressed(java.awt.event.KeyEvent evt) {                                               
          /*DefaultCellEditor edit  = (DefaultCellEditor) tblExperinceDetails.getColumnModel().getColumn(2).getCellEditor();
          tblExperinceDetails.setValueAt(((JComboBox)edit.getComponent()).getSelectedItem(),tblExperinceDetails.getSelectedRow(),2);  
        */
    }                                              

    private void tblExperinceDetailsComponentHidden(java.awt.event.ComponentEvent evt) {                                                    
      
    }                                                   

    private void txtAddressMKeyTyped(java.awt.event.KeyEvent evt) {                                     
       /*if(evt.getKeyCode() !=  java.awt.event.KeyEvent.VK_BACK_SPACE)                    
        if (txtEmailM.getText().length() > 30) {
            JOptionPane.showMessageDialog(this, "Email ID Can not be Greater Than 30 . . . !.");
        }*/
        //Execute.ChkLengthForTextOnKeyStroke(evt,this,txtAddressM.getText(),50);
    }                                    

    private void txtFHGNameKeyPressed(java.awt.event.KeyEvent evt) {                                      
       // Execute.ChkLengthForTextOnKeyStroke(evt,this, ((JTextField)evt.getSource()).getText(),60);
    }                                     

    private void txtRelationKeyPressed(java.awt.event.KeyEvent evt) {                                       
      //  Execute.ChkLengthForTextOnKeyStroke(evt,this, ((JTextField)evt.getSource()).getText(),30);
    }                                      

    private void cboReligionKeyPressed(java.awt.event.KeyEvent evt) {                                       
      //  Execute.ChkLengthForTextOnKeyStroke(evt,this, ((JTextField)evt.getSource()).getText(),30); 
    }                                      

    private void txtBirthPlaceActionPerformed(java.awt.event.ActionEvent evt) {                                              
      
    }                                             

    private void txtBirthPlaceKeyPressed(java.awt.event.KeyEvent evt) {                                         
       //  Execute.ChkLengthForTextOnKeyStroke(evt,this,((JTextField)evt.getSource()).getText(),50);
    }                                        

    private void cboSexActionPerformed(java.awt.event.ActionEvent evt) {                                       
         
    }                                      

    private void txtChildrenKeyPressed(java.awt.event.KeyEvent evt) {                                       
       // Execute.ChkLengthForTextOnKeyStroke(evt,this,((JTextField)evt.getSource()).getText(),2);
    }                                      

    private void chkIsActiveActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if(!bRReport || "user".equalsIgnoreCase(AfterLoginMainForm.userType))
            return;               
        ReportEmpDetails.showManPan(getContentPane(), con, lblEmpCode.getText());
        
}                                         

    private void btnAddRefActionPerformed(java.awt.event.ActionEvent evt) {                                          
    
         DefaultTableModel model = (DefaultTableModel) tblRef.getModel();

        Vector v = new Vector();

        if (SrNoRef == 0) {
            SrNoRef = 1;
            v.add(SrNoRef);
            v.add("");
            v.add("");
            v.add(0);
            v.add("");
            model.addRow(v);
            SrNoRef++;
        } else {
            v.add(SrNoRef);
            v.add("");
            v.add("");
            v.add(0);
            v.add("");
            model.addRow(v);

            SrNoRef++;
        }
        tblRef.setModel(model);

        
}                                         

    private void btnRemRefActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (tblRef.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Reference to Delete . . . ");
            return;
        }
        SrNoRef--;
        int totalno = tblRef.getRowCount();
        int stratno = tblRef.getSelectedRow();
        while (stratno < totalno) {
            tblRef.setValueAt(stratno, stratno, 0);
            stratno++;
        }
        DefaultTableModel model = (DefaultTableModel) tblRef.getModel();
        model.removeRow(tblRef.getSelectedRow());
        
}                                         

    private void btnAddLanguageActionPerformed(java.awt.event.ActionEvent evt) {                                               
        
        DefaultTableModel model = (DefaultTableModel) tblLanguage.getModel();
        Vector v = new Vector();
        if (SrNoLang == 0) {
            SrNoLang = 1;
            v.add(SrNoLang);
            v.add("");
            v.add(false);
            v.add(false);
            v.add(false);
            model.addRow(v);
            SrNoLang++;
        } else {
            v.add(SrNoLang);
            v.add("");
            v.add(false);
            v.add(false);
            v.add(false);
            model.addRow(v);
            SrNoLang++;
        }
        tblLanguage.setModel(model);        
        
}                                              

    private void btnRemLanguageActionPerformed(java.awt.event.ActionEvent evt) {                                               
            
        if (tblLanguage.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Pls. Select a Language to Delete . . . ");
            return;
        }
        SrNoLang--;
        int totalno = tblLanguage.getRowCount();
        int stratno = tblLanguage.getSelectedRow();
        while (stratno < totalno) {
            try {
                tblLanguage.setValueAt(stratno, stratno, 0);
                stratno++;
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
        DefaultTableModel model = (DefaultTableModel) tblLanguage.getModel();
        model.removeRow(tblLanguage.getSelectedRow());
        
}                                              

    private void btnBankNameAddActionPerformed(java.awt.event.ActionEvent evt) {                                               
       
        DefaultTableModel model =  (DefaultTableModel) tblBankAccDet.getModel();
        Vector v = new Vector();
        v.add("");
        v.add("");
        model.addRow(v);
        
}                                              

    private void btnRemoveAccActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model =  (DefaultTableModel) tblBankAccDet.getModel();
        model.removeRow( tblBankAccDet.getSelectedRow()); 
        
    }                                            

    private void pnlCompDet_pesonalAncestorAdded(javax.swing.event.AncestorEvent evt) {                                                 
        // TODO add your handling code here:
}                                                

    private void btnImgActionPerformed(java.awt.event.ActionEvent evt) {                                       
        Object source = evt.getSource();
        if (source instanceof JButton) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {

                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".bmp")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".jpg")) {
                        return true;
                    }
                    if (f.getName().toLowerCase().endsWith(".gif")) {
                        return true;
                    }
                    return false;
                    //return f.getName().toLowerCase().endsWith(".jpeg")
                    //   || f.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "JPG Files";
                }
            });
            chooser.showOpenDialog(this);

            System.out.println(chooser.getCurrentDirectory().toString());
            btnImg.setIcon(new ImageIcon(
                    new ImageIcon(chooser.getSelectedFile().toString())
                    .getImage().getScaledInstance(btnImg.getWidth(), btnImg.getHeight(), Image.SCALE_FAST))
                    );
            txtPerpath.setText(chooser.getSelectedFile().toString());



            //  chooser.setCurrentDirectory(new File("."));
            //setCurrentDirectory(new File("."));
            //chooser.setFileFilter(new FileFilter() {

        /*int r = chooser.showOpenDialog(new JFrame());
        if (r == JFileChooser.APPROVE_OPTION) {
        String name = chooser.getSelectedFile().getName();
        System.out.println(name);}*/
        }
}                                      

    private void chkContractItemStateChanged(java.awt.event.ItemEvent evt) {                                             

        if (chkContract.isSelected() && btnSaveNew.isEnabled()) {
            this.dtContFrom.setEnabled(true);
            this.dtContToDate.setEnabled(true);
        } else {
            this.dtContFrom.setEnabled(false);
            this.dtContToDate.setEnabled(false);
        }
}                                            

    private void chkProbationItemStateChanged(java.awt.event.ItemEvent evt) {                                              

        if (chkProbation.isSelected() && btnSaveNew.isEnabled() ) {
            this.dtProbFrom.setEnabled(true);
            this.dtProbToDate.setEnabled(true);
        } else {
            this.dtProbFrom.setEnabled(false);
            this.dtProbToDate.setEnabled(false);
        }
}                                             

    private void chkExEmpItemStateChanged(java.awt.event.ItemEvent evt) {                                          

        if (chkExEmp.isSelected() && btnSaveNew.isEnabled()) {
            this.dtExDoj.setEnabled(true);
            this.dtExLeaveDate.setEnabled(true);
        } else {
            this.dtExDoj.setEnabled(false);
            this.dtExLeaveDate.setEnabled(false);
        }
}                                         
       
    private void chknAddDedRow() {

   
        //if(tblSalEarnings.getScrollableTracksViewportHeight())    
        int rwBasic = -1, rwHRA = -1, rwTA = -1,rwGra=-1;
        /* Iterator it = arrListCodeSalStru.iterator();
        while(it.hasNext();
         * */
        ArrayList<String> tmplist = new ArrayList<String>();        
        for (int i = 0; i < modelSal.getRowCount(); i++) {
            String value = modelSal.getValueAt(i, 1).toString();
            /* if(value.equalsIgnoreCase("BASIC")){                
            rwBasic = i;                
            }else   if(value.equalsIgnoreCase("HRA")){
            rwHRA = i;        
            }if(value.equalsIgnoreCase("TA")){
            rwTA =i;                            
            }   */
            if (mapEarDisc.get(value).equals(new Integer(1))) {
                rwBasic = i;
            } else if (mapEarDisc.get(value).equals(new Integer(2))) {
                rwHRA = i;
            } else if (mapEarDisc.get(value).equals(new Integer(3))) {
                rwTA = i;
            } /*else if (mapEDCDisc.get(value).equals(new Integer(6))) {
                rwGra = i;
            }*/                       
           
        }
        if(CheckNULLORRepeated(tblSalEarnings, tbdSalType,0)  && CheckNULLORRepeated(tblSalDeduction, tbdSalType,1) &&       
           CheckNULLORRepeated(tblSalDedEmpCon, tbdSalType,2) && CheckNULLORRepeated(tblSalOthers, tbdSalType,3))
        {
        }else{
            System.out.println("Return");
            return;
        }
         
        
       /* tmplist.clear();
        
        tmplist = new ArrayList<String>();        
        for (int i = 0; i < modelDedSal.getRowCount(); i++) {
            String value = modelDedSal.getValueAt(i, 1).toString();                    
                        
            if (value.equalsIgnoreCase("") || value == null) {
                JOptionPane.showMessageDialog(this, "Please Select Type");
                tbdSalType.setSelectedIndex(1);
                tblSalDeduction.editCellAt(i, 1);
                return;
            }
            if (modelDedSal.getValueAt(i, 2) == null || modelDedSal.getValueAt(i, 2).equals("") || modelDedSal.getValueAt(i, 2).equals(null)) {
                JOptionPane.showMessageDialog(this, "Please Enter Value");
                tbdSalType.setSelectedIndex(1);                
                tblSalDeduction.editCellAt(i, 2);
                return;
            }
            if (tmplist.contains(value)) {
                tmplist.clear();
                JOptionPane.showMessageDialog(this, value + "Type is Repeated");
                return;
            } else {
                tmplist.add(value);
            }
        }
        tmplist.clear();
        tmplist = null;
        tmplist = new ArrayList<String>();        
        for (int i = 0; i < modelSalDedEmpCon.getRowCount(); i++) {
            String value = modelSalDedEmpCon.getValueAt(i, 1).toString();                    
                        
            if (value.equalsIgnoreCase("") || value == null) {
                JOptionPane.showMessageDialog(this, "Please Select Type");
                tbdSalType.setSelectedIndex(2);
                tblSalDedEmpCon.editCellAt(i, 1);
                return;
            }
            if (modelSalDedEmpCon.getValueAt(i, 2) == null || modelSalDedEmpCon.getValueAt(i, 2).equals("") || modelSalDedEmpCon.getValueAt(i, 2).equals(null)) {
                JOptionPane.showMessageDialog(this, "Please Enter Value");    
                tbdSalType.setSelectedIndex(2);
                tblSalDedEmpCon.editCellAt(i, 2);
                return;
            }
            if (tmplist.contains(value)) {
                tmplist.clear();
                JOptionPane.showMessageDialog(this, value + "Type is Repeated");
                tbdSalType.setSelectedIndex(2);
                tblSalDedEmpCon.editCellAt(i, 2);
                return;
            } else {
                tmplist.add(value);
            }
        }
        tmplist.clear();
        tmplist =null;*/
        
        /* if(rwBasic == -1 || rwHRA==-1 || rwTA ==-1){
        JOptionPane.showMessageDialog(this,"Please Select Basic/TA/HRA" );
        return;
        }*/
       for(int i = modelSalDedEmpCon.getRowCount()-1; i>=0;i--){
            modelSalDedEmpCon.removeRow(i);
            SrNoTblSalEmpDed--;
            /*int totalno = modelSalDedEmpCon.getRowCount();
            int stratno = tblSalDedEmpCon.getSelectedRow();
            while (stratno < totalno) {
              try {
                   tblSalDedEmpCon.setValueAt(stratno, stratno, 0);
                    stratno++;
                } catch (ArrayIndexOutOfBoundsException e) {
            }
            }*/            
        }
       
        for(int i = modelDedSal.getRowCount()-1; i>=0;i--){       
            modelDedSal.removeRow(i);
            SrNoTblEmpCon --;
        }
        SrNoTblEmpCon=0;
        SrNoTblSalEmpDed=0;
        ClearSalTables();
         
        int rwdedPF = -1, rwdedPFEmpCon = -1, rwdedESIC = -1, rwDedESICEmpCon ,rwpfadchr=-1;
        float basic = 0; boolean pf = true;float HRA = 0, TA = 0;

        try {
            basic = new Float(tblSalEarnings.getValueAt(rwBasic, 2).toString()).floatValue();
        } catch (ArrayIndexOutOfBoundsException exception) {
            JOptionPane.showMessageDialog(this, "Basic Type Must Be Selected");
            return;
        }        
        if (rwHRA != -1 ) {
            HRA = new Float(tblSalEarnings.getValueAt(rwHRA, 2).toString()).floatValue();
        }
        if (rwTA != -1) {
            TA = new Float(tblSalEarnings.getValueAt(rwTA, 2).toString()).floatValue();
        }

        for (int noRows = modelDedSal.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            if (modelDedSal.getValueAt(noRows, 1).equals("PF")) {
                rwdedPF = noRows;
            }
        }
 
        for (int noRows = modelSalDedEmpCon.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            if (modelSalDedEmpCon.getValueAt(noRows, 1).equals("PF (EC)")) {
                rwdedPFEmpCon = noRows;
            }
        }
        for (int noRows = modelSalDedEmpCon.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            if (modelSalDedEmpCon.getValueAt(noRows, 1).equals("PF (Ad. Chg)")) {
                rwpfadchr = noRows;
            }
        }
        
        // <editor-fold defaultstate="collapsed" desc="Condition For PF ">
        if (basic > 15000){  // EARLIER PF BASIC LIMIT WAS 6500
            if (!chkPFYN.isSelected()) {
                int choice = JOptionPane.showConfirmDialog(this, "Do You Want To Cut PF", "", JOptionPane.YES_NO_OPTION);
                if (choice != JOptionPane.YES_OPTION) {
                    try {
                        if (rwdedPF != -1) {
                            modelDedSal.removeRow(rwdedPF);

                        }
                        if (rwdedPFEmpCon != -1) {
                            modelSalDedEmpCon.removeRow(rwdedPFEmpCon);

                        }
                        pf = false;
                    } catch (Exception e) {
                        System.out.println("Ignore Exception");
                        e.printStackTrace();
                    }
                }
                if (choice == JOptionPane.YES_OPTION) {
                    chkPFYN.setSelected(true);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "PF Cutted");
            chkPFYN.setSelected(true);
        }// </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="Deducting PF Here">
        if (pf) {
            
            if(basic < 15000 ){

                if (rwdedPF == -1) {

                    Vector rowData = new Vector();
                    rowData.add(new Integer(++SrNoTblSalEmpDed));
                    rowData.add("PF");
                    rowData.add(new Float(Math.round(((basic+TA) * 12 / 100))));
                    //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                    modelDedSal.addRow(rowData);

                } else {
                    modelDedSal.setValueAt(new Float(Math.round(((basic+TA) * 12 / 100))), rwdedPF, 2);
                }

                if (rwdedPFEmpCon == -1) {
                    Vector rowData = new Vector();
                    rowData.add(new Integer(++SrNoTblEmpCon));
                    rowData.add("PF (EC)");
                    rowData.add(new Float(Math.round(((basic+TA) * 12 / 100))));
                    //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                    modelSalDedEmpCon.addRow(rowData);
                } else {
                    modelSalDedEmpCon.setValueAt(new Float(Math.round((basic+TA) * 12 / 100)), rwdedPFEmpCon, 2);
                }

                if (rwpfadchr == -1) {
                Vector rowData = new Vector();
                rowData.add(new Integer(++SrNoTblEmpCon));
                rowData.add("PF (Ad. Chg)");
                rowData.add(new Float(Math.round((basic+TA) * 1 / 100)));
                //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                modelSalDedEmpCon.addRow(rowData);
                } else {
                    modelSalDedEmpCon.setValueAt(new Float(Math.round((basic+TA) * 1 / 100)), rwpfadchr, 2);
                }
            }else{
                if (rwdedPF == -1) {

                    Vector rowData = new Vector();
                    rowData.add(new Integer(++SrNoTblSalEmpDed));
                    rowData.add("PF");
                    rowData.add(new Float(Math.round((basic * 12 / 100))));
                    //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                    modelDedSal.addRow(rowData);

                } else {
                    modelDedSal.setValueAt(new Float(Math.round((basic * 12 / 100))), rwdedPF, 2);
                }

                if (rwdedPFEmpCon == -1) {
                    Vector rowData = new Vector();
                    rowData.add(new Integer(++SrNoTblEmpCon));
                    rowData.add("PF (EC)");
                    rowData.add(new Float(Math.round((basic * 12 / 100))));
                    //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                    modelSalDedEmpCon.addRow(rowData);
                } else {
                    modelSalDedEmpCon.setValueAt(new Float(Math.round(basic * 12 / 100)), rwdedPFEmpCon, 2);
                }

                if (rwpfadchr == -1) {
                Vector rowData = new Vector();
                rowData.add(new Integer(++SrNoTblEmpCon));
                rowData.add("PF (Ad. Chg)");
                rowData.add(new Float(Math.round(basic * 1 / 100)));
                //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                modelSalDedEmpCon.addRow(rowData);
                } else {
                    modelSalDedEmpCon.setValueAt(new Float(Math.round(basic * 1 / 100)), rwpfadchr, 2);
                }
            }
        }//IF PF CLOSED// </editor-fold>

        int rwESIC = -1, rwESICEmpCont = -1;
        for (int noRows = modelSalDedEmpCon.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            if (modelSalDedEmpCon.getValueAt(noRows, 1).equals("ESIC (EC)")) {
                rwESICEmpCont = noRows;
            }
        }

        for (int noRows = modelDedSal.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            if (modelDedSal.getValueAt(noRows, 1).equals("ESIC")) {
                rwESIC = noRows;
            }
        }

        // ESIC ...............
       // <editor-fold defaultstate="collapsed" desc="ESIC"> 
        if ((basic + TA + HRA) < 21000) { // ESIC MAX AMT CHANGE AS PER LAKSMI 15000 intial it was 10000
            if (rwESIC == -1) {
                Vector rowData = new Vector();
                rowData.add(new Integer(++SrNoTblSalEmpDed));
                rowData.add("ESIC");
                String ESIC = (basic + HRA + TA) * 0.75 / 100 + "";
                if (Integer.parseInt(ESIC.substring(ESIC.indexOf(".") + 1, ESIC.length())) > 0) {
                    System.out.println(((int) (Float.parseFloat(ESIC))) + 1);
                    ESIC = ((int) (Float.parseFloat(ESIC))) + 1 + "";
                }
                //System.out.println(ESIC.substring(ESIC.indexOf(".")+1, ESIC.length()));
                // rowData.add(new Float(Math.round((basic + HRA + TA) * 1.75 / 100)));
                rowData.add(new Float(ESIC));
                //rowData.add(new Float( ( (int) ((basic + HRA + TA) * 1.75 / 100) )+"" ));
                //System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                modelDedSal.addRow(rowData);
            } else {

                String ESIC = (basic + HRA + TA) * 0.75 / 100 + "";
                if (Integer.parseInt(ESIC.substring(ESIC.indexOf(".") + 1, ESIC.length())) > 0) {    //System.out.println( ((int)(Float.parseFloat(ESIC))) +1);
                    ESIC = ((int) (Float.parseFloat(ESIC))) + 1 + "";
                }
                //System.out.println(ESIC.substring(ESIC.indexOf(".")+1, ESIC.length()));
                modelDedSal.setValueAt(new Float(ESIC), rwESIC, 2);
                //modelDedSal.setValueAt(new Float(Math.round((basic + HRA + TA) * 1.75 / 100)), rwESIC, 2);
                // modelDedSal.setValueAt( new Float( ( (int) ((basic + HRA + TA) * 1.75 / 100) )+"" ), rwESIC, 2);
            }
            //System.out.println((basic + HRA + TA) * 1.75 / 100);

            if (rwESICEmpCont == -1) {
                Vector rowData = new Vector();
                rowData.add(new Integer(++SrNoTblEmpCon));
                rowData.add("ESIC (EC)");
                rowData.add(new Float(Math.round((basic + HRA + TA) * 3.25 / 100)));

                //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                modelSalDedEmpCon.addRow(rowData);
            } else {
                modelSalDedEmpCon.setValueAt(new Float(Math.round((basic + HRA + TA) * 3.25 / 100)), rwESICEmpCont, 2);
            }
        }//if 10000 closed// </editor-fold>

       //Gratutiy
       // <editor-fold defaultstate="collapsed" desc="Gratutiy">
        if (chkContract.isSelected() == false) {
            for (int noRows = modelSalDedEmpCon.getRowCount() - 1; noRows >= 0; noRows--) {
                // if(mapEDCDisc.containsKey(tblDedSal.get)
                //if ((Integer)mapEDCDisc.get((modelSalDedEmpCon.getValueAt(noRows, 1))).intValue() == 6) {
                if (modelSalDedEmpCon.getValueAt(noRows, 1).equals("Gratuity")) {
                    rwGra = noRows;
                }
            }
            if (rwGra == -1) {
                Vector rowData = new Vector();
                rowData.add(new Integer(++SrNoTblEmpCon));
                rowData.add("Gratuity");
                rowData.add(new Float(Math.round((basic * 15 / 26) / 12)));
                //  System.out.println( new Integer(tblSalEarnings.getValueAt(rwBasic,2).toString()).intValue() * 12 /100    );
                modelSalDedEmpCon.addRow(rowData);
            } else {
                modelSalDedEmpCon.setValueAt(new Float(Math.round((basic * 15 / 26) / 12)), rwGra, 2);
            }
        }// </editor-fold>
         
        int rwFBT=-1;
        for (int noRows = modelSalDedEmpCon.getRowCount() - 1; noRows >= 0; noRows--) {
            // if(mapEDCDisc.containsKey(tblDedSal.get)
            //if ((Integer)mapEDCDisc.get((modelSalDedEmpCon.getValueAt(noRows, 1))).intValue() == 6) {
             if(  modelSalDedEmpCon.getValueAt(noRows,1).equals("FBT (EC)") ){   
                rwFBT = noRows;
            }
        }
        float Earnigs = 0, Deduct = 0, EC = 0;
        float [] FBT =CalcFBT();       
        if(FBT!=null){
           if(rwFBT == -1) {
                Vector v = new Vector();
                v.add(++SrNoTblEmpCon);
                v.add("FBT (EC)");
                v.add(new Float(Math.round(FBT[1])));
                modelSalDedEmpCon.addRow(v);
           }else{
               modelSalDedEmpCon.setValueAt(new Float(Math.round(FBT[1])), rwFBT, 2);  
           }
        }        
        //Setting Net Salary    
        for (int i = 0; i < tblSalEarnings.getRowCount(); i++) {
            Earnigs += new Float(tblSalEarnings.getValueAt(i, 2).toString());
        }
        for (int i = 0; i < tblSalDeduction.getRowCount(); i++) {
            Deduct += new Float(tblSalDeduction.getValueAt(i, 2).toString());
            System.out.println("tblsalded first" + new Float(tblSalDeduction.getValueAt(i, 2).toString()) );
        }
        for (int i = 0; i < tblSalDedEmpCon.getRowCount(); i++) {
            EC += new Float(tblSalDedEmpCon.getValueAt(i, 2).toString());
        }             
        
        CheckPT(Earnigs);
         
        tblNetSalDet.setValueAt(new Float(Math.round((Earnigs - Deduct))), 0, 0);
        tblNetSalDet.setValueAt(new Float(Math.round(Earnigs)), 0, 1);
        if(FBT==null)
            tblNetSalDet.setValueAt(new Float(Math.round(Earnigs + EC )), 0, 2);
        else
            tblNetSalDet.setValueAt(new Float(Math.round(Earnigs + EC + FBT[0])), 0, 2);
              
        
        //Calculating Ded Sal
        for (int i = 0; i < tblSalDeduction.getRowCount(); i++) {
            Deduct += new Float(tblSalDeduction.getValueAt(i, 2).toString());
            System.out.println("tblsalded last" + new Float(tblSalDeduction.getValueAt(i, 2).toString()) );
        }
        txtsumDed.setText(Math.round(Deduct)+"");
        txtSumEmpCon.setText(Math.round(EC)+"");
        tblSalEarningsKeyTyped(null);
        tblSalDeductionKeyTyped(null);
        tblSalDedEmpConKeyTyped(null);
        tblSalOthersKeyTyped(null);
    }
    
    public void CheckPT(float Earnigs){
        try {



            String myStatement = " Select * from  Ms_PT_Pallete where  Mst_Code=" + 12;
            ResultSet set = Execute.ExecuteMyQeury(con, myStatement);
            Vector rowData = new Vector();
            rowData.add(new Integer(++SrNoTblSalEmpDed));
            rowData.add("PT");
            while (set.next()) {
                float max = set.getFloat("ToAmount");                                 
                if( max <=0.0  ||(set.getFloat("FrmAmount") <  Earnigs && Earnigs <= max) )
                {
                    rowData.add(set.getFloat("DedAmount"));
                }
                System.out.println("max amount" + max);
            }          
            modelDedSal.addRow(rowData);

        } catch (SQLException ex) {
            //Logger.getLogger(EmpDetails.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("Error in PT....");
            ex.printStackTrace();
        }
    }
        
    // Variables declaration - do not modify
    private javax.swing.JPanel SalType;
    private javax.swing.JScrollPane Scrl_language1;
    private javax.swing.JButton btnAddDed;
    private javax.swing.JButton btnAddEarnings;
    private javax.swing.JButton btnAddEmpCon;
    private javax.swing.JButton btnAddExp;
    private javax.swing.JButton btnAddFamily;
    private javax.swing.JButton btnAddLanguage;
    private javax.swing.JButton btnAddOthers;
    private javax.swing.JButton btnAddRef;
    private javax.swing.JButton btnCalc;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnImg;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnQualification;
    private javax.swing.JButton btnRemDed;
    private javax.swing.JButton btnRemEarnings;
    private javax.swing.JButton btnRemEmpCon;
    private javax.swing.JButton btnRemExp;
    private javax.swing.JButton btnRemFamily;
    private javax.swing.JButton btnRemLanguage;
    private javax.swing.JButton btnRemOthers;
    private javax.swing.JButton btnRemQual;
    private javax.swing.JButton btnRemRef;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSaveNew;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboBgrp;
    private javax.swing.JComboBox cboBranch;
    private javax.swing.JComboBox cboCategory;
    private javax.swing.JComboBox cboCompany;
    private javax.swing.JComboBox cboDept;
    private javax.swing.JComboBox cboDesignation;
    private javax.swing.JComboBox cboEyeColor;
    private javax.swing.JComboBox cboHouse;
    private javax.swing.JComboBox cboInterviewFinal;
    private javax.swing.JComboBox cboNationality;
    private javax.swing.JComboBox cboReligion;
    private javax.swing.JComboBox cboReporting;
    private javax.swing.JComboBox cboSex;
    private javax.swing.JComboBox cboShift;
    private javax.swing.JComboBox cboStateM;
    private javax.swing.JComboBox cboStateP;
    private javax.swing.JComboBox cboWeekOff;
    private javax.swing.JCheckBox chk2WheelComp;
    private javax.swing.JCheckBox chk2Wheelar;
    private javax.swing.JCheckBox chk4WheelComp;
    private javax.swing.JCheckBox chk4Wheelar;
    private javax.swing.JCheckBox chkAccomodation;
    private javax.swing.JCheckBox chkContract;
    private javax.swing.JCheckBox chkDeptHead;
    private javax.swing.JCheckBox chkExEmp;
    private javax.swing.JCheckBox chkFood;
    private javax.swing.JCheckBox chkFuel;
    private javax.swing.JCheckBox chkInternet;
    private javax.swing.JCheckBox chkIsActive;
    private javax.swing.JCheckBox chkMarriege;
    private javax.swing.JCheckBox chkMobile;
    private javax.swing.JCheckBox chkMobileBill;
    private javax.swing.JCheckBox chkPFYN;
    private javax.swing.JCheckBox chkPhonComp;
    private javax.swing.JCheckBox chkProbation;
    private javax.swing.JCheckBox chkSimCard;
    private javax.swing.JCheckBox chkTrainee;
    private AdvDate.AdvDatePnl dtCoj;
    private AdvDate.AdvDatePnl dtConfirmDate;
    private AdvDate.AdvDatePnl dtContFrom;
    private AdvDate.AdvDatePnl dtContToDate;
    private AdvDate.AdvDatePnl dtDOB;
    private AdvDate.AdvDatePnl dtDoj;
    private AdvDate.AdvDatePnl dtEffectDate;
    private AdvDate.AdvDatePnl dtExDoj;
    private AdvDate.AdvDatePnl dtExLeaveDate;
    private AdvDate.AdvDatePnl dtInterviewFinal;
    private AdvDate.AdvDatePnl dtInterviewPre;
    private AdvDate.AdvDatePnl dtMarriageDate;
    private AdvDate.AdvDatePnl dtProbFrom;
    private AdvDate.AdvDatePnl dtProbToDate;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane jScrollRef1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblEmpCode;
    private javax.swing.JLabel lblSign;
    private javax.swing.JLabel lblThumb;
    private javax.swing.JPanel panelComProv;
    private javax.swing.JPanel pnlAdd_personal;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlCompDet_pesonal;
    private javax.swing.JPanel pnlEmpHdr;
    private javax.swing.JPanel pnlExp_Qual;
    private javax.swing.JPanel pnlFamilyDet;
    private javax.swing.JPanel pnlFullDet;
    private javax.swing.JPanel pnlLanguage1;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPersonalDet;
    private javax.swing.JPanel pnlReference1;
    private javax.swing.JPanel pnlSalAccounts;
    private javax.swing.JPanel pnlSal_Ben;
    private javax.swing.JRadioButton rdoAuto;
    private javax.swing.JRadioButton rdoManual;
    private javax.swing.JTabbedPane tbdEmpDet;
    private javax.swing.JPanel tbdOthers;
    private javax.swing.JTabbedPane tbdSalType;
    private javax.swing.JTable tblBankAccDet;
    private javax.swing.JTable tblExperinceDetails;
    private javax.swing.JTable tblFamily;
    private javax.swing.JTable tblLanguage;
    private javax.swing.JTable tblNetSalDet;
    private javax.swing.JTable tblQualification;
    private javax.swing.JTable tblRef;
    private javax.swing.JTable tblSalDedEmpCon;
    private javax.swing.JTable tblSalDeduction;
    private javax.swing.JTable tblSalEarnings;
    private javax.swing.JTable tblSalOthers;
    private javax.swing.JTextField txt2WheelarNo;
    private javax.swing.JTextField txt4WheelarNo;
    private javax.swing.JTextArea txtAddressM;
    private javax.swing.JTextArea txtAddressP;
    private javax.swing.JTextField txtBirthPlace;
    private javax.swing.JTextField txtChildren;
    private javax.swing.JTextField txtCityM;
    private javax.swing.JTextField txtCityP;
    private javax.swing.JTextField txtDocDetails;
    private javax.swing.JTextField txtDrivingLicNo;
    private javax.swing.JTextField txtESICAccNo;
    private javax.swing.JTextField txtEmailM;
    private javax.swing.JTextField txtFHGName;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtFamilyAccNo;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtIdmark;
    private javax.swing.JTextField txtInterviewPre;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtMobileM;
    private javax.swing.JTextField txtMobileP;
    private javax.swing.JTextField txtPFAccNo;
    private javax.swing.JTextField txtPPFAccNo;
    private javax.swing.JTextField txtPan;
    private javax.swing.JTextField txtPassport;
    private javax.swing.JTextField txtPerpath;
    private javax.swing.JTextField txtPhoneM;
    private javax.swing.JTextField txtPhoneP;
    private javax.swing.JTextField txtPinM;
    private javax.swing.JTextField txtPinP1;
    private javax.swing.JTextField txtPunch;
    private javax.swing.JTextField txtRelation;
    private javax.swing.JTextField txtRemarksFinal;
    private javax.swing.JTextField txtRemarksPre;
    private javax.swing.JTextField txtRentPaid;
    private javax.swing.JTextField txtSName;
    private javax.swing.JTextField txtSign;
    private javax.swing.JTextField txtStdM;
    private javax.swing.JTextField txtStdP;
    private javax.swing.JTextField txtSumEmpCon;
    private javax.swing.JTextField txtSumOthers;
    private javax.swing.JTextField txtThumb;
    private javax.swing.JTextField txtWeight;
    private javax.swing.JTextField txtsumDed;
    // End of variables declaration

}



